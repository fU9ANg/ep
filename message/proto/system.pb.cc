// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/system.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Auth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auth_reflection_ = NULL;
const ::google::protobuf::Descriptor* Heart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heart_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fsystem_2eproto() {
  protobuf_AddDesc_proto_2fsystem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/system.proto");
  GOOGLE_CHECK(file != NULL);
  Auth_descriptor_ = file->message_type(0);
  static const int Auth_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, auth_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, auth_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, is_auth_),
  };
  Auth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auth_descriptor_,
      Auth::default_instance_,
      Auth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auth));
  Heart_descriptor_ = file->message_type(1);
  static const int Heart_offsets_[1] = {
  };
  Heart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heart_descriptor_,
      Heart::default_instance_,
      Heart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heart));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fsystem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auth_descriptor_, &Auth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heart_descriptor_, &Heart::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fsystem_2eproto() {
  delete Auth::default_instance_;
  delete Auth_reflection_;
  delete Heart::default_instance_;
  delete Heart_reflection_;
}

void protobuf_AddDesc_proto_2fsystem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto/system.proto\":\n\004Auth\022\017\n\007auth_id\030"
    "\001 \002(\005\022\020\n\010auth_msg\030\002 \002(\t\022\017\n\007is_auth\030\003 \002(\010"
    "\"\007\n\005Heart", 89);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/system.proto", &protobuf_RegisterTypes);
  Auth::default_instance_ = new Auth();
  Heart::default_instance_ = new Heart();
  Auth::default_instance_->InitAsDefaultInstance();
  Heart::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fsystem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fsystem_2eproto {
  StaticDescriptorInitializer_proto_2fsystem_2eproto() {
    protobuf_AddDesc_proto_2fsystem_2eproto();
  }
} static_descriptor_initializer_proto_2fsystem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Auth::kAuthIdFieldNumber;
const int Auth::kAuthMsgFieldNumber;
const int Auth::kIsAuthFieldNumber;
#endif  // !_MSC_VER

Auth::Auth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auth::InitAsDefaultInstance() {
}

Auth::Auth(const Auth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auth::SharedCtor() {
  _cached_size_ = 0;
  auth_id_ = 0;
  auth_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_auth_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auth::~Auth() {
  SharedDtor();
}

void Auth::SharedDtor() {
  if (auth_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_msg_;
  }
  if (this != default_instance_) {
  }
}

void Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auth_descriptor_;
}

const Auth& Auth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsystem_2eproto();
  return *default_instance_;
}

Auth* Auth::default_instance_ = NULL;

Auth* Auth::New() const {
  return new Auth;
}

void Auth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auth_id_ = 0;
    if (has_auth_msg()) {
      if (auth_msg_ != &::google::protobuf::internal::kEmptyString) {
        auth_msg_->clear();
      }
    }
    is_auth_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 auth_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_id_)));
          set_has_auth_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auth_msg;
        break;
      }

      // required string auth_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_msg().data(), this->auth_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_auth;
        break;
      }

      // required bool is_auth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auth_)));
          set_has_is_auth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 auth_id = 1;
  if (has_auth_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->auth_id(), output);
  }

  // required string auth_msg = 2;
  if (has_auth_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_msg().data(), this->auth_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->auth_msg(), output);
  }

  // required bool is_auth = 3;
  if (has_is_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_auth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 auth_id = 1;
  if (has_auth_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->auth_id(), target);
  }

  // required string auth_msg = 2;
  if (has_auth_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_msg().data(), this->auth_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->auth_msg(), target);
  }

  // required bool is_auth = 3;
  if (has_is_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_auth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 auth_id = 1;
    if (has_auth_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auth_id());
    }

    // required string auth_msg = 2;
    if (has_auth_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_msg());
    }

    // required bool is_auth = 3;
    if (has_is_auth()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auth::MergeFrom(const Auth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth_id()) {
      set_auth_id(from.auth_id());
    }
    if (from.has_auth_msg()) {
      set_auth_msg(from.auth_msg());
    }
    if (from.has_is_auth()) {
      set_is_auth(from.is_auth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auth::CopyFrom(const Auth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Auth::Swap(Auth* other) {
  if (other != this) {
    std::swap(auth_id_, other->auth_id_);
    std::swap(auth_msg_, other->auth_msg_);
    std::swap(is_auth_, other->is_auth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auth_descriptor_;
  metadata.reflection = Auth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Heart::Heart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Heart::InitAsDefaultInstance() {
}

Heart::Heart(const Heart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Heart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heart::~Heart() {
  SharedDtor();
}

void Heart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heart_descriptor_;
}

const Heart& Heart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsystem_2eproto();
  return *default_instance_;
}

Heart* Heart::default_instance_ = NULL;

Heart* Heart::New() const {
  return new Heart;
}

void Heart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Heart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Heart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Heart::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heart::MergeFrom(const Heart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heart::CopyFrom(const Heart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heart::IsInitialized() const {

  return true;
}

void Heart::Swap(Heart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heart_descriptor_;
  metadata.reflection = Heart_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
