// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/protocol.proto

#ifndef PROTOBUF_proto_2fprotocol_2eproto__INCLUDED
#define PROTOBUF_proto_2fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fprotocol_2eproto();
void protobuf_AssignDesc_proto_2fprotocol_2eproto();
void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

class cLogin;
class sLogin;
class cLogout;
class sLogout;
class cGetFuncList;
class FuncNode;
class sGetFuncList;
class cSetFunc;
class sSetFunc;
class sGetClassroomStatus;
class sGetClassroomInfo;
class cGetSchoolAccountList;
class AccountNode;
class sGetSchoolAccountList;
class cGetGradeList;
class sGetGradeList;
class cGetCourseList;
class CourseNode;
class sGetCourseList;
class cGetContent;
class sGetContent;
class cGetClassList;
class ClassListNode;
class sGetClassList;
class cGetClassRoomList;
class sGetClassRoomList;
class ContentNode;
class cSetContent;
class sSetContent;
class CoursewareStatusNode;
class sCourseware;
class UpdateCourseware;
class cCourseOver;
class sGetCoursewareListStatus;
class cGetClassInfo;
class sGetClassInfo;
class cGetWhiteboardInfo;
class sGetWhiteboardInfo;
class cDisplay;
class sDisplay;
class cEnlarge;
class cReduce;
class cClassOver;
class sClassOver;
class cLeaveEarly;
class cGetStudentList;
class StudentListNode;
class sGetStudentList;
class cGetActiveStudentList;
class sGetActiveStudentList;
class cGetGroupStudentList;
class sGetGroupStudentList;
class cGetGroupList;
class sGetGroupList;
class sUpdateStudentStatus;
class cGetStudentInfo;
class sGetStudentInfo;
class cGetTeacherInfo;
class sGetTeacherInfo;
class PeerGroup;
class cSetGroup;
class sSetGroup;
class cRelay;
class sRelay;
class bookNode;
class cGetPublicBooksList;
class userNode;
class serverInfoNode;
class bookList;
class cPublish;
class cSell;
class cChangeOwner;
class sResult;
class group_node;
class point;
class PuzzleInfo;
class UpdatePuzzleResult;
class UpdateConn;
class cGetNextStudent;
class sGetNextStudent;
class cUpdateDrawSet;
class cUpdateDrawInfo;
class sUpdateDrawInfo;
class cUpdateBackground;
class sUpdateBackground;
class cUpdateCopyIntoPaint;
class sUpdateCopyIntoPaint;
class UpdatePenAndEraserNode;
class cUpdatePenAnderaser;
class sUpdatePenAnderaser;
class cUpdateFilling;
class sUpdateFilling;
class cUpdateStamp;
class sUpdateStamp;
class cUpdateFillPic;
class sUpdateFillPic;
class cUpdateMutex;
class sUpdateMutex;
class cUpdateCollage;
class sUpdateCollage;
class cUpdateWord;
class cUpdateFrame;
class sUpdateFrame;
class cGetStudentDrawLog;
class tst_book;

enum classroom_status {
  CS_INVALIED = 1,
  CS_WAIT = 2,
  CS_START_CLASS = 3
};
bool classroom_status_IsValid(int value);
const classroom_status classroom_status_MIN = CS_INVALIED;
const classroom_status classroom_status_MAX = CS_START_CLASS;
const int classroom_status_ARRAYSIZE = classroom_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* classroom_status_descriptor();
inline const ::std::string& classroom_status_Name(classroom_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    classroom_status_descriptor(), value);
}
inline bool classroom_status_Parse(
    const ::std::string& name, classroom_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<classroom_status>(
    classroom_status_descriptor(), name, value);
}
enum LoginType {
  LT_USER = 0,
  LT_HEADMASTER = 1,
  LT_TEACHER = 2,
  LT_PARENTS = 3,
  LT_STUDENT = 4,
  LT_WHITEBOARD = 5,
  LT_WRITEBOARD = 6
};
bool LoginType_IsValid(int value);
const LoginType LoginType_MIN = LT_USER;
const LoginType LoginType_MAX = LT_WRITEBOARD;
const int LoginType_ARRAYSIZE = LoginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginType_descriptor();
inline const ::std::string& LoginType_Name(LoginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginType_descriptor(), value);
}
inline bool LoginType_Parse(
    const ::std::string& name, LoginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginType>(
    LoginType_descriptor(), name, value);
}
enum CourseType {
  CT_INVALID = 1,
  CT_RELAY = 2,
  CT_DRAW = 3,
  CT_FREEDRAW = 4
};
bool CourseType_IsValid(int value);
const CourseType CourseType_MIN = CT_INVALID;
const CourseType CourseType_MAX = CT_FREEDRAW;
const int CourseType_ARRAYSIZE = CourseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CourseType_descriptor();
inline const ::std::string& CourseType_Name(CourseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CourseType_descriptor(), value);
}
inline bool CourseType_Parse(
    const ::std::string& name, CourseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CourseType>(
    CourseType_descriptor(), name, value);
}
enum courseware_status {
  CS_INVALID = 1,
  CS_START = 2,
  CS_OVER = 3
};
bool courseware_status_IsValid(int value);
const courseware_status courseware_status_MIN = CS_INVALID;
const courseware_status courseware_status_MAX = CS_OVER;
const int courseware_status_ARRAYSIZE = courseware_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* courseware_status_descriptor();
inline const ::std::string& courseware_status_Name(courseware_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    courseware_status_descriptor(), value);
}
inline bool courseware_status_Parse(
    const ::std::string& name, courseware_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<courseware_status>(
    courseware_status_descriptor(), name, value);
}
enum FuncType {
  FT_INVALID = 1,
  FT_PERSONAL = 2,
  FT_SCHOOL = 3,
  FT_FAMILY = 4,
  FT_FRIEND = 5,
  FT_OFFICE = 6
};
bool FuncType_IsValid(int value);
const FuncType FuncType_MIN = FT_INVALID;
const FuncType FuncType_MAX = FT_OFFICE;
const int FuncType_ARRAYSIZE = FuncType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FuncType_descriptor();
inline const ::std::string& FuncType_Name(FuncType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FuncType_descriptor(), value);
}
inline bool FuncType_Parse(
    const ::std::string& name, FuncType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FuncType>(
    FuncType_descriptor(), name, value);
}
enum user_status {
  US_INVALID = 1,
  US_ONLINE = 2,
  US_OFFLINE = 3
};
bool user_status_IsValid(int value);
const user_status user_status_MIN = US_INVALID;
const user_status user_status_MAX = US_OFFLINE;
const int user_status_ARRAYSIZE = user_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* user_status_descriptor();
inline const ::std::string& user_status_Name(user_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    user_status_descriptor(), value);
}
inline bool user_status_Parse(
    const ::std::string& name, user_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<user_status>(
    user_status_descriptor(), name, value);
}
enum mutex_status {
  MS_INVALID = 3,
  MS_LOCK = 1,
  MS_UNLOCK = 2
};
bool mutex_status_IsValid(int value);
const mutex_status mutex_status_MIN = MS_LOCK;
const mutex_status mutex_status_MAX = MS_INVALID;
const int mutex_status_ARRAYSIZE = mutex_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* mutex_status_descriptor();
inline const ::std::string& mutex_status_Name(mutex_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    mutex_status_descriptor(), value);
}
inline bool mutex_status_Parse(
    const ::std::string& name, mutex_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<mutex_status>(
    mutex_status_descriptor(), name, value);
}
// ===================================================================

class cLogin : public ::google::protobuf::Message {
 public:
  cLogin();
  virtual ~cLogin();

  cLogin(const cLogin& from);

  inline cLogin& operator=(const cLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cLogin& default_instance();

  void Swap(cLogin* other);

  // implements Message ----------------------------------------------

  cLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cLogin& from);
  void MergeFrom(const cLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:cLogin)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* passwd_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cLogin* default_instance_;
};
// -------------------------------------------------------------------

class sLogin : public ::google::protobuf::Message {
 public:
  sLogin();
  virtual ~sLogin();

  sLogin(const sLogin& from);

  inline sLogin& operator=(const sLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sLogin& default_instance();

  void Swap(sLogin* other);

  // implements Message ----------------------------------------------

  sLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sLogin& from);
  void MergeFrom(const sLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // optional bool enter_classroom = 3;
  inline bool has_enter_classroom() const;
  inline void clear_enter_classroom();
  static const int kEnterClassroomFieldNumber = 3;
  inline bool enter_classroom() const;
  inline void set_enter_classroom(bool value);

  // optional int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 login_type = 4;
  inline bool has_login_type() const;
  inline void clear_login_type();
  static const int kLoginTypeFieldNumber = 4;
  inline ::google::protobuf::int32 login_type() const;
  inline void set_login_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sLogin)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_enter_classroom();
  inline void clear_has_enter_classroom();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_login_type();
  inline void clear_has_login_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;
  bool enter_classroom_;
  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 login_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sLogin* default_instance_;
};
// -------------------------------------------------------------------

class cLogout : public ::google::protobuf::Message {
 public:
  cLogout();
  virtual ~cLogout();

  cLogout(const cLogout& from);

  inline cLogout& operator=(const cLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cLogout& default_instance();

  void Swap(cLogout* other);

  // implements Message ----------------------------------------------

  cLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cLogout& from);
  void MergeFrom(const cLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cLogout)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cLogout* default_instance_;
};
// -------------------------------------------------------------------

class sLogout : public ::google::protobuf::Message {
 public:
  sLogout();
  virtual ~sLogout();

  sLogout(const sLogout& from);

  inline sLogout& operator=(const sLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sLogout& default_instance();

  void Swap(sLogout* other);

  // implements Message ----------------------------------------------

  sLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sLogout& from);
  void MergeFrom(const sLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 login_type = 1;
  inline bool has_login_type() const;
  inline void clear_login_type();
  static const int kLoginTypeFieldNumber = 1;
  inline ::google::protobuf::int32 login_type() const;
  inline void set_login_type(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sLogout)
 private:
  inline void set_has_login_type();
  inline void clear_has_login_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 login_type_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sLogout* default_instance_;
};
// -------------------------------------------------------------------

class cGetFuncList : public ::google::protobuf::Message {
 public:
  cGetFuncList();
  virtual ~cGetFuncList();

  cGetFuncList(const cGetFuncList& from);

  inline cGetFuncList& operator=(const cGetFuncList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetFuncList& default_instance();

  void Swap(cGetFuncList* other);

  // implements Message ----------------------------------------------

  cGetFuncList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetFuncList& from);
  void MergeFrom(const cGetFuncList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetFuncList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetFuncList* default_instance_;
};
// -------------------------------------------------------------------

class FuncNode : public ::google::protobuf::Message {
 public:
  FuncNode();
  virtual ~FuncNode();

  FuncNode(const FuncNode& from);

  inline FuncNode& operator=(const FuncNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FuncNode& default_instance();

  void Swap(FuncNode* other);

  // implements Message ----------------------------------------------

  FuncNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FuncNode& from);
  void MergeFrom(const FuncNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string res_path = 3;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 3;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:FuncNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static FuncNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetFuncList : public ::google::protobuf::Message {
 public:
  sGetFuncList();
  virtual ~sGetFuncList();

  sGetFuncList(const sGetFuncList& from);

  inline sGetFuncList& operator=(const sGetFuncList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetFuncList& default_instance();

  void Swap(sGetFuncList* other);

  // implements Message ----------------------------------------------

  sGetFuncList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetFuncList& from);
  void MergeFrom(const sGetFuncList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FuncNode func_list = 1;
  inline int func_list_size() const;
  inline void clear_func_list();
  static const int kFuncListFieldNumber = 1;
  inline const ::FuncNode& func_list(int index) const;
  inline ::FuncNode* mutable_func_list(int index);
  inline ::FuncNode* add_func_list();
  inline const ::google::protobuf::RepeatedPtrField< ::FuncNode >&
      func_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::FuncNode >*
      mutable_func_list();

  // @@protoc_insertion_point(class_scope:sGetFuncList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FuncNode > func_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetFuncList* default_instance_;
};
// -------------------------------------------------------------------

class cSetFunc : public ::google::protobuf::Message {
 public:
  cSetFunc();
  virtual ~cSetFunc();

  cSetFunc(const cSetFunc& from);

  inline cSetFunc& operator=(const cSetFunc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSetFunc& default_instance();

  void Swap(cSetFunc* other);

  // implements Message ----------------------------------------------

  cSetFunc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSetFunc& from);
  void MergeFrom(const cSetFunc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 func_type = 1;
  inline bool has_func_type() const;
  inline void clear_func_type();
  static const int kFuncTypeFieldNumber = 1;
  inline ::google::protobuf::int32 func_type() const;
  inline void set_func_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cSetFunc)
 private:
  inline void set_has_func_type();
  inline void clear_has_func_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 func_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSetFunc* default_instance_;
};
// -------------------------------------------------------------------

class sSetFunc : public ::google::protobuf::Message {
 public:
  sSetFunc();
  virtual ~sSetFunc();

  sSetFunc(const sSetFunc& from);

  inline sSetFunc& operator=(const sSetFunc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sSetFunc& default_instance();

  void Swap(sSetFunc* other);

  // implements Message ----------------------------------------------

  sSetFunc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sSetFunc& from);
  void MergeFrom(const sSetFunc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:sSetFunc)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sSetFunc* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassroomStatus : public ::google::protobuf::Message {
 public:
  sGetClassroomStatus();
  virtual ~sGetClassroomStatus();

  sGetClassroomStatus(const sGetClassroomStatus& from);

  inline sGetClassroomStatus& operator=(const sGetClassroomStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassroomStatus& default_instance();

  void Swap(sGetClassroomStatus* other);

  // implements Message ----------------------------------------------

  sGetClassroomStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassroomStatus& from);
  void MergeFrom(const sGetClassroomStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .classroom_status cs = 1 [default = CS_INVALIED];
  inline bool has_cs() const;
  inline void clear_cs();
  static const int kCsFieldNumber = 1;
  inline ::classroom_status cs() const;
  inline void set_cs(::classroom_status value);

  // @@protoc_insertion_point(class_scope:sGetClassroomStatus)
 private:
  inline void set_has_cs();
  inline void clear_has_cs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int cs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassroomStatus* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassroomInfo : public ::google::protobuf::Message {
 public:
  sGetClassroomInfo();
  virtual ~sGetClassroomInfo();

  sGetClassroomInfo(const sGetClassroomInfo& from);

  inline sGetClassroomInfo& operator=(const sGetClassroomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassroomInfo& default_instance();

  void Swap(sGetClassroomInfo* other);

  // implements Message ----------------------------------------------

  sGetClassroomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassroomInfo& from);
  void MergeFrom(const sGetClassroomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required int32 grade_id = 2;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 2;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sGetClassroomInfo)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_grade_id();
  inline void clear_has_grade_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;
  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassroomInfo* default_instance_;
};
// -------------------------------------------------------------------

class cGetSchoolAccountList : public ::google::protobuf::Message {
 public:
  cGetSchoolAccountList();
  virtual ~cGetSchoolAccountList();

  cGetSchoolAccountList(const cGetSchoolAccountList& from);

  inline cGetSchoolAccountList& operator=(const cGetSchoolAccountList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetSchoolAccountList& default_instance();

  void Swap(cGetSchoolAccountList* other);

  // implements Message ----------------------------------------------

  cGetSchoolAccountList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetSchoolAccountList& from);
  void MergeFrom(const cGetSchoolAccountList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 school_id = 1;
  inline bool has_school_id() const;
  inline void clear_school_id();
  static const int kSchoolIdFieldNumber = 1;
  inline ::google::protobuf::int32 school_id() const;
  inline void set_school_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetSchoolAccountList)
 private:
  inline void set_has_school_id();
  inline void clear_has_school_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 school_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetSchoolAccountList* default_instance_;
};
// -------------------------------------------------------------------

class AccountNode : public ::google::protobuf::Message {
 public:
  AccountNode();
  virtual ~AccountNode();

  AccountNode(const AccountNode& from);

  inline AccountNode& operator=(const AccountNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountNode& default_instance();

  void Swap(AccountNode* other);

  // implements Message ----------------------------------------------

  AccountNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountNode& from);
  void MergeFrom(const AccountNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional .LoginType user_type = 2;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  inline ::LoginType user_type() const;
  inline void set_user_type(::LoginType value);

  // @@protoc_insertion_point(class_scope:AccountNode)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_user_type();
  inline void clear_has_user_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int user_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static AccountNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetSchoolAccountList : public ::google::protobuf::Message {
 public:
  sGetSchoolAccountList();
  virtual ~sGetSchoolAccountList();

  sGetSchoolAccountList(const sGetSchoolAccountList& from);

  inline sGetSchoolAccountList& operator=(const sGetSchoolAccountList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetSchoolAccountList& default_instance();

  void Swap(sGetSchoolAccountList* other);

  // implements Message ----------------------------------------------

  sGetSchoolAccountList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetSchoolAccountList& from);
  void MergeFrom(const sGetSchoolAccountList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AccountNode account_list = 1;
  inline int account_list_size() const;
  inline void clear_account_list();
  static const int kAccountListFieldNumber = 1;
  inline const ::AccountNode& account_list(int index) const;
  inline ::AccountNode* mutable_account_list(int index);
  inline ::AccountNode* add_account_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AccountNode >&
      account_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AccountNode >*
      mutable_account_list();

  // @@protoc_insertion_point(class_scope:sGetSchoolAccountList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AccountNode > account_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetSchoolAccountList* default_instance_;
};
// -------------------------------------------------------------------

class cGetGradeList : public ::google::protobuf::Message {
 public:
  cGetGradeList();
  virtual ~cGetGradeList();

  cGetGradeList(const cGetGradeList& from);

  inline cGetGradeList& operator=(const cGetGradeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetGradeList& default_instance();

  void Swap(cGetGradeList* other);

  // implements Message ----------------------------------------------

  cGetGradeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetGradeList& from);
  void MergeFrom(const cGetGradeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline ::google::protobuf::int32 content() const;
  inline void set_content(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetGradeList)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetGradeList* default_instance_;
};
// -------------------------------------------------------------------

class sGetGradeList : public ::google::protobuf::Message {
 public:
  sGetGradeList();
  virtual ~sGetGradeList();

  sGetGradeList(const sGetGradeList& from);

  inline sGetGradeList& operator=(const sGetGradeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetGradeList& default_instance();

  void Swap(sGetGradeList* other);

  // implements Message ----------------------------------------------

  sGetGradeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetGradeList& from);
  void MergeFrom(const sGetGradeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ClassListNode grade_list = 1;
  inline int grade_list_size() const;
  inline void clear_grade_list();
  static const int kGradeListFieldNumber = 1;
  inline const ::ClassListNode& grade_list(int index) const;
  inline ::ClassListNode* mutable_grade_list(int index);
  inline ::ClassListNode* add_grade_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
      grade_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
      mutable_grade_list();

  // @@protoc_insertion_point(class_scope:sGetGradeList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ClassListNode > grade_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetGradeList* default_instance_;
};
// -------------------------------------------------------------------

class cGetCourseList : public ::google::protobuf::Message {
 public:
  cGetCourseList();
  virtual ~cGetCourseList();

  cGetCourseList(const cGetCourseList& from);

  inline cGetCourseList& operator=(const cGetCourseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetCourseList& default_instance();

  void Swap(cGetCourseList* other);

  // implements Message ----------------------------------------------

  cGetCourseList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetCourseList& from);
  void MergeFrom(const cGetCourseList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grade_id = 1;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 1;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetCourseList)
 private:
  inline void set_has_grade_id();
  inline void clear_has_grade_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetCourseList* default_instance_;
};
// -------------------------------------------------------------------

class CourseNode : public ::google::protobuf::Message {
 public:
  CourseNode();
  virtual ~CourseNode();

  CourseNode(const CourseNode& from);

  inline CourseNode& operator=(const CourseNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CourseNode& default_instance();

  void Swap(CourseNode* other);

  // implements Message ----------------------------------------------

  CourseNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CourseNode& from);
  void MergeFrom(const CourseNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // required string course_name = 2;
  inline bool has_course_name() const;
  inline void clear_course_name();
  static const int kCourseNameFieldNumber = 2;
  inline const ::std::string& course_name() const;
  inline void set_course_name(const ::std::string& value);
  inline void set_course_name(const char* value);
  inline void set_course_name(const char* value, size_t size);
  inline ::std::string* mutable_course_name();
  inline ::std::string* release_course_name();
  inline void set_allocated_course_name(::std::string* course_name);

  // required int32 grade_id = 3;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 3;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // optional int32 language = 4;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 4;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);

  // optional int32 art = 5;
  inline bool has_art() const;
  inline void clear_art();
  static const int kArtFieldNumber = 5;
  inline ::google::protobuf::int32 art() const;
  inline void set_art(::google::protobuf::int32 value);

  // optional int32 community = 6;
  inline bool has_community() const;
  inline void clear_community();
  static const int kCommunityFieldNumber = 6;
  inline ::google::protobuf::int32 community() const;
  inline void set_community(::google::protobuf::int32 value);

  // optional int32 health = 7;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 7;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // optional int32 science = 8;
  inline bool has_science() const;
  inline void clear_science();
  static const int kScienceFieldNumber = 8;
  inline ::google::protobuf::int32 science() const;
  inline void set_science(::google::protobuf::int32 value);

  // required string res_path = 9;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 9;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // required .CourseType course_type = 10 [default = CT_INVALID];
  inline bool has_course_type() const;
  inline void clear_course_type();
  static const int kCourseTypeFieldNumber = 10;
  inline ::CourseType course_type() const;
  inline void set_course_type(::CourseType value);

  // optional string xml_path = 11;
  inline bool has_xml_path() const;
  inline void clear_xml_path();
  static const int kXmlPathFieldNumber = 11;
  inline const ::std::string& xml_path() const;
  inline void set_xml_path(const ::std::string& value);
  inline void set_xml_path(const char* value);
  inline void set_xml_path(const char* value, size_t size);
  inline ::std::string* mutable_xml_path();
  inline ::std::string* release_xml_path();
  inline void set_allocated_xml_path(::std::string* xml_path);

  // required int32 fac = 12;
  inline bool has_fac() const;
  inline void clear_fac();
  static const int kFacFieldNumber = 12;
  inline ::google::protobuf::int32 fac() const;
  inline void set_fac(::google::protobuf::int32 value);

  // required int32 puzzle = 13;
  inline bool has_puzzle() const;
  inline void clear_puzzle();
  static const int kPuzzleFieldNumber = 13;
  inline ::google::protobuf::int32 puzzle() const;
  inline void set_puzzle(::google::protobuf::int32 value);

  // required int32 fream = 14;
  inline bool has_fream() const;
  inline void clear_fream();
  static const int kFreamFieldNumber = 14;
  inline ::google::protobuf::int32 fream() const;
  inline void set_fream(::google::protobuf::int32 value);

  // required int32 voice = 15;
  inline bool has_voice() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 15;
  inline ::google::protobuf::int32 voice() const;
  inline void set_voice(::google::protobuf::int32 value);

  // required int32 world = 16;
  inline bool has_world() const;
  inline void clear_world();
  static const int kWorldFieldNumber = 16;
  inline ::google::protobuf::int32 world() const;
  inline void set_world(::google::protobuf::int32 value);

  // required string icon_path = 17;
  inline bool has_icon_path() const;
  inline void clear_icon_path();
  static const int kIconPathFieldNumber = 17;
  inline const ::std::string& icon_path() const;
  inline void set_icon_path(const ::std::string& value);
  inline void set_icon_path(const char* value);
  inline void set_icon_path(const char* value, size_t size);
  inline ::std::string* mutable_icon_path();
  inline ::std::string* release_icon_path();
  inline void set_allocated_icon_path(::std::string* icon_path);

  // @@protoc_insertion_point(class_scope:CourseNode)
 private:
  inline void set_has_course_id();
  inline void clear_has_course_id();
  inline void set_has_course_name();
  inline void clear_has_course_name();
  inline void set_has_grade_id();
  inline void clear_has_grade_id();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_art();
  inline void clear_has_art();
  inline void set_has_community();
  inline void clear_has_community();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_science();
  inline void clear_has_science();
  inline void set_has_res_path();
  inline void clear_has_res_path();
  inline void set_has_course_type();
  inline void clear_has_course_type();
  inline void set_has_xml_path();
  inline void clear_has_xml_path();
  inline void set_has_fac();
  inline void clear_has_fac();
  inline void set_has_puzzle();
  inline void clear_has_puzzle();
  inline void set_has_fream();
  inline void clear_has_fream();
  inline void set_has_voice();
  inline void clear_has_voice();
  inline void set_has_world();
  inline void clear_has_world();
  inline void set_has_icon_path();
  inline void clear_has_icon_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* course_name_;
  ::google::protobuf::int32 course_id_;
  ::google::protobuf::int32 grade_id_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 art_;
  ::google::protobuf::int32 community_;
  ::google::protobuf::int32 health_;
  ::std::string* res_path_;
  ::google::protobuf::int32 science_;
  int course_type_;
  ::std::string* xml_path_;
  ::google::protobuf::int32 fac_;
  ::google::protobuf::int32 puzzle_;
  ::google::protobuf::int32 fream_;
  ::google::protobuf::int32 voice_;
  ::std::string* icon_path_;
  ::google::protobuf::int32 world_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static CourseNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetCourseList : public ::google::protobuf::Message {
 public:
  sGetCourseList();
  virtual ~sGetCourseList();

  sGetCourseList(const sGetCourseList& from);

  inline sGetCourseList& operator=(const sGetCourseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetCourseList& default_instance();

  void Swap(sGetCourseList* other);

  // implements Message ----------------------------------------------

  sGetCourseList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetCourseList& from);
  void MergeFrom(const sGetCourseList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CourseNode course_list = 1;
  inline int course_list_size() const;
  inline void clear_course_list();
  static const int kCourseListFieldNumber = 1;
  inline const ::CourseNode& course_list(int index) const;
  inline ::CourseNode* mutable_course_list(int index);
  inline ::CourseNode* add_course_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CourseNode >&
      course_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CourseNode >*
      mutable_course_list();

  // @@protoc_insertion_point(class_scope:sGetCourseList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CourseNode > course_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetCourseList* default_instance_;
};
// -------------------------------------------------------------------

class cGetContent : public ::google::protobuf::Message {
 public:
  cGetContent();
  virtual ~cGetContent();

  cGetContent(const cGetContent& from);

  inline cGetContent& operator=(const cGetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetContent& default_instance();

  void Swap(cGetContent* other);

  // implements Message ----------------------------------------------

  cGetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetContent& from);
  void MergeFrom(const cGetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetContent)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetContent* default_instance_;
};
// -------------------------------------------------------------------

class sGetContent : public ::google::protobuf::Message {
 public:
  sGetContent();
  virtual ~sGetContent();

  sGetContent(const sGetContent& from);

  inline sGetContent& operator=(const sGetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetContent& default_instance();

  void Swap(sGetContent* other);

  // implements Message ----------------------------------------------

  sGetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetContent& from);
  void MergeFrom(const sGetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required int32 classroom_id = 2;
  inline bool has_classroom_id() const;
  inline void clear_classroom_id();
  static const int kClassroomIdFieldNumber = 2;
  inline ::google::protobuf::int32 classroom_id() const;
  inline void set_classroom_id(::google::protobuf::int32 value);

  // repeated .ContentNode course_list = 3;
  inline int course_list_size() const;
  inline void clear_course_list();
  static const int kCourseListFieldNumber = 3;
  inline const ::ContentNode& course_list(int index) const;
  inline ::ContentNode* mutable_course_list(int index);
  inline ::ContentNode* add_course_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ContentNode >&
      course_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContentNode >*
      mutable_course_list();

  // @@protoc_insertion_point(class_scope:sGetContent)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_classroom_id();
  inline void clear_has_classroom_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;
  ::google::protobuf::int32 classroom_id_;
  ::google::protobuf::RepeatedPtrField< ::ContentNode > course_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetContent* default_instance_;
};
// -------------------------------------------------------------------

class cGetClassList : public ::google::protobuf::Message {
 public:
  cGetClassList();
  virtual ~cGetClassList();

  cGetClassList(const cGetClassList& from);

  inline cGetClassList& operator=(const cGetClassList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetClassList& default_instance();

  void Swap(cGetClassList* other);

  // implements Message ----------------------------------------------

  cGetClassList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetClassList& from);
  void MergeFrom(const cGetClassList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grade_id = 1;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 1;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetClassList)
 private:
  inline void set_has_grade_id();
  inline void clear_has_grade_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetClassList* default_instance_;
};
// -------------------------------------------------------------------

class ClassListNode : public ::google::protobuf::Message {
 public:
  ClassListNode();
  virtual ~ClassListNode();

  ClassListNode(const ClassListNode& from);

  inline ClassListNode& operator=(const ClassListNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassListNode& default_instance();

  void Swap(ClassListNode* other);

  // implements Message ----------------------------------------------

  ClassListNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassListNode& from);
  void MergeFrom(const ClassListNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string res_path = 3;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 3;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:ClassListNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ClassListNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassList : public ::google::protobuf::Message {
 public:
  sGetClassList();
  virtual ~sGetClassList();

  sGetClassList(const sGetClassList& from);

  inline sGetClassList& operator=(const sGetClassList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassList& default_instance();

  void Swap(sGetClassList* other);

  // implements Message ----------------------------------------------

  sGetClassList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassList& from);
  void MergeFrom(const sGetClassList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ClassListNode class_list = 1;
  inline int class_list_size() const;
  inline void clear_class_list();
  static const int kClassListFieldNumber = 1;
  inline const ::ClassListNode& class_list(int index) const;
  inline ::ClassListNode* mutable_class_list(int index);
  inline ::ClassListNode* add_class_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
      class_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
      mutable_class_list();

  // @@protoc_insertion_point(class_scope:sGetClassList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ClassListNode > class_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassList* default_instance_;
};
// -------------------------------------------------------------------

class cGetClassRoomList : public ::google::protobuf::Message {
 public:
  cGetClassRoomList();
  virtual ~cGetClassRoomList();

  cGetClassRoomList(const cGetClassRoomList& from);

  inline cGetClassRoomList& operator=(const cGetClassRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetClassRoomList& default_instance();

  void Swap(cGetClassRoomList* other);

  // implements Message ----------------------------------------------

  cGetClassRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetClassRoomList& from);
  void MergeFrom(const cGetClassRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetClassRoomList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetClassRoomList* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassRoomList : public ::google::protobuf::Message {
 public:
  sGetClassRoomList();
  virtual ~sGetClassRoomList();

  sGetClassRoomList(const sGetClassRoomList& from);

  inline sGetClassRoomList& operator=(const sGetClassRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassRoomList& default_instance();

  void Swap(sGetClassRoomList* other);

  // implements Message ----------------------------------------------

  sGetClassRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassRoomList& from);
  void MergeFrom(const sGetClassRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ClassListNode classroom_list = 1;
  inline int classroom_list_size() const;
  inline void clear_classroom_list();
  static const int kClassroomListFieldNumber = 1;
  inline const ::ClassListNode& classroom_list(int index) const;
  inline ::ClassListNode* mutable_classroom_list(int index);
  inline ::ClassListNode* add_classroom_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
      classroom_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
      mutable_classroom_list();

  // @@protoc_insertion_point(class_scope:sGetClassRoomList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ClassListNode > classroom_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassRoomList* default_instance_;
};
// -------------------------------------------------------------------

class ContentNode : public ::google::protobuf::Message {
 public:
  ContentNode();
  virtual ~ContentNode();

  ContentNode(const ContentNode& from);

  inline ContentNode& operator=(const ContentNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentNode& default_instance();

  void Swap(ContentNode* other);

  // implements Message ----------------------------------------------

  ContentNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentNode& from);
  void MergeFrom(const ContentNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // optional string course_xml = 2;
  inline bool has_course_xml() const;
  inline void clear_course_xml();
  static const int kCourseXmlFieldNumber = 2;
  inline const ::std::string& course_xml() const;
  inline void set_course_xml(const ::std::string& value);
  inline void set_course_xml(const char* value);
  inline void set_course_xml(const char* value, size_t size);
  inline ::std::string* mutable_course_xml();
  inline ::std::string* release_course_xml();
  inline void set_allocated_course_xml(::std::string* course_xml);

  // required int32 art = 3;
  inline bool has_art() const;
  inline void clear_art();
  static const int kArtFieldNumber = 3;
  inline ::google::protobuf::int32 art() const;
  inline void set_art(::google::protobuf::int32 value);

  // required int32 language = 4;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 4;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);

  // required int32 community = 5;
  inline bool has_community() const;
  inline void clear_community();
  static const int kCommunityFieldNumber = 5;
  inline ::google::protobuf::int32 community() const;
  inline void set_community(::google::protobuf::int32 value);

  // required int32 health = 6;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 6;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required int32 science = 7;
  inline bool has_science() const;
  inline void clear_science();
  static const int kScienceFieldNumber = 7;
  inline ::google::protobuf::int32 science() const;
  inline void set_science(::google::protobuf::int32 value);

  // required string res_path = 8;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 8;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // required string course_name = 9;
  inline bool has_course_name() const;
  inline void clear_course_name();
  static const int kCourseNameFieldNumber = 9;
  inline const ::std::string& course_name() const;
  inline void set_course_name(const ::std::string& value);
  inline void set_course_name(const char* value);
  inline void set_course_name(const char* value, size_t size);
  inline ::std::string* mutable_course_name();
  inline ::std::string* release_course_name();
  inline void set_allocated_course_name(::std::string* course_name);

  // required int32 course_type = 10;
  inline bool has_course_type() const;
  inline void clear_course_type();
  static const int kCourseTypeFieldNumber = 10;
  inline ::google::protobuf::int32 course_type() const;
  inline void set_course_type(::google::protobuf::int32 value);

  // optional string icon_path = 11;
  inline bool has_icon_path() const;
  inline void clear_icon_path();
  static const int kIconPathFieldNumber = 11;
  inline const ::std::string& icon_path() const;
  inline void set_icon_path(const ::std::string& value);
  inline void set_icon_path(const char* value);
  inline void set_icon_path(const char* value, size_t size);
  inline ::std::string* mutable_icon_path();
  inline ::std::string* release_icon_path();
  inline void set_allocated_icon_path(::std::string* icon_path);

  // @@protoc_insertion_point(class_scope:ContentNode)
 private:
  inline void set_has_course_id();
  inline void clear_has_course_id();
  inline void set_has_course_xml();
  inline void clear_has_course_xml();
  inline void set_has_art();
  inline void clear_has_art();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_community();
  inline void clear_has_community();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_science();
  inline void clear_has_science();
  inline void set_has_res_path();
  inline void clear_has_res_path();
  inline void set_has_course_name();
  inline void clear_has_course_name();
  inline void set_has_course_type();
  inline void clear_has_course_type();
  inline void set_has_icon_path();
  inline void clear_has_icon_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* course_xml_;
  ::google::protobuf::int32 course_id_;
  ::google::protobuf::int32 art_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 community_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 science_;
  ::std::string* res_path_;
  ::std::string* course_name_;
  ::std::string* icon_path_;
  ::google::protobuf::int32 course_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ContentNode* default_instance_;
};
// -------------------------------------------------------------------

class cSetContent : public ::google::protobuf::Message {
 public:
  cSetContent();
  virtual ~cSetContent();

  cSetContent(const cSetContent& from);

  inline cSetContent& operator=(const cSetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSetContent& default_instance();

  void Swap(cSetContent* other);

  // implements Message ----------------------------------------------

  cSetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSetContent& from);
  void MergeFrom(const cSetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required int32 classroom_id = 2;
  inline bool has_classroom_id() const;
  inline void clear_classroom_id();
  static const int kClassroomIdFieldNumber = 2;
  inline ::google::protobuf::int32 classroom_id() const;
  inline void set_classroom_id(::google::protobuf::int32 value);

  // repeated .ContentNode course_list = 3;
  inline int course_list_size() const;
  inline void clear_course_list();
  static const int kCourseListFieldNumber = 3;
  inline const ::ContentNode& course_list(int index) const;
  inline ::ContentNode* mutable_course_list(int index);
  inline ::ContentNode* add_course_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ContentNode >&
      course_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContentNode >*
      mutable_course_list();

  // optional int32 grade_id = 4;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 4;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cSetContent)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_classroom_id();
  inline void clear_has_classroom_id();
  inline void set_has_grade_id();
  inline void clear_has_grade_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;
  ::google::protobuf::int32 classroom_id_;
  ::google::protobuf::RepeatedPtrField< ::ContentNode > course_list_;
  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSetContent* default_instance_;
};
// -------------------------------------------------------------------

class sSetContent : public ::google::protobuf::Message {
 public:
  sSetContent();
  virtual ~sSetContent();

  sSetContent(const sSetContent& from);

  inline sSetContent& operator=(const sSetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sSetContent& default_instance();

  void Swap(sSetContent* other);

  // implements Message ----------------------------------------------

  sSetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sSetContent& from);
  void MergeFrom(const sSetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sSetContent)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sSetContent* default_instance_;
};
// -------------------------------------------------------------------

class CoursewareStatusNode : public ::google::protobuf::Message {
 public:
  CoursewareStatusNode();
  virtual ~CoursewareStatusNode();

  CoursewareStatusNode(const CoursewareStatusNode& from);

  inline CoursewareStatusNode& operator=(const CoursewareStatusNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoursewareStatusNode& default_instance();

  void Swap(CoursewareStatusNode* other);

  // implements Message ----------------------------------------------

  CoursewareStatusNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoursewareStatusNode& from);
  void MergeFrom(const CoursewareStatusNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // optional int32 idx = 3;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 3;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // required .courseware_status cs = 2 [default = CS_INVALID];
  inline bool has_cs() const;
  inline void clear_cs();
  static const int kCsFieldNumber = 2;
  inline ::courseware_status cs() const;
  inline void set_cs(::courseware_status value);

  // @@protoc_insertion_point(class_scope:CoursewareStatusNode)
 private:
  inline void set_has_course_id();
  inline void clear_has_course_id();
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cs();
  inline void clear_has_cs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 course_id_;
  ::google::protobuf::int32 idx_;
  int cs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static CoursewareStatusNode* default_instance_;
};
// -------------------------------------------------------------------

class sCourseware : public ::google::protobuf::Message {
 public:
  sCourseware();
  virtual ~sCourseware();

  sCourseware(const sCourseware& from);

  inline sCourseware& operator=(const sCourseware& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sCourseware& default_instance();

  void Swap(sCourseware* other);

  // implements Message ----------------------------------------------

  sCourseware* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sCourseware& from);
  void MergeFrom(const sCourseware& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 idx = 3;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 3;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // required int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // required .courseware_status cs = 2 [default = CS_INVALID];
  inline bool has_cs() const;
  inline void clear_cs();
  static const int kCsFieldNumber = 2;
  inline ::courseware_status cs() const;
  inline void set_cs(::courseware_status value);

  // optional string course_name = 4;
  inline bool has_course_name() const;
  inline void clear_course_name();
  static const int kCourseNameFieldNumber = 4;
  inline const ::std::string& course_name() const;
  inline void set_course_name(const ::std::string& value);
  inline void set_course_name(const char* value);
  inline void set_course_name(const char* value, size_t size);
  inline ::std::string* mutable_course_name();
  inline ::std::string* release_course_name();
  inline void set_allocated_course_name(::std::string* course_name);

  // @@protoc_insertion_point(class_scope:sCourseware)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_course_id();
  inline void clear_has_course_id();
  inline void set_has_cs();
  inline void clear_has_cs();
  inline void set_has_course_name();
  inline void clear_has_course_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 idx_;
  ::google::protobuf::int32 course_id_;
  ::std::string* course_name_;
  int cs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sCourseware* default_instance_;
};
// -------------------------------------------------------------------

class UpdateCourseware : public ::google::protobuf::Message {
 public:
  UpdateCourseware();
  virtual ~UpdateCourseware();

  UpdateCourseware(const UpdateCourseware& from);

  inline UpdateCourseware& operator=(const UpdateCourseware& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateCourseware& default_instance();

  void Swap(UpdateCourseware* other);

  // implements Message ----------------------------------------------

  UpdateCourseware* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateCourseware& from);
  void MergeFrom(const UpdateCourseware& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // optional int32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UpdateCourseware)
 private:
  inline void set_has_course_id();
  inline void clear_has_course_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 course_id_;
  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static UpdateCourseware* default_instance_;
};
// -------------------------------------------------------------------

class cCourseOver : public ::google::protobuf::Message {
 public:
  cCourseOver();
  virtual ~cCourseOver();

  cCourseOver(const cCourseOver& from);

  inline cCourseOver& operator=(const cCourseOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cCourseOver& default_instance();

  void Swap(cCourseOver* other);

  // implements Message ----------------------------------------------

  cCourseOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cCourseOver& from);
  void MergeFrom(const cCourseOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cCourseOver)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cCourseOver* default_instance_;
};
// -------------------------------------------------------------------

class sGetCoursewareListStatus : public ::google::protobuf::Message {
 public:
  sGetCoursewareListStatus();
  virtual ~sGetCoursewareListStatus();

  sGetCoursewareListStatus(const sGetCoursewareListStatus& from);

  inline sGetCoursewareListStatus& operator=(const sGetCoursewareListStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetCoursewareListStatus& default_instance();

  void Swap(sGetCoursewareListStatus* other);

  // implements Message ----------------------------------------------

  sGetCoursewareListStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetCoursewareListStatus& from);
  void MergeFrom(const sGetCoursewareListStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CoursewareStatusNode course_status_list = 1;
  inline int course_status_list_size() const;
  inline void clear_course_status_list();
  static const int kCourseStatusListFieldNumber = 1;
  inline const ::CoursewareStatusNode& course_status_list(int index) const;
  inline ::CoursewareStatusNode* mutable_course_status_list(int index);
  inline ::CoursewareStatusNode* add_course_status_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CoursewareStatusNode >&
      course_status_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CoursewareStatusNode >*
      mutable_course_status_list();

  // @@protoc_insertion_point(class_scope:sGetCoursewareListStatus)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CoursewareStatusNode > course_status_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetCoursewareListStatus* default_instance_;
};
// -------------------------------------------------------------------

class cGetClassInfo : public ::google::protobuf::Message {
 public:
  cGetClassInfo();
  virtual ~cGetClassInfo();

  cGetClassInfo(const cGetClassInfo& from);

  inline cGetClassInfo& operator=(const cGetClassInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetClassInfo& default_instance();

  void Swap(cGetClassInfo* other);

  // implements Message ----------------------------------------------

  cGetClassInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetClassInfo& from);
  void MergeFrom(const cGetClassInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetClassInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetClassInfo* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassInfo : public ::google::protobuf::Message {
 public:
  sGetClassInfo();
  virtual ~sGetClassInfo();

  sGetClassInfo(const sGetClassInfo& from);

  inline sGetClassInfo& operator=(const sGetClassInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassInfo& default_instance();

  void Swap(sGetClassInfo* other);

  // implements Message ----------------------------------------------

  sGetClassInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassInfo& from);
  void MergeFrom(const sGetClassInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sGetClassInfo)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassInfo* default_instance_;
};
// -------------------------------------------------------------------

class cGetWhiteboardInfo : public ::google::protobuf::Message {
 public:
  cGetWhiteboardInfo();
  virtual ~cGetWhiteboardInfo();

  cGetWhiteboardInfo(const cGetWhiteboardInfo& from);

  inline cGetWhiteboardInfo& operator=(const cGetWhiteboardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetWhiteboardInfo& default_instance();

  void Swap(cGetWhiteboardInfo* other);

  // implements Message ----------------------------------------------

  cGetWhiteboardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetWhiteboardInfo& from);
  void MergeFrom(const cGetWhiteboardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetWhiteboardInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetWhiteboardInfo* default_instance_;
};
// -------------------------------------------------------------------

class sGetWhiteboardInfo : public ::google::protobuf::Message {
 public:
  sGetWhiteboardInfo();
  virtual ~sGetWhiteboardInfo();

  sGetWhiteboardInfo(const sGetWhiteboardInfo& from);

  inline sGetWhiteboardInfo& operator=(const sGetWhiteboardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetWhiteboardInfo& default_instance();

  void Swap(sGetWhiteboardInfo* other);

  // implements Message ----------------------------------------------

  sGetWhiteboardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetWhiteboardInfo& from);
  void MergeFrom(const sGetWhiteboardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string whiteboard_num_ = 1;
  inline bool has_whiteboard_num_() const;
  inline void clear_whiteboard_num_();
  static const int kWhiteboardNumFieldNumber = 1;
  inline const ::std::string& whiteboard_num_() const;
  inline void set_whiteboard_num_(const ::std::string& value);
  inline void set_whiteboard_num_(const char* value);
  inline void set_whiteboard_num_(const char* value, size_t size);
  inline ::std::string* mutable_whiteboard_num_();
  inline ::std::string* release_whiteboard_num_();
  inline void set_allocated_whiteboard_num_(::std::string* whiteboard_num_);

  // required string classroom_name_ = 2;
  inline bool has_classroom_name_() const;
  inline void clear_classroom_name_();
  static const int kClassroomNameFieldNumber = 2;
  inline const ::std::string& classroom_name_() const;
  inline void set_classroom_name_(const ::std::string& value);
  inline void set_classroom_name_(const char* value);
  inline void set_classroom_name_(const char* value, size_t size);
  inline ::std::string* mutable_classroom_name_();
  inline ::std::string* release_classroom_name_();
  inline void set_allocated_classroom_name_(::std::string* classroom_name_);

  // required int32 classroom_id_ = 3;
  inline bool has_classroom_id_() const;
  inline void clear_classroom_id_();
  static const int kClassroomIdFieldNumber = 3;
  inline ::google::protobuf::int32 classroom_id_() const;
  inline void set_classroom_id_(::google::protobuf::int32 value);

  // required .FuncType functype_ = 4 [default = FT_INVALID];
  inline bool has_functype_() const;
  inline void clear_functype_();
  static const int kFunctypeFieldNumber = 4;
  inline ::FuncType functype_() const;
  inline void set_functype_(::FuncType value);

  // required int32 id_ = 5;
  inline bool has_id_() const;
  inline void clear_id_();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id_() const;
  inline void set_id_(::google::protobuf::int32 value);

  // required int32 fd_ = 6;
  inline bool has_fd_() const;
  inline void clear_fd_();
  static const int kFdFieldNumber = 6;
  inline ::google::protobuf::int32 fd_() const;
  inline void set_fd_(::google::protobuf::int32 value);

  // required .user_status userstatus_ = 7 [default = US_INVALID];
  inline bool has_userstatus_() const;
  inline void clear_userstatus_();
  static const int kUserstatusFieldNumber = 7;
  inline ::user_status userstatus_() const;
  inline void set_userstatus_(::user_status value);

  // required string account_ = 8;
  inline bool has_account_() const;
  inline void clear_account_();
  static const int kAccountFieldNumber = 8;
  inline const ::std::string& account_() const;
  inline void set_account_(const ::std::string& value);
  inline void set_account_(const char* value);
  inline void set_account_(const char* value, size_t size);
  inline ::std::string* mutable_account_();
  inline ::std::string* release_account_();
  inline void set_allocated_account_(::std::string* account_);

  // required string passwd_ = 9;
  inline bool has_passwd_() const;
  inline void clear_passwd_();
  static const int kPasswdFieldNumber = 9;
  inline const ::std::string& passwd_() const;
  inline void set_passwd_(const ::std::string& value);
  inline void set_passwd_(const char* value);
  inline void set_passwd_(const char* value, size_t size);
  inline ::std::string* mutable_passwd_();
  inline ::std::string* release_passwd_();
  inline void set_allocated_passwd_(::std::string* passwd_);

  // @@protoc_insertion_point(class_scope:sGetWhiteboardInfo)
 private:
  inline void set_has_whiteboard_num_();
  inline void clear_has_whiteboard_num_();
  inline void set_has_classroom_name_();
  inline void clear_has_classroom_name_();
  inline void set_has_classroom_id_();
  inline void clear_has_classroom_id_();
  inline void set_has_functype_();
  inline void clear_has_functype_();
  inline void set_has_id_();
  inline void clear_has_id_();
  inline void set_has_fd_();
  inline void clear_has_fd_();
  inline void set_has_userstatus_();
  inline void clear_has_userstatus_();
  inline void set_has_account_();
  inline void clear_has_account_();
  inline void set_has_passwd_();
  inline void clear_has_passwd_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* whiteboard_num__;
  ::std::string* classroom_name__;
  ::google::protobuf::int32 classroom_id__;
  int functype__;
  ::google::protobuf::int32 id__;
  ::google::protobuf::int32 fd__;
  ::std::string* account__;
  ::std::string* passwd__;
  int userstatus__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetWhiteboardInfo* default_instance_;
};
// -------------------------------------------------------------------

class cDisplay : public ::google::protobuf::Message {
 public:
  cDisplay();
  virtual ~cDisplay();

  cDisplay(const cDisplay& from);

  inline cDisplay& operator=(const cDisplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cDisplay& default_instance();

  void Swap(cDisplay* other);

  // implements Message ----------------------------------------------

  cDisplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cDisplay& from);
  void MergeFrom(const cDisplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // required string course_name = 2;
  inline bool has_course_name() const;
  inline void clear_course_name();
  static const int kCourseNameFieldNumber = 2;
  inline const ::std::string& course_name() const;
  inline void set_course_name(const ::std::string& value);
  inline void set_course_name(const char* value);
  inline void set_course_name(const char* value, size_t size);
  inline ::std::string* mutable_course_name();
  inline ::std::string* release_course_name();
  inline void set_allocated_course_name(::std::string* course_name);

  // @@protoc_insertion_point(class_scope:cDisplay)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_course_name();
  inline void clear_has_course_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* course_name_;
  ::google::protobuf::int32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cDisplay* default_instance_;
};
// -------------------------------------------------------------------

class sDisplay : public ::google::protobuf::Message {
 public:
  sDisplay();
  virtual ~sDisplay();

  sDisplay(const sDisplay& from);

  inline sDisplay& operator=(const sDisplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sDisplay& default_instance();

  void Swap(sDisplay* other);

  // implements Message ----------------------------------------------

  sDisplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sDisplay& from);
  void MergeFrom(const sDisplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // required string course_name = 2;
  inline bool has_course_name() const;
  inline void clear_course_name();
  static const int kCourseNameFieldNumber = 2;
  inline const ::std::string& course_name() const;
  inline void set_course_name(const ::std::string& value);
  inline void set_course_name(const char* value);
  inline void set_course_name(const char* value, size_t size);
  inline ::std::string* mutable_course_name();
  inline ::std::string* release_course_name();
  inline void set_allocated_course_name(::std::string* course_name);

  // @@protoc_insertion_point(class_scope:sDisplay)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_course_name();
  inline void clear_has_course_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* course_name_;
  ::google::protobuf::int32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sDisplay* default_instance_;
};
// -------------------------------------------------------------------

class cEnlarge : public ::google::protobuf::Message {
 public:
  cEnlarge();
  virtual ~cEnlarge();

  cEnlarge(const cEnlarge& from);

  inline cEnlarge& operator=(const cEnlarge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cEnlarge& default_instance();

  void Swap(cEnlarge* other);

  // implements Message ----------------------------------------------

  cEnlarge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cEnlarge& from);
  void MergeFrom(const cEnlarge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cEnlarge)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cEnlarge* default_instance_;
};
// -------------------------------------------------------------------

class cReduce : public ::google::protobuf::Message {
 public:
  cReduce();
  virtual ~cReduce();

  cReduce(const cReduce& from);

  inline cReduce& operator=(const cReduce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cReduce& default_instance();

  void Swap(cReduce* other);

  // implements Message ----------------------------------------------

  cReduce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cReduce& from);
  void MergeFrom(const cReduce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cReduce)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cReduce* default_instance_;
};
// -------------------------------------------------------------------

class cClassOver : public ::google::protobuf::Message {
 public:
  cClassOver();
  virtual ~cClassOver();

  cClassOver(const cClassOver& from);

  inline cClassOver& operator=(const cClassOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cClassOver& default_instance();

  void Swap(cClassOver* other);

  // implements Message ----------------------------------------------

  cClassOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cClassOver& from);
  void MergeFrom(const cClassOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cClassOver)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cClassOver* default_instance_;
};
// -------------------------------------------------------------------

class sClassOver : public ::google::protobuf::Message {
 public:
  sClassOver();
  virtual ~sClassOver();

  sClassOver(const sClassOver& from);

  inline sClassOver& operator=(const sClassOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sClassOver& default_instance();

  void Swap(sClassOver* other);

  // implements Message ----------------------------------------------

  sClassOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sClassOver& from);
  void MergeFrom(const sClassOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sClassOver)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sClassOver* default_instance_;
};
// -------------------------------------------------------------------

class cLeaveEarly : public ::google::protobuf::Message {
 public:
  cLeaveEarly();
  virtual ~cLeaveEarly();

  cLeaveEarly(const cLeaveEarly& from);

  inline cLeaveEarly& operator=(const cLeaveEarly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cLeaveEarly& default_instance();

  void Swap(cLeaveEarly* other);

  // implements Message ----------------------------------------------

  cLeaveEarly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cLeaveEarly& from);
  void MergeFrom(const cLeaveEarly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cLeaveEarly)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cLeaveEarly* default_instance_;
};
// -------------------------------------------------------------------

class cGetStudentList : public ::google::protobuf::Message {
 public:
  cGetStudentList();
  virtual ~cGetStudentList();

  cGetStudentList(const cGetStudentList& from);

  inline cGetStudentList& operator=(const cGetStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetStudentList& default_instance();

  void Swap(cGetStudentList* other);

  // implements Message ----------------------------------------------

  cGetStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetStudentList& from);
  void MergeFrom(const cGetStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetStudentList)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetStudentList* default_instance_;
};
// -------------------------------------------------------------------

class StudentListNode : public ::google::protobuf::Message {
 public:
  StudentListNode();
  virtual ~StudentListNode();

  StudentListNode(const StudentListNode& from);

  inline StudentListNode& operator=(const StudentListNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StudentListNode& default_instance();

  void Swap(StudentListNode* other);

  // implements Message ----------------------------------------------

  StudentListNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StudentListNode& from);
  void MergeFrom(const StudentListNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string res_path = 3;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 3;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:StudentListNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static StudentListNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetStudentList : public ::google::protobuf::Message {
 public:
  sGetStudentList();
  virtual ~sGetStudentList();

  sGetStudentList(const sGetStudentList& from);

  inline sGetStudentList& operator=(const sGetStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetStudentList& default_instance();

  void Swap(sGetStudentList* other);

  // implements Message ----------------------------------------------

  sGetStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetStudentList& from);
  void MergeFrom(const sGetStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StudentListNode student_list = 1;
  inline int student_list_size() const;
  inline void clear_student_list();
  static const int kStudentListFieldNumber = 1;
  inline const ::StudentListNode& student_list(int index) const;
  inline ::StudentListNode* mutable_student_list(int index);
  inline ::StudentListNode* add_student_list();
  inline const ::google::protobuf::RepeatedPtrField< ::StudentListNode >&
      student_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::StudentListNode >*
      mutable_student_list();

  // @@protoc_insertion_point(class_scope:sGetStudentList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::StudentListNode > student_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetStudentList* default_instance_;
};
// -------------------------------------------------------------------

class cGetActiveStudentList : public ::google::protobuf::Message {
 public:
  cGetActiveStudentList();
  virtual ~cGetActiveStudentList();

  cGetActiveStudentList(const cGetActiveStudentList& from);

  inline cGetActiveStudentList& operator=(const cGetActiveStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetActiveStudentList& default_instance();

  void Swap(cGetActiveStudentList* other);

  // implements Message ----------------------------------------------

  cGetActiveStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetActiveStudentList& from);
  void MergeFrom(const cGetActiveStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetActiveStudentList)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetActiveStudentList* default_instance_;
};
// -------------------------------------------------------------------

class sGetActiveStudentList : public ::google::protobuf::Message {
 public:
  sGetActiveStudentList();
  virtual ~sGetActiveStudentList();

  sGetActiveStudentList(const sGetActiveStudentList& from);

  inline sGetActiveStudentList& operator=(const sGetActiveStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetActiveStudentList& default_instance();

  void Swap(sGetActiveStudentList* other);

  // implements Message ----------------------------------------------

  sGetActiveStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetActiveStudentList& from);
  void MergeFrom(const sGetActiveStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 student_list = 1;
  inline int student_list_size() const;
  inline void clear_student_list();
  static const int kStudentListFieldNumber = 1;
  inline ::google::protobuf::int32 student_list(int index) const;
  inline void set_student_list(int index, ::google::protobuf::int32 value);
  inline void add_student_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      student_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_student_list();

  // @@protoc_insertion_point(class_scope:sGetActiveStudentList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > student_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetActiveStudentList* default_instance_;
};
// -------------------------------------------------------------------

class cGetGroupStudentList : public ::google::protobuf::Message {
 public:
  cGetGroupStudentList();
  virtual ~cGetGroupStudentList();

  cGetGroupStudentList(const cGetGroupStudentList& from);

  inline cGetGroupStudentList& operator=(const cGetGroupStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetGroupStudentList& default_instance();

  void Swap(cGetGroupStudentList* other);

  // implements Message ----------------------------------------------

  cGetGroupStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetGroupStudentList& from);
  void MergeFrom(const cGetGroupStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetGroupStudentList)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetGroupStudentList* default_instance_;
};
// -------------------------------------------------------------------

class sGetGroupStudentList : public ::google::protobuf::Message {
 public:
  sGetGroupStudentList();
  virtual ~sGetGroupStudentList();

  sGetGroupStudentList(const sGetGroupStudentList& from);

  inline sGetGroupStudentList& operator=(const sGetGroupStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetGroupStudentList& default_instance();

  void Swap(sGetGroupStudentList* other);

  // implements Message ----------------------------------------------

  sGetGroupStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetGroupStudentList& from);
  void MergeFrom(const sGetGroupStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // repeated int32 student_list = 1;
  inline int student_list_size() const;
  inline void clear_student_list();
  static const int kStudentListFieldNumber = 1;
  inline ::google::protobuf::int32 student_list(int index) const;
  inline void set_student_list(int index, ::google::protobuf::int32 value);
  inline void add_student_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      student_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_student_list();

  // @@protoc_insertion_point(class_scope:sGetGroupStudentList)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > student_list_;
  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetGroupStudentList* default_instance_;
};
// -------------------------------------------------------------------

class cGetGroupList : public ::google::protobuf::Message {
 public:
  cGetGroupList();
  virtual ~cGetGroupList();

  cGetGroupList(const cGetGroupList& from);

  inline cGetGroupList& operator=(const cGetGroupList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetGroupList& default_instance();

  void Swap(cGetGroupList* other);

  // implements Message ----------------------------------------------

  cGetGroupList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetGroupList& from);
  void MergeFrom(const cGetGroupList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetGroupList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetGroupList* default_instance_;
};
// -------------------------------------------------------------------

class sGetGroupList : public ::google::protobuf::Message {
 public:
  sGetGroupList();
  virtual ~sGetGroupList();

  sGetGroupList(const sGetGroupList& from);

  inline sGetGroupList& operator=(const sGetGroupList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetGroupList& default_instance();

  void Swap(sGetGroupList* other);

  // implements Message ----------------------------------------------

  sGetGroupList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetGroupList& from);
  void MergeFrom(const sGetGroupList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 group_list = 1;
  inline int group_list_size() const;
  inline void clear_group_list();
  static const int kGroupListFieldNumber = 1;
  inline ::google::protobuf::int32 group_list(int index) const;
  inline void set_group_list(int index, ::google::protobuf::int32 value);
  inline void add_group_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      group_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_group_list();

  // @@protoc_insertion_point(class_scope:sGetGroupList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > group_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetGroupList* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateStudentStatus : public ::google::protobuf::Message {
 public:
  sUpdateStudentStatus();
  virtual ~sUpdateStudentStatus();

  sUpdateStudentStatus(const sUpdateStudentStatus& from);

  inline sUpdateStudentStatus& operator=(const sUpdateStudentStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateStudentStatus& default_instance();

  void Swap(sUpdateStudentStatus* other);

  // implements Message ----------------------------------------------

  sUpdateStudentStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateStudentStatus& from);
  void MergeFrom(const sUpdateStudentStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required .user_status us = 2 [default = US_INVALID];
  inline bool has_us() const;
  inline void clear_us();
  static const int kUsFieldNumber = 2;
  inline ::user_status us() const;
  inline void set_us(::user_status value);

  // required int32 login_type = 3;
  inline bool has_login_type() const;
  inline void clear_login_type();
  static const int kLoginTypeFieldNumber = 3;
  inline ::google::protobuf::int32 login_type() const;
  inline void set_login_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateStudentStatus)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_us();
  inline void clear_has_us();
  inline void set_has_login_type();
  inline void clear_has_login_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  int us_;
  ::google::protobuf::int32 login_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateStudentStatus* default_instance_;
};
// -------------------------------------------------------------------

class cGetStudentInfo : public ::google::protobuf::Message {
 public:
  cGetStudentInfo();
  virtual ~cGetStudentInfo();

  cGetStudentInfo(const cGetStudentInfo& from);

  inline cGetStudentInfo& operator=(const cGetStudentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetStudentInfo& default_instance();

  void Swap(cGetStudentInfo* other);

  // implements Message ----------------------------------------------

  cGetStudentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetStudentInfo& from);
  void MergeFrom(const cGetStudentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetStudentInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetStudentInfo* default_instance_;
};
// -------------------------------------------------------------------

class sGetStudentInfo : public ::google::protobuf::Message {
 public:
  sGetStudentInfo();
  virtual ~sGetStudentInfo();

  sGetStudentInfo(const sGetStudentInfo& from);

  inline sGetStudentInfo& operator=(const sGetStudentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetStudentInfo& default_instance();

  void Swap(sGetStudentInfo* other);

  // implements Message ----------------------------------------------

  sGetStudentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetStudentInfo& from);
  void MergeFrom(const sGetStudentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // required string race = 5;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 5;
  inline const ::std::string& race() const;
  inline void set_race(const ::std::string& value);
  inline void set_race(const char* value);
  inline void set_race(const char* value, size_t size);
  inline ::std::string* mutable_race();
  inline ::std::string* release_race();
  inline void set_allocated_race(::std::string* race);

  // required string birthday = 12;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 12;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // required string native = 6;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 6;
  inline const ::std::string& native() const;
  inline void set_native(const ::std::string& value);
  inline void set_native(const char* value);
  inline void set_native(const char* value, size_t size);
  inline ::std::string* mutable_native();
  inline ::std::string* release_native();
  inline void set_allocated_native(::std::string* native);

  // required int32 class_id = 7;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 7;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required string class_name = 8;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 8;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const char* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // required int32 grade_id = 9;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 9;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // required string guardian = 10;
  inline bool has_guardian() const;
  inline void clear_guardian();
  static const int kGuardianFieldNumber = 10;
  inline const ::std::string& guardian() const;
  inline void set_guardian(const ::std::string& value);
  inline void set_guardian(const char* value);
  inline void set_guardian(const char* value, size_t size);
  inline ::std::string* mutable_guardian();
  inline ::std::string* release_guardian();
  inline void set_allocated_guardian(::std::string* guardian);

  // required string guardian_phone = 13;
  inline bool has_guardian_phone() const;
  inline void clear_guardian_phone();
  static const int kGuardianPhoneFieldNumber = 13;
  inline const ::std::string& guardian_phone() const;
  inline void set_guardian_phone(const ::std::string& value);
  inline void set_guardian_phone(const char* value);
  inline void set_guardian_phone(const char* value, size_t size);
  inline ::std::string* mutable_guardian_phone();
  inline ::std::string* release_guardian_phone();
  inline void set_allocated_guardian_phone(::std::string* guardian_phone);

  // required string grade_name = 11;
  inline bool has_grade_name() const;
  inline void clear_grade_name();
  static const int kGradeNameFieldNumber = 11;
  inline const ::std::string& grade_name() const;
  inline void set_grade_name(const ::std::string& value);
  inline void set_grade_name(const char* value);
  inline void set_grade_name(const char* value, size_t size);
  inline ::std::string* mutable_grade_name();
  inline ::std::string* release_grade_name();
  inline void set_allocated_grade_name(::std::string* grade_name);

  // required string account = 14;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 14;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string address = 15;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 15;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:sGetStudentInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_class_name();
  inline void clear_has_class_name();
  inline void set_has_grade_id();
  inline void clear_has_grade_id();
  inline void set_has_guardian();
  inline void clear_has_guardian();
  inline void set_has_guardian_phone();
  inline void clear_has_guardian_phone();
  inline void set_has_grade_name();
  inline void clear_has_grade_name();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* number_;
  ::std::string* name_;
  ::std::string* sex_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 class_id_;
  ::std::string* race_;
  ::std::string* birthday_;
  ::std::string* native_;
  ::std::string* class_name_;
  ::std::string* guardian_;
  ::std::string* guardian_phone_;
  ::std::string* grade_name_;
  ::std::string* account_;
  ::std::string* address_;
  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetStudentInfo* default_instance_;
};
// -------------------------------------------------------------------

class cGetTeacherInfo : public ::google::protobuf::Message {
 public:
  cGetTeacherInfo();
  virtual ~cGetTeacherInfo();

  cGetTeacherInfo(const cGetTeacherInfo& from);

  inline cGetTeacherInfo& operator=(const cGetTeacherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetTeacherInfo& default_instance();

  void Swap(cGetTeacherInfo* other);

  // implements Message ----------------------------------------------

  cGetTeacherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetTeacherInfo& from);
  void MergeFrom(const cGetTeacherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetTeacherInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetTeacherInfo* default_instance_;
};
// -------------------------------------------------------------------

class sGetTeacherInfo : public ::google::protobuf::Message {
 public:
  sGetTeacherInfo();
  virtual ~sGetTeacherInfo();

  sGetTeacherInfo(const sGetTeacherInfo& from);

  inline sGetTeacherInfo& operator=(const sGetTeacherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetTeacherInfo& default_instance();

  void Swap(sGetTeacherInfo* other);

  // implements Message ----------------------------------------------

  sGetTeacherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetTeacherInfo& from);
  void MergeFrom(const sGetTeacherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // required string race = 5;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 5;
  inline const ::std::string& race() const;
  inline void set_race(const ::std::string& value);
  inline void set_race(const char* value);
  inline void set_race(const char* value, size_t size);
  inline ::std::string* mutable_race();
  inline ::std::string* release_race();
  inline void set_allocated_race(::std::string* race);

  // required string birthday = 6;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 6;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // required string native = 7;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 7;
  inline const ::std::string& native() const;
  inline void set_native(const ::std::string& value);
  inline void set_native(const char* value);
  inline void set_native(const char* value, size_t size);
  inline ::std::string* mutable_native();
  inline ::std::string* release_native();
  inline void set_allocated_native(::std::string* native);

  // required string school_name = 8;
  inline bool has_school_name() const;
  inline void clear_school_name();
  static const int kSchoolNameFieldNumber = 8;
  inline const ::std::string& school_name() const;
  inline void set_school_name(const ::std::string& value);
  inline void set_school_name(const char* value);
  inline void set_school_name(const char* value, size_t size);
  inline ::std::string* mutable_school_name();
  inline ::std::string* release_school_name();
  inline void set_allocated_school_name(::std::string* school_name);

  // required string res_path = 9;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 9;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:sGetTeacherInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_school_name();
  inline void clear_has_school_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* number_;
  ::std::string* name_;
  ::std::string* sex_;
  ::std::string* race_;
  ::std::string* birthday_;
  ::std::string* native_;
  ::std::string* school_name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetTeacherInfo* default_instance_;
};
// -------------------------------------------------------------------

class PeerGroup : public ::google::protobuf::Message {
 public:
  PeerGroup();
  virtual ~PeerGroup();

  PeerGroup(const PeerGroup& from);

  inline PeerGroup& operator=(const PeerGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerGroup& default_instance();

  void Swap(PeerGroup* other);

  // implements Message ----------------------------------------------

  PeerGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerGroup& from);
  void MergeFrom(const PeerGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PeerGroup)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PeerGroup* default_instance_;
};
// -------------------------------------------------------------------

class cSetGroup : public ::google::protobuf::Message {
 public:
  cSetGroup();
  virtual ~cSetGroup();

  cSetGroup(const cSetGroup& from);

  inline cSetGroup& operator=(const cSetGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSetGroup& default_instance();

  void Swap(cSetGroup* other);

  // implements Message ----------------------------------------------

  cSetGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSetGroup& from);
  void MergeFrom(const cSetGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // required string group_name = 2;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // repeated .PeerGroup student_list = 3;
  inline int student_list_size() const;
  inline void clear_student_list();
  static const int kStudentListFieldNumber = 3;
  inline const ::PeerGroup& student_list(int index) const;
  inline ::PeerGroup* mutable_student_list(int index);
  inline ::PeerGroup* add_student_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PeerGroup >&
      student_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PeerGroup >*
      mutable_student_list();

  // @@protoc_insertion_point(class_scope:cSetGroup)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* group_name_;
  ::google::protobuf::RepeatedPtrField< ::PeerGroup > student_list_;
  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSetGroup* default_instance_;
};
// -------------------------------------------------------------------

class sSetGroup : public ::google::protobuf::Message {
 public:
  sSetGroup();
  virtual ~sSetGroup();

  sSetGroup(const sSetGroup& from);

  inline sSetGroup& operator=(const sSetGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sSetGroup& default_instance();

  void Swap(sSetGroup* other);

  // implements Message ----------------------------------------------

  sSetGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sSetGroup& from);
  void MergeFrom(const sSetGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sSetGroup)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sSetGroup* default_instance_;
};
// -------------------------------------------------------------------

class cRelay : public ::google::protobuf::Message {
 public:
  cRelay();
  virtual ~cRelay();

  cRelay(const cRelay& from);

  inline cRelay& operator=(const cRelay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cRelay& default_instance();

  void Swap(cRelay* other);

  // implements Message ----------------------------------------------

  cRelay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cRelay& from);
  void MergeFrom(const cRelay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cRelay)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cRelay* default_instance_;
};
// -------------------------------------------------------------------

class sRelay : public ::google::protobuf::Message {
 public:
  sRelay();
  virtual ~sRelay();

  sRelay(const sRelay& from);

  inline sRelay& operator=(const sRelay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sRelay& default_instance();

  void Swap(sRelay* other);

  // implements Message ----------------------------------------------

  sRelay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sRelay& from);
  void MergeFrom(const sRelay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sRelay)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sRelay* default_instance_;
};
// -------------------------------------------------------------------

class bookNode : public ::google::protobuf::Message {
 public:
  bookNode();
  virtual ~bookNode();

  bookNode(const bookNode& from);

  inline bookNode& operator=(const bookNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bookNode& default_instance();

  void Swap(bookNode* other);

  // implements Message ----------------------------------------------

  bookNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bookNode& from);
  void MergeFrom(const bookNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::int32 book_id() const;
  inline void set_book_id(::google::protobuf::int32 value);

  // optional string book_name = 2;
  inline bool has_book_name() const;
  inline void clear_book_name();
  static const int kBookNameFieldNumber = 2;
  inline const ::std::string& book_name() const;
  inline void set_book_name(const ::std::string& value);
  inline void set_book_name(const char* value);
  inline void set_book_name(const char* value, size_t size);
  inline ::std::string* mutable_book_name();
  inline ::std::string* release_book_name();
  inline void set_allocated_book_name(::std::string* book_name);

  // optional int32 book_type = 3;
  inline bool has_book_type() const;
  inline void clear_book_type();
  static const int kBookTypeFieldNumber = 3;
  inline ::google::protobuf::int32 book_type() const;
  inline void set_book_type(::google::protobuf::int32 value);

  // optional int32 auth_id = 4;
  inline bool has_auth_id() const;
  inline void clear_auth_id();
  static const int kAuthIdFieldNumber = 4;
  inline ::google::protobuf::int32 auth_id() const;
  inline void set_auth_id(::google::protobuf::int32 value);

  // optional .LoginType auth_type = 5;
  inline bool has_auth_type() const;
  inline void clear_auth_type();
  static const int kAuthTypeFieldNumber = 5;
  inline ::LoginType auth_type() const;
  inline void set_auth_type(::LoginType value);

  // @@protoc_insertion_point(class_scope:bookNode)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();
  inline void set_has_book_name();
  inline void clear_has_book_name();
  inline void set_has_book_type();
  inline void clear_has_book_type();
  inline void set_has_auth_id();
  inline void clear_has_auth_id();
  inline void set_has_auth_type();
  inline void clear_has_auth_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* book_name_;
  ::google::protobuf::int32 book_id_;
  ::google::protobuf::int32 book_type_;
  ::google::protobuf::int32 auth_id_;
  int auth_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static bookNode* default_instance_;
};
// -------------------------------------------------------------------

class cGetPublicBooksList : public ::google::protobuf::Message {
 public:
  cGetPublicBooksList();
  virtual ~cGetPublicBooksList();

  cGetPublicBooksList(const cGetPublicBooksList& from);

  inline cGetPublicBooksList& operator=(const cGetPublicBooksList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetPublicBooksList& default_instance();

  void Swap(cGetPublicBooksList* other);

  // implements Message ----------------------------------------------

  cGetPublicBooksList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetPublicBooksList& from);
  void MergeFrom(const cGetPublicBooksList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 owner_id = 1;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 1;
  inline ::google::protobuf::int32 owner_id() const;
  inline void set_owner_id(::google::protobuf::int32 value);

  // optional string owner_type = 2;
  inline bool has_owner_type() const;
  inline void clear_owner_type();
  static const int kOwnerTypeFieldNumber = 2;
  inline const ::std::string& owner_type() const;
  inline void set_owner_type(const ::std::string& value);
  inline void set_owner_type(const char* value);
  inline void set_owner_type(const char* value, size_t size);
  inline ::std::string* mutable_owner_type();
  inline ::std::string* release_owner_type();
  inline void set_allocated_owner_type(::std::string* owner_type);

  // @@protoc_insertion_point(class_scope:cGetPublicBooksList)
 private:
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_owner_type();
  inline void clear_has_owner_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* owner_type_;
  ::google::protobuf::int32 owner_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetPublicBooksList* default_instance_;
};
// -------------------------------------------------------------------

class userNode : public ::google::protobuf::Message {
 public:
  userNode();
  virtual ~userNode();

  userNode(const userNode& from);

  inline userNode& operator=(const userNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userNode& default_instance();

  void Swap(userNode* other);

  // implements Message ----------------------------------------------

  userNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userNode& from);
  void MergeFrom(const userNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional string user_account = 2;
  inline bool has_user_account() const;
  inline void clear_user_account();
  static const int kUserAccountFieldNumber = 2;
  inline const ::std::string& user_account() const;
  inline void set_user_account(const ::std::string& value);
  inline void set_user_account(const char* value);
  inline void set_user_account(const char* value, size_t size);
  inline ::std::string* mutable_user_account();
  inline ::std::string* release_user_account();
  inline void set_allocated_user_account(::std::string* user_account);

  // @@protoc_insertion_point(class_scope:userNode)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_account();
  inline void clear_has_user_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_account_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static userNode* default_instance_;
};
// -------------------------------------------------------------------

class serverInfoNode : public ::google::protobuf::Message {
 public:
  serverInfoNode();
  virtual ~serverInfoNode();

  serverInfoNode(const serverInfoNode& from);

  inline serverInfoNode& operator=(const serverInfoNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const serverInfoNode& default_instance();

  void Swap(serverInfoNode* other);

  // implements Message ----------------------------------------------

  serverInfoNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const serverInfoNode& from);
  void MergeFrom(const serverInfoNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_addr = 1;
  inline bool has_server_addr() const;
  inline void clear_server_addr();
  static const int kServerAddrFieldNumber = 1;
  inline const ::std::string& server_addr() const;
  inline void set_server_addr(const ::std::string& value);
  inline void set_server_addr(const char* value);
  inline void set_server_addr(const char* value, size_t size);
  inline ::std::string* mutable_server_addr();
  inline ::std::string* release_server_addr();
  inline void set_allocated_server_addr(::std::string* server_addr);

  // optional int32 server_port = 2;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 2;
  inline ::google::protobuf::int32 server_port() const;
  inline void set_server_port(::google::protobuf::int32 value);

  // optional string full_addr = 3;
  inline bool has_full_addr() const;
  inline void clear_full_addr();
  static const int kFullAddrFieldNumber = 3;
  inline const ::std::string& full_addr() const;
  inline void set_full_addr(const ::std::string& value);
  inline void set_full_addr(const char* value);
  inline void set_full_addr(const char* value, size_t size);
  inline ::std::string* mutable_full_addr();
  inline ::std::string* release_full_addr();
  inline void set_allocated_full_addr(::std::string* full_addr);

  // @@protoc_insertion_point(class_scope:serverInfoNode)
 private:
  inline void set_has_server_addr();
  inline void clear_has_server_addr();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_full_addr();
  inline void clear_has_full_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_addr_;
  ::std::string* full_addr_;
  ::google::protobuf::int32 server_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static serverInfoNode* default_instance_;
};
// -------------------------------------------------------------------

class bookList : public ::google::protobuf::Message {
 public:
  bookList();
  virtual ~bookList();

  bookList(const bookList& from);

  inline bookList& operator=(const bookList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bookList& default_instance();

  void Swap(bookList* other);

  // implements Message ----------------------------------------------

  bookList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bookList& from);
  void MergeFrom(const bookList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bookNode book_list = 1;
  inline int book_list_size() const;
  inline void clear_book_list();
  static const int kBookListFieldNumber = 1;
  inline const ::bookNode& book_list(int index) const;
  inline ::bookNode* mutable_book_list(int index);
  inline ::bookNode* add_book_list();
  inline const ::google::protobuf::RepeatedPtrField< ::bookNode >&
      book_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::bookNode >*
      mutable_book_list();

  // @@protoc_insertion_point(class_scope:bookList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bookNode > book_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static bookList* default_instance_;
};
// -------------------------------------------------------------------

class cPublish : public ::google::protobuf::Message {
 public:
  cPublish();
  virtual ~cPublish();

  cPublish(const cPublish& from);

  inline cPublish& operator=(const cPublish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cPublish& default_instance();

  void Swap(cPublish* other);

  // implements Message ----------------------------------------------

  cPublish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cPublish& from);
  void MergeFrom(const cPublish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 book_type = 1;
  inline bool has_book_type() const;
  inline void clear_book_type();
  static const int kBookTypeFieldNumber = 1;
  inline ::google::protobuf::int32 book_type() const;
  inline void set_book_type(::google::protobuf::int32 value);

  // optional .CourseType course_type = 11 [default = CT_INVALID];
  inline bool has_course_type() const;
  inline void clear_course_type();
  static const int kCourseTypeFieldNumber = 11;
  inline ::CourseType course_type() const;
  inline void set_course_type(::CourseType value);

  // optional string book_name = 2;
  inline bool has_book_name() const;
  inline void clear_book_name();
  static const int kBookNameFieldNumber = 2;
  inline const ::std::string& book_name() const;
  inline void set_book_name(const ::std::string& value);
  inline void set_book_name(const char* value);
  inline void set_book_name(const char* value, size_t size);
  inline ::std::string* mutable_book_name();
  inline ::std::string* release_book_name();
  inline void set_allocated_book_name(::std::string* book_name);

  // optional string time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional int32 belongs = 4;
  inline bool has_belongs() const;
  inline void clear_belongs();
  static const int kBelongsFieldNumber = 4;
  inline ::google::protobuf::int32 belongs() const;
  inline void set_belongs(::google::protobuf::int32 value);

  // optional int32 art = 5;
  inline bool has_art() const;
  inline void clear_art();
  static const int kArtFieldNumber = 5;
  inline ::google::protobuf::int32 art() const;
  inline void set_art(::google::protobuf::int32 value);

  // optional int32 language = 6;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 6;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);

  // optional int32 community = 7;
  inline bool has_community() const;
  inline void clear_community();
  static const int kCommunityFieldNumber = 7;
  inline ::google::protobuf::int32 community() const;
  inline void set_community(::google::protobuf::int32 value);

  // optional int32 health = 8;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 8;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // optional int32 science = 9;
  inline bool has_science() const;
  inline void clear_science();
  static const int kScienceFieldNumber = 9;
  inline ::google::protobuf::int32 science() const;
  inline void set_science(::google::protobuf::int32 value);

  // optional string res_path = 10;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 10;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:cPublish)
 private:
  inline void set_has_book_type();
  inline void clear_has_book_type();
  inline void set_has_course_type();
  inline void clear_has_course_type();
  inline void set_has_book_name();
  inline void clear_has_book_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_belongs();
  inline void clear_has_belongs();
  inline void set_has_art();
  inline void clear_has_art();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_community();
  inline void clear_has_community();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_science();
  inline void clear_has_science();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 book_type_;
  int course_type_;
  ::std::string* book_name_;
  ::std::string* time_;
  ::google::protobuf::int32 belongs_;
  ::google::protobuf::int32 art_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 community_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 science_;
  ::std::string* res_path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cPublish* default_instance_;
};
// -------------------------------------------------------------------

class cSell : public ::google::protobuf::Message {
 public:
  cSell();
  virtual ~cSell();

  cSell(const cSell& from);

  inline cSell& operator=(const cSell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSell& default_instance();

  void Swap(cSell* other);

  // implements Message ----------------------------------------------

  cSell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSell& from);
  void MergeFrom(const cSell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::int32 book_id() const;
  inline void set_book_id(::google::protobuf::int32 value);

  // optional int32 auth_id = 2;
  inline bool has_auth_id() const;
  inline void clear_auth_id();
  static const int kAuthIdFieldNumber = 2;
  inline ::google::protobuf::int32 auth_id() const;
  inline void set_auth_id(::google::protobuf::int32 value);

  // optional string auth_type = 3;
  inline bool has_auth_type() const;
  inline void clear_auth_type();
  static const int kAuthTypeFieldNumber = 3;
  inline const ::std::string& auth_type() const;
  inline void set_auth_type(const ::std::string& value);
  inline void set_auth_type(const char* value);
  inline void set_auth_type(const char* value, size_t size);
  inline ::std::string* mutable_auth_type();
  inline ::std::string* release_auth_type();
  inline void set_allocated_auth_type(::std::string* auth_type);

  // @@protoc_insertion_point(class_scope:cSell)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();
  inline void set_has_auth_id();
  inline void clear_has_auth_id();
  inline void set_has_auth_type();
  inline void clear_has_auth_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 book_id_;
  ::google::protobuf::int32 auth_id_;
  ::std::string* auth_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSell* default_instance_;
};
// -------------------------------------------------------------------

class cChangeOwner : public ::google::protobuf::Message {
 public:
  cChangeOwner();
  virtual ~cChangeOwner();

  cChangeOwner(const cChangeOwner& from);

  inline cChangeOwner& operator=(const cChangeOwner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cChangeOwner& default_instance();

  void Swap(cChangeOwner* other);

  // implements Message ----------------------------------------------

  cChangeOwner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cChangeOwner& from);
  void MergeFrom(const cChangeOwner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::int32 book_id() const;
  inline void set_book_id(::google::protobuf::int32 value);

  // optional string to_auth_account = 2;
  inline bool has_to_auth_account() const;
  inline void clear_to_auth_account();
  static const int kToAuthAccountFieldNumber = 2;
  inline const ::std::string& to_auth_account() const;
  inline void set_to_auth_account(const ::std::string& value);
  inline void set_to_auth_account(const char* value);
  inline void set_to_auth_account(const char* value, size_t size);
  inline ::std::string* mutable_to_auth_account();
  inline ::std::string* release_to_auth_account();
  inline void set_allocated_to_auth_account(::std::string* to_auth_account);

  // @@protoc_insertion_point(class_scope:cChangeOwner)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();
  inline void set_has_to_auth_account();
  inline void clear_has_to_auth_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* to_auth_account_;
  ::google::protobuf::int32 book_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cChangeOwner* default_instance_;
};
// -------------------------------------------------------------------

class sResult : public ::google::protobuf::Message {
 public:
  sResult();
  virtual ~sResult();

  sResult(const sResult& from);

  inline sResult& operator=(const sResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sResult& default_instance();

  void Swap(sResult* other);

  // implements Message ----------------------------------------------

  sResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sResult& from);
  void MergeFrom(const sResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sResult* default_instance_;
};
// -------------------------------------------------------------------

class group_node : public ::google::protobuf::Message {
 public:
  group_node();
  virtual ~group_node();

  group_node(const group_node& from);

  inline group_node& operator=(const group_node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const group_node& default_instance();

  void Swap(group_node* other);

  // implements Message ----------------------------------------------

  group_node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const group_node& from);
  void MergeFrom(const group_node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:group_node)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static group_node* default_instance_;
};
// -------------------------------------------------------------------

class point : public ::google::protobuf::Message {
 public:
  point();
  virtual ~point();

  point(const point& from);

  inline point& operator=(const point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const point& default_instance();

  void Swap(point* other);

  // implements Message ----------------------------------------------

  point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const point& from);
  void MergeFrom(const point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pt_x = 1;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 1;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // optional string pt_y = 2;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 2;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:point)
 private:
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pt_x_;
  ::std::string* pt_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static point* default_instance_;
};
// -------------------------------------------------------------------

class PuzzleInfo : public ::google::protobuf::Message {
 public:
  PuzzleInfo();
  virtual ~PuzzleInfo();

  PuzzleInfo(const PuzzleInfo& from);

  inline PuzzleInfo& operator=(const PuzzleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PuzzleInfo& default_instance();

  void Swap(PuzzleInfo* other);

  // implements Message ----------------------------------------------

  PuzzleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PuzzleInfo& from);
  void MergeFrom(const PuzzleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // optional int32 random = 2;
  inline bool has_random() const;
  inline void clear_random();
  static const int kRandomFieldNumber = 2;
  inline ::google::protobuf::int32 random() const;
  inline void set_random(::google::protobuf::int32 value);

  // optional int32 puzzle_id = 3;
  inline bool has_puzzle_id() const;
  inline void clear_puzzle_id();
  static const int kPuzzleIdFieldNumber = 3;
  inline ::google::protobuf::int32 puzzle_id() const;
  inline void set_puzzle_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PuzzleInfo)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_random();
  inline void clear_has_random();
  inline void set_has_puzzle_id();
  inline void clear_has_puzzle_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 random_;
  ::google::protobuf::int32 puzzle_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PuzzleInfo* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePuzzleResult : public ::google::protobuf::Message {
 public:
  UpdatePuzzleResult();
  virtual ~UpdatePuzzleResult();

  UpdatePuzzleResult(const UpdatePuzzleResult& from);

  inline UpdatePuzzleResult& operator=(const UpdatePuzzleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePuzzleResult& default_instance();

  void Swap(UpdatePuzzleResult* other);

  // implements Message ----------------------------------------------

  UpdatePuzzleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePuzzleResult& from);
  void MergeFrom(const UpdatePuzzleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // optional int32 pic_id = 2;
  inline bool has_pic_id() const;
  inline void clear_pic_id();
  static const int kPicIdFieldNumber = 2;
  inline ::google::protobuf::int32 pic_id() const;
  inline void set_pic_id(::google::protobuf::int32 value);

  // optional string pt_x = 3;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 3;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // optional string pt_y = 4;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 4;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // optional int32 tag = 5;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 5;
  inline ::google::protobuf::int32 tag() const;
  inline void set_tag(::google::protobuf::int32 value);

  // optional int32 puzzle_id = 6;
  inline bool has_puzzle_id() const;
  inline void clear_puzzle_id();
  static const int kPuzzleIdFieldNumber = 6;
  inline ::google::protobuf::int32 puzzle_id() const;
  inline void set_puzzle_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UpdatePuzzleResult)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_pic_id();
  inline void clear_has_pic_id();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_puzzle_id();
  inline void clear_has_puzzle_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 pic_id_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 tag_;
  ::google::protobuf::int32 puzzle_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static UpdatePuzzleResult* default_instance_;
};
// -------------------------------------------------------------------

class UpdateConn : public ::google::protobuf::Message {
 public:
  UpdateConn();
  virtual ~UpdateConn();

  UpdateConn(const UpdateConn& from);

  inline UpdateConn& operator=(const UpdateConn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateConn& default_instance();

  void Swap(UpdateConn* other);

  // implements Message ----------------------------------------------

  UpdateConn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateConn& from);
  void MergeFrom(const UpdateConn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // optional int32 idx = 2;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 2;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // optional int32 conn_id = 3;
  inline bool has_conn_id() const;
  inline void clear_conn_id();
  static const int kConnIdFieldNumber = 3;
  inline ::google::protobuf::int32 conn_id() const;
  inline void set_conn_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UpdateConn)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_conn_id();
  inline void clear_has_conn_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 idx_;
  ::google::protobuf::int32 conn_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static UpdateConn* default_instance_;
};
// -------------------------------------------------------------------

class cGetNextStudent : public ::google::protobuf::Message {
 public:
  cGetNextStudent();
  virtual ~cGetNextStudent();

  cGetNextStudent(const cGetNextStudent& from);

  inline cGetNextStudent& operator=(const cGetNextStudent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetNextStudent& default_instance();

  void Swap(cGetNextStudent* other);

  // implements Message ----------------------------------------------

  cGetNextStudent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetNextStudent& from);
  void MergeFrom(const cGetNextStudent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // required string pos_x = 2;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 2;
  inline const ::std::string& pos_x() const;
  inline void set_pos_x(const ::std::string& value);
  inline void set_pos_x(const char* value);
  inline void set_pos_x(const char* value, size_t size);
  inline ::std::string* mutable_pos_x();
  inline ::std::string* release_pos_x();
  inline void set_allocated_pos_x(::std::string* pos_x);

  // required string pos_y = 3;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 3;
  inline const ::std::string& pos_y() const;
  inline void set_pos_y(const ::std::string& value);
  inline void set_pos_y(const char* value);
  inline void set_pos_y(const char* value, size_t size);
  inline ::std::string* mutable_pos_y();
  inline ::std::string* release_pos_y();
  inline void set_allocated_pos_y(::std::string* pos_y);

  // required int32 student_id = 4;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 4;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetNextStudent)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pos_x_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::int32 student_id_;
  ::std::string* pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetNextStudent* default_instance_;
};
// -------------------------------------------------------------------

class sGetNextStudent : public ::google::protobuf::Message {
 public:
  sGetNextStudent();
  virtual ~sGetNextStudent();

  sGetNextStudent(const sGetNextStudent& from);

  inline sGetNextStudent& operator=(const sGetNextStudent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetNextStudent& default_instance();

  void Swap(sGetNextStudent* other);

  // implements Message ----------------------------------------------

  sGetNextStudent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetNextStudent& from);
  void MergeFrom(const sGetNextStudent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // required string pos_x = 2;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 2;
  inline const ::std::string& pos_x() const;
  inline void set_pos_x(const ::std::string& value);
  inline void set_pos_x(const char* value);
  inline void set_pos_x(const char* value, size_t size);
  inline ::std::string* mutable_pos_x();
  inline ::std::string* release_pos_x();
  inline void set_allocated_pos_x(::std::string* pos_x);

  // required string pos_y = 3;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 3;
  inline const ::std::string& pos_y() const;
  inline void set_pos_y(const ::std::string& value);
  inline void set_pos_y(const char* value);
  inline void set_pos_y(const char* value, size_t size);
  inline ::std::string* mutable_pos_y();
  inline ::std::string* release_pos_y();
  inline void set_allocated_pos_y(::std::string* pos_y);

  // required int32 student_id = 4;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 4;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sGetNextStudent)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pos_x_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::int32 student_id_;
  ::std::string* pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetNextStudent* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateDrawSet : public ::google::protobuf::Message {
 public:
  cUpdateDrawSet();
  virtual ~cUpdateDrawSet();

  cUpdateDrawSet(const cUpdateDrawSet& from);

  inline cUpdateDrawSet& operator=(const cUpdateDrawSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateDrawSet& default_instance();

  void Swap(cUpdateDrawSet* other);

  // implements Message ----------------------------------------------

  cUpdateDrawSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateDrawSet& from);
  void MergeFrom(const cUpdateDrawSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool facsimile = 1;
  inline bool has_facsimile() const;
  inline void clear_facsimile();
  static const int kFacsimileFieldNumber = 1;
  inline bool facsimile() const;
  inline void set_facsimile(bool value);

  // optional bool puzzle = 2;
  inline bool has_puzzle() const;
  inline void clear_puzzle();
  static const int kPuzzleFieldNumber = 2;
  inline bool puzzle() const;
  inline void set_puzzle(bool value);

  // optional bool frame = 3;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 3;
  inline bool frame() const;
  inline void set_frame(bool value);

  // optional bool record = 4;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 4;
  inline bool record() const;
  inline void set_record(bool value);

  // optional bool world = 5;
  inline bool has_world() const;
  inline void clear_world();
  static const int kWorldFieldNumber = 5;
  inline bool world() const;
  inline void set_world(bool value);

  // repeated string paper_name = 6;
  inline int paper_name_size() const;
  inline void clear_paper_name();
  static const int kPaperNameFieldNumber = 6;
  inline const ::std::string& paper_name(int index) const;
  inline ::std::string* mutable_paper_name(int index);
  inline void set_paper_name(int index, const ::std::string& value);
  inline void set_paper_name(int index, const char* value);
  inline void set_paper_name(int index, const char* value, size_t size);
  inline ::std::string* add_paper_name();
  inline void add_paper_name(const ::std::string& value);
  inline void add_paper_name(const char* value);
  inline void add_paper_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paper_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paper_name();

  // repeated int32 pen_id = 7;
  inline int pen_id_size() const;
  inline void clear_pen_id();
  static const int kPenIdFieldNumber = 7;
  inline ::google::protobuf::int32 pen_id(int index) const;
  inline void set_pen_id(int index, ::google::protobuf::int32 value);
  inline void add_pen_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pen_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pen_id();

  // @@protoc_insertion_point(class_scope:cUpdateDrawSet)
 private:
  inline void set_has_facsimile();
  inline void clear_has_facsimile();
  inline void set_has_puzzle();
  inline void clear_has_puzzle();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_world();
  inline void clear_has_world();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool facsimile_;
  bool puzzle_;
  bool frame_;
  bool record_;
  bool world_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paper_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pen_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateDrawSet* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateDrawInfo : public ::google::protobuf::Message {
 public:
  cUpdateDrawInfo();
  virtual ~cUpdateDrawInfo();

  cUpdateDrawInfo(const cUpdateDrawInfo& from);

  inline cUpdateDrawInfo& operator=(const cUpdateDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateDrawInfo& default_instance();

  void Swap(cUpdateDrawInfo* other);

  // implements Message ----------------------------------------------

  cUpdateDrawInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateDrawInfo& from);
  void MergeFrom(const cUpdateDrawInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cUpdateDrawInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateDrawInfo* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateDrawInfo : public ::google::protobuf::Message {
 public:
  sUpdateDrawInfo();
  virtual ~sUpdateDrawInfo();

  sUpdateDrawInfo(const sUpdateDrawInfo& from);

  inline sUpdateDrawInfo& operator=(const sUpdateDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateDrawInfo& default_instance();

  void Swap(sUpdateDrawInfo* other);

  // implements Message ----------------------------------------------

  sUpdateDrawInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateDrawInfo& from);
  void MergeFrom(const sUpdateDrawInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sUpdateDrawInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateDrawInfo* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateBackground : public ::google::protobuf::Message {
 public:
  cUpdateBackground();
  virtual ~cUpdateBackground();

  cUpdateBackground(const cUpdateBackground& from);

  inline cUpdateBackground& operator=(const cUpdateBackground& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateBackground& default_instance();

  void Swap(cUpdateBackground* other);

  // implements Message ----------------------------------------------

  cUpdateBackground* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateBackground& from);
  void MergeFrom(const cUpdateBackground& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 paper_id = 1;
  inline bool has_paper_id() const;
  inline void clear_paper_id();
  static const int kPaperIdFieldNumber = 1;
  inline ::google::protobuf::int32 paper_id() const;
  inline void set_paper_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateBackground)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_paper_id();
  inline void clear_has_paper_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 paper_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateBackground* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateBackground : public ::google::protobuf::Message {
 public:
  sUpdateBackground();
  virtual ~sUpdateBackground();

  sUpdateBackground(const sUpdateBackground& from);

  inline sUpdateBackground& operator=(const sUpdateBackground& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateBackground& default_instance();

  void Swap(sUpdateBackground* other);

  // implements Message ----------------------------------------------

  sUpdateBackground* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateBackground& from);
  void MergeFrom(const sUpdateBackground& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 paper_id = 1;
  inline bool has_paper_id() const;
  inline void clear_paper_id();
  static const int kPaperIdFieldNumber = 1;
  inline ::google::protobuf::int32 paper_id() const;
  inline void set_paper_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateBackground)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_paper_id();
  inline void clear_has_paper_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 paper_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateBackground* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateCopyIntoPaint : public ::google::protobuf::Message {
 public:
  cUpdateCopyIntoPaint();
  virtual ~cUpdateCopyIntoPaint();

  cUpdateCopyIntoPaint(const cUpdateCopyIntoPaint& from);

  inline cUpdateCopyIntoPaint& operator=(const cUpdateCopyIntoPaint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateCopyIntoPaint& default_instance();

  void Swap(cUpdateCopyIntoPaint* other);

  // implements Message ----------------------------------------------

  cUpdateCopyIntoPaint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateCopyIntoPaint& from);
  void MergeFrom(const cUpdateCopyIntoPaint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 8;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 8;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 pic_id = 1;
  inline bool has_pic_id() const;
  inline void clear_pic_id();
  static const int kPicIdFieldNumber = 1;
  inline ::google::protobuf::int32 pic_id() const;
  inline void set_pic_id(::google::protobuf::int32 value);

  // required string pic_res = 2;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 2;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pic_scale = 3;
  inline bool has_pic_scale() const;
  inline void clear_pic_scale();
  static const int kPicScaleFieldNumber = 3;
  inline const ::std::string& pic_scale() const;
  inline void set_pic_scale(const ::std::string& value);
  inline void set_pic_scale(const char* value);
  inline void set_pic_scale(const char* value, size_t size);
  inline ::std::string* mutable_pic_scale();
  inline ::std::string* release_pic_scale();
  inline void set_allocated_pic_scale(::std::string* pic_scale);

  // required string pic_rotation = 4;
  inline bool has_pic_rotation() const;
  inline void clear_pic_rotation();
  static const int kPicRotationFieldNumber = 4;
  inline const ::std::string& pic_rotation() const;
  inline void set_pic_rotation(const ::std::string& value);
  inline void set_pic_rotation(const char* value);
  inline void set_pic_rotation(const char* value, size_t size);
  inline ::std::string* mutable_pic_rotation();
  inline ::std::string* release_pic_rotation();
  inline void set_allocated_pic_rotation(::std::string* pic_rotation);

  // required string pt_x = 5;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 5;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 6;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 6;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required int32 op_type = 7;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 7;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateCopyIntoPaint)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pic_id();
  inline void clear_has_pic_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pic_scale();
  inline void clear_has_pic_scale();
  inline void set_has_pic_rotation();
  inline void clear_has_pic_rotation();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_op_type();
  inline void clear_has_op_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 pic_id_;
  ::std::string* pic_res_;
  ::std::string* pic_scale_;
  ::std::string* pic_rotation_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 op_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateCopyIntoPaint* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateCopyIntoPaint : public ::google::protobuf::Message {
 public:
  sUpdateCopyIntoPaint();
  virtual ~sUpdateCopyIntoPaint();

  sUpdateCopyIntoPaint(const sUpdateCopyIntoPaint& from);

  inline sUpdateCopyIntoPaint& operator=(const sUpdateCopyIntoPaint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateCopyIntoPaint& default_instance();

  void Swap(sUpdateCopyIntoPaint* other);

  // implements Message ----------------------------------------------

  sUpdateCopyIntoPaint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateCopyIntoPaint& from);
  void MergeFrom(const sUpdateCopyIntoPaint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 8;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 8;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 pic_id = 1;
  inline bool has_pic_id() const;
  inline void clear_pic_id();
  static const int kPicIdFieldNumber = 1;
  inline ::google::protobuf::int32 pic_id() const;
  inline void set_pic_id(::google::protobuf::int32 value);

  // required string pic_res = 2;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 2;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pic_scale = 3;
  inline bool has_pic_scale() const;
  inline void clear_pic_scale();
  static const int kPicScaleFieldNumber = 3;
  inline const ::std::string& pic_scale() const;
  inline void set_pic_scale(const ::std::string& value);
  inline void set_pic_scale(const char* value);
  inline void set_pic_scale(const char* value, size_t size);
  inline ::std::string* mutable_pic_scale();
  inline ::std::string* release_pic_scale();
  inline void set_allocated_pic_scale(::std::string* pic_scale);

  // required string pic_rotation = 4;
  inline bool has_pic_rotation() const;
  inline void clear_pic_rotation();
  static const int kPicRotationFieldNumber = 4;
  inline const ::std::string& pic_rotation() const;
  inline void set_pic_rotation(const ::std::string& value);
  inline void set_pic_rotation(const char* value);
  inline void set_pic_rotation(const char* value, size_t size);
  inline ::std::string* mutable_pic_rotation();
  inline ::std::string* release_pic_rotation();
  inline void set_allocated_pic_rotation(::std::string* pic_rotation);

  // required string pt_x = 5;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 5;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 6;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 6;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required int32 op_type = 7;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 7;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateCopyIntoPaint)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pic_id();
  inline void clear_has_pic_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pic_scale();
  inline void clear_has_pic_scale();
  inline void set_has_pic_rotation();
  inline void clear_has_pic_rotation();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_op_type();
  inline void clear_has_op_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 pic_id_;
  ::std::string* pic_res_;
  ::std::string* pic_scale_;
  ::std::string* pic_rotation_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 op_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateCopyIntoPaint* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePenAndEraserNode : public ::google::protobuf::Message {
 public:
  UpdatePenAndEraserNode();
  virtual ~UpdatePenAndEraserNode();

  UpdatePenAndEraserNode(const UpdatePenAndEraserNode& from);

  inline UpdatePenAndEraserNode& operator=(const UpdatePenAndEraserNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePenAndEraserNode& default_instance();

  void Swap(UpdatePenAndEraserNode* other);

  // implements Message ----------------------------------------------

  UpdatePenAndEraserNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePenAndEraserNode& from);
  void MergeFrom(const UpdatePenAndEraserNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 10;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 10;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 pen_type = 1;
  inline bool has_pen_type() const;
  inline void clear_pen_type();
  static const int kPenTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pen_type() const;
  inline void set_pen_type(::google::protobuf::int32 value);

  // required int32 pen_color = 2;
  inline bool has_pen_color() const;
  inline void clear_pen_color();
  static const int kPenColorFieldNumber = 2;
  inline ::google::protobuf::int32 pen_color() const;
  inline void set_pen_color(::google::protobuf::int32 value);

  // required string pen_size = 3;
  inline bool has_pen_size() const;
  inline void clear_pen_size();
  static const int kPenSizeFieldNumber = 3;
  inline const ::std::string& pen_size() const;
  inline void set_pen_size(const ::std::string& value);
  inline void set_pen_size(const char* value);
  inline void set_pen_size(const char* value, size_t size);
  inline ::std::string* mutable_pen_size();
  inline ::std::string* release_pen_size();
  inline void set_allocated_pen_size(::std::string* pen_size);

  // required int32 pen_trans = 4;
  inline bool has_pen_trans() const;
  inline void clear_pen_trans();
  static const int kPenTransFieldNumber = 4;
  inline ::google::protobuf::int32 pen_trans() const;
  inline void set_pen_trans(::google::protobuf::int32 value);

  // required int32 paint_type = 5;
  inline bool has_paint_type() const;
  inline void clear_paint_type();
  static const int kPaintTypeFieldNumber = 5;
  inline ::google::protobuf::int32 paint_type() const;
  inline void set_paint_type(::google::protobuf::int32 value);

  // required string pt_x = 6;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 6;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 7;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 7;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required string prept_x = 8;
  inline bool has_prept_x() const;
  inline void clear_prept_x();
  static const int kPreptXFieldNumber = 8;
  inline const ::std::string& prept_x() const;
  inline void set_prept_x(const ::std::string& value);
  inline void set_prept_x(const char* value);
  inline void set_prept_x(const char* value, size_t size);
  inline ::std::string* mutable_prept_x();
  inline ::std::string* release_prept_x();
  inline void set_allocated_prept_x(::std::string* prept_x);

  // required string prept_y = 9;
  inline bool has_prept_y() const;
  inline void clear_prept_y();
  static const int kPreptYFieldNumber = 9;
  inline const ::std::string& prept_y() const;
  inline void set_prept_y(const ::std::string& value);
  inline void set_prept_y(const char* value);
  inline void set_prept_y(const char* value, size_t size);
  inline ::std::string* mutable_prept_y();
  inline ::std::string* release_prept_y();
  inline void set_allocated_prept_y(::std::string* prept_y);

  // @@protoc_insertion_point(class_scope:UpdatePenAndEraserNode)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pen_type();
  inline void clear_has_pen_type();
  inline void set_has_pen_color();
  inline void clear_has_pen_color();
  inline void set_has_pen_size();
  inline void clear_has_pen_size();
  inline void set_has_pen_trans();
  inline void clear_has_pen_trans();
  inline void set_has_paint_type();
  inline void clear_has_paint_type();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_prept_x();
  inline void clear_has_prept_x();
  inline void set_has_prept_y();
  inline void clear_has_prept_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 pen_type_;
  ::std::string* pen_size_;
  ::google::protobuf::int32 pen_color_;
  ::google::protobuf::int32 pen_trans_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::std::string* prept_x_;
  ::std::string* prept_y_;
  ::google::protobuf::int32 paint_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static UpdatePenAndEraserNode* default_instance_;
};
// -------------------------------------------------------------------

class cUpdatePenAnderaser : public ::google::protobuf::Message {
 public:
  cUpdatePenAnderaser();
  virtual ~cUpdatePenAnderaser();

  cUpdatePenAnderaser(const cUpdatePenAnderaser& from);

  inline cUpdatePenAnderaser& operator=(const cUpdatePenAnderaser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdatePenAnderaser& default_instance();

  void Swap(cUpdatePenAnderaser* other);

  // implements Message ----------------------------------------------

  cUpdatePenAnderaser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdatePenAnderaser& from);
  void MergeFrom(const cUpdatePenAnderaser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UpdatePenAndEraserNode node = 1;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::UpdatePenAndEraserNode& node(int index) const;
  inline ::UpdatePenAndEraserNode* mutable_node(int index);
  inline ::UpdatePenAndEraserNode* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::UpdatePenAndEraserNode >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::UpdatePenAndEraserNode >*
      mutable_node();

  // @@protoc_insertion_point(class_scope:cUpdatePenAnderaser)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::UpdatePenAndEraserNode > node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdatePenAnderaser* default_instance_;
};
// -------------------------------------------------------------------

class sUpdatePenAnderaser : public ::google::protobuf::Message {
 public:
  sUpdatePenAnderaser();
  virtual ~sUpdatePenAnderaser();

  sUpdatePenAnderaser(const sUpdatePenAnderaser& from);

  inline sUpdatePenAnderaser& operator=(const sUpdatePenAnderaser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdatePenAnderaser& default_instance();

  void Swap(sUpdatePenAnderaser* other);

  // implements Message ----------------------------------------------

  sUpdatePenAnderaser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdatePenAnderaser& from);
  void MergeFrom(const sUpdatePenAnderaser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 10;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 10;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 pen_type = 1;
  inline bool has_pen_type() const;
  inline void clear_pen_type();
  static const int kPenTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pen_type() const;
  inline void set_pen_type(::google::protobuf::int32 value);

  // required int32 pen_color = 2;
  inline bool has_pen_color() const;
  inline void clear_pen_color();
  static const int kPenColorFieldNumber = 2;
  inline ::google::protobuf::int32 pen_color() const;
  inline void set_pen_color(::google::protobuf::int32 value);

  // required string pen_size = 3;
  inline bool has_pen_size() const;
  inline void clear_pen_size();
  static const int kPenSizeFieldNumber = 3;
  inline const ::std::string& pen_size() const;
  inline void set_pen_size(const ::std::string& value);
  inline void set_pen_size(const char* value);
  inline void set_pen_size(const char* value, size_t size);
  inline ::std::string* mutable_pen_size();
  inline ::std::string* release_pen_size();
  inline void set_allocated_pen_size(::std::string* pen_size);

  // required int32 pen_trans = 4;
  inline bool has_pen_trans() const;
  inline void clear_pen_trans();
  static const int kPenTransFieldNumber = 4;
  inline ::google::protobuf::int32 pen_trans() const;
  inline void set_pen_trans(::google::protobuf::int32 value);

  // required int32 paint_type = 5;
  inline bool has_paint_type() const;
  inline void clear_paint_type();
  static const int kPaintTypeFieldNumber = 5;
  inline ::google::protobuf::int32 paint_type() const;
  inline void set_paint_type(::google::protobuf::int32 value);

  // required string pt_x = 6;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 6;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 7;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 7;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required string prept_x = 8;
  inline bool has_prept_x() const;
  inline void clear_prept_x();
  static const int kPreptXFieldNumber = 8;
  inline const ::std::string& prept_x() const;
  inline void set_prept_x(const ::std::string& value);
  inline void set_prept_x(const char* value);
  inline void set_prept_x(const char* value, size_t size);
  inline ::std::string* mutable_prept_x();
  inline ::std::string* release_prept_x();
  inline void set_allocated_prept_x(::std::string* prept_x);

  // required string prept_y = 9;
  inline bool has_prept_y() const;
  inline void clear_prept_y();
  static const int kPreptYFieldNumber = 9;
  inline const ::std::string& prept_y() const;
  inline void set_prept_y(const ::std::string& value);
  inline void set_prept_y(const char* value);
  inline void set_prept_y(const char* value, size_t size);
  inline ::std::string* mutable_prept_y();
  inline ::std::string* release_prept_y();
  inline void set_allocated_prept_y(::std::string* prept_y);

  // @@protoc_insertion_point(class_scope:sUpdatePenAnderaser)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pen_type();
  inline void clear_has_pen_type();
  inline void set_has_pen_color();
  inline void clear_has_pen_color();
  inline void set_has_pen_size();
  inline void clear_has_pen_size();
  inline void set_has_pen_trans();
  inline void clear_has_pen_trans();
  inline void set_has_paint_type();
  inline void clear_has_paint_type();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_prept_x();
  inline void clear_has_prept_x();
  inline void set_has_prept_y();
  inline void clear_has_prept_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 pen_type_;
  ::std::string* pen_size_;
  ::google::protobuf::int32 pen_color_;
  ::google::protobuf::int32 pen_trans_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::std::string* prept_x_;
  ::std::string* prept_y_;
  ::google::protobuf::int32 paint_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdatePenAnderaser* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateFilling : public ::google::protobuf::Message {
 public:
  cUpdateFilling();
  virtual ~cUpdateFilling();

  cUpdateFilling(const cUpdateFilling& from);

  inline cUpdateFilling& operator=(const cUpdateFilling& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateFilling& default_instance();

  void Swap(cUpdateFilling* other);

  // implements Message ----------------------------------------------

  cUpdateFilling* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateFilling& from);
  void MergeFrom(const cUpdateFilling& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 4;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 4;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required string pt_list = 1;
  inline bool has_pt_list() const;
  inline void clear_pt_list();
  static const int kPtListFieldNumber = 1;
  inline const ::std::string& pt_list() const;
  inline void set_pt_list(const ::std::string& value);
  inline void set_pt_list(const char* value);
  inline void set_pt_list(const char* value, size_t size);
  inline ::std::string* mutable_pt_list();
  inline ::std::string* release_pt_list();
  inline void set_allocated_pt_list(::std::string* pt_list);

  // required int32 trans = 3;
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 3;
  inline ::google::protobuf::int32 trans() const;
  inline void set_trans(::google::protobuf::int32 value);

  // required int32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateFilling)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pt_list();
  inline void clear_has_pt_list();
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pt_list_;
  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 trans_;
  ::google::protobuf::int32 color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateFilling* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateFilling : public ::google::protobuf::Message {
 public:
  sUpdateFilling();
  virtual ~sUpdateFilling();

  sUpdateFilling(const sUpdateFilling& from);

  inline sUpdateFilling& operator=(const sUpdateFilling& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateFilling& default_instance();

  void Swap(sUpdateFilling* other);

  // implements Message ----------------------------------------------

  sUpdateFilling* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateFilling& from);
  void MergeFrom(const sUpdateFilling& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 4;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 4;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required string pt_list = 1;
  inline bool has_pt_list() const;
  inline void clear_pt_list();
  static const int kPtListFieldNumber = 1;
  inline const ::std::string& pt_list() const;
  inline void set_pt_list(const ::std::string& value);
  inline void set_pt_list(const char* value);
  inline void set_pt_list(const char* value, size_t size);
  inline ::std::string* mutable_pt_list();
  inline ::std::string* release_pt_list();
  inline void set_allocated_pt_list(::std::string* pt_list);

  // required int32 trans = 3;
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 3;
  inline ::google::protobuf::int32 trans() const;
  inline void set_trans(::google::protobuf::int32 value);

  // required int32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateFilling)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pt_list();
  inline void clear_has_pt_list();
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pt_list_;
  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 trans_;
  ::google::protobuf::int32 color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateFilling* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateStamp : public ::google::protobuf::Message {
 public:
  cUpdateStamp();
  virtual ~cUpdateStamp();

  cUpdateStamp(const cUpdateStamp& from);

  inline cUpdateStamp& operator=(const cUpdateStamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateStamp& default_instance();

  void Swap(cUpdateStamp* other);

  // implements Message ----------------------------------------------

  cUpdateStamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateStamp& from);
  void MergeFrom(const cUpdateStamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 4;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 4;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pt_x = 2;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 2;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 3;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 3;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:cUpdateStamp)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateStamp* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateStamp : public ::google::protobuf::Message {
 public:
  sUpdateStamp();
  virtual ~sUpdateStamp();

  sUpdateStamp(const sUpdateStamp& from);

  inline sUpdateStamp& operator=(const sUpdateStamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateStamp& default_instance();

  void Swap(sUpdateStamp* other);

  // implements Message ----------------------------------------------

  sUpdateStamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateStamp& from);
  void MergeFrom(const sUpdateStamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 4;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 4;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pt_x = 2;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 2;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 3;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 3;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:sUpdateStamp)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateStamp* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateFillPic : public ::google::protobuf::Message {
 public:
  cUpdateFillPic();
  virtual ~cUpdateFillPic();

  cUpdateFillPic(const cUpdateFillPic& from);

  inline cUpdateFillPic& operator=(const cUpdateFillPic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateFillPic& default_instance();

  void Swap(cUpdateFillPic* other);

  // implements Message ----------------------------------------------

  cUpdateFillPic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateFillPic& from);
  void MergeFrom(const cUpdateFillPic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 4;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 4;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pt_x = 2;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 2;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 3;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 3;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:cUpdateFillPic)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateFillPic* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateFillPic : public ::google::protobuf::Message {
 public:
  sUpdateFillPic();
  virtual ~sUpdateFillPic();

  sUpdateFillPic(const sUpdateFillPic& from);

  inline sUpdateFillPic& operator=(const sUpdateFillPic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateFillPic& default_instance();

  void Swap(sUpdateFillPic* other);

  // implements Message ----------------------------------------------

  sUpdateFillPic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateFillPic& from);
  void MergeFrom(const sUpdateFillPic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 4;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 4;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pt_x = 2;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 2;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 3;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 3;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:sUpdateFillPic)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateFillPic* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateMutex : public ::google::protobuf::Message {
 public:
  cUpdateMutex();
  virtual ~cUpdateMutex();

  cUpdateMutex(const cUpdateMutex& from);

  inline cUpdateMutex& operator=(const cUpdateMutex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateMutex& default_instance();

  void Swap(cUpdateMutex* other);

  // implements Message ----------------------------------------------

  cUpdateMutex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateMutex& from);
  void MergeFrom(const cUpdateMutex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 3;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 3;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required .mutex_status ms = 1 [default = MS_LOCK];
  inline bool has_ms() const;
  inline void clear_ms();
  static const int kMsFieldNumber = 1;
  inline ::mutex_status ms() const;
  inline void set_ms(::mutex_status value);

  // required int32 lock_id = 2;
  inline bool has_lock_id() const;
  inline void clear_lock_id();
  static const int kLockIdFieldNumber = 2;
  inline ::google::protobuf::int32 lock_id() const;
  inline void set_lock_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateMutex)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_ms();
  inline void clear_has_ms();
  inline void set_has_lock_id();
  inline void clear_has_lock_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  int ms_;
  ::google::protobuf::int32 lock_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateMutex* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateMutex : public ::google::protobuf::Message {
 public:
  sUpdateMutex();
  virtual ~sUpdateMutex();

  sUpdateMutex(const sUpdateMutex& from);

  inline sUpdateMutex& operator=(const sUpdateMutex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateMutex& default_instance();

  void Swap(sUpdateMutex* other);

  // implements Message ----------------------------------------------

  sUpdateMutex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateMutex& from);
  void MergeFrom(const sUpdateMutex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 3;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 3;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 lock_id = 2;
  inline bool has_lock_id() const;
  inline void clear_lock_id();
  static const int kLockIdFieldNumber = 2;
  inline ::google::protobuf::int32 lock_id() const;
  inline void set_lock_id(::google::protobuf::int32 value);

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .mutex_status ms = 4 [default = MS_LOCK];
  inline bool has_ms() const;
  inline void clear_ms();
  static const int kMsFieldNumber = 4;
  inline ::mutex_status ms() const;
  inline void set_ms(::mutex_status value);

  // @@protoc_insertion_point(class_scope:sUpdateMutex)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_lock_id();
  inline void clear_has_lock_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ms();
  inline void clear_has_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 lock_id_;
  ::google::protobuf::int32 result_;
  int ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateMutex* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateCollage : public ::google::protobuf::Message {
 public:
  cUpdateCollage();
  virtual ~cUpdateCollage();

  cUpdateCollage(const cUpdateCollage& from);

  inline cUpdateCollage& operator=(const cUpdateCollage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateCollage& default_instance();

  void Swap(cUpdateCollage* other);

  // implements Message ----------------------------------------------

  cUpdateCollage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateCollage& from);
  void MergeFrom(const cUpdateCollage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 10;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 10;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 id = 9;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 9;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required int32 pic_type = 2;
  inline bool has_pic_type() const;
  inline void clear_pic_type();
  static const int kPicTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pic_type() const;
  inline void set_pic_type(::google::protobuf::int32 value);

  // required string pic_scale = 3;
  inline bool has_pic_scale() const;
  inline void clear_pic_scale();
  static const int kPicScaleFieldNumber = 3;
  inline const ::std::string& pic_scale() const;
  inline void set_pic_scale(const ::std::string& value);
  inline void set_pic_scale(const char* value);
  inline void set_pic_scale(const char* value, size_t size);
  inline ::std::string* mutable_pic_scale();
  inline ::std::string* release_pic_scale();
  inline void set_allocated_pic_scale(::std::string* pic_scale);

  // required string pic_rotation = 4;
  inline bool has_pic_rotation() const;
  inline void clear_pic_rotation();
  static const int kPicRotationFieldNumber = 4;
  inline const ::std::string& pic_rotation() const;
  inline void set_pic_rotation(const ::std::string& value);
  inline void set_pic_rotation(const char* value);
  inline void set_pic_rotation(const char* value, size_t size);
  inline ::std::string* mutable_pic_rotation();
  inline ::std::string* release_pic_rotation();
  inline void set_allocated_pic_rotation(::std::string* pic_rotation);

  // required string pt_x = 5;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 5;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 6;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 6;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required int32 layer = 7;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 7;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // required int32 op_type = 8;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 8;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateCollage)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pic_type();
  inline void clear_has_pic_type();
  inline void set_has_pic_scale();
  inline void clear_has_pic_scale();
  inline void set_has_pic_rotation();
  inline void clear_has_pic_rotation();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_op_type();
  inline void clear_has_op_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 id_;
  ::std::string* pic_res_;
  ::std::string* pic_scale_;
  ::std::string* pic_rotation_;
  ::google::protobuf::int32 pic_type_;
  ::google::protobuf::int32 layer_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 op_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateCollage* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateCollage : public ::google::protobuf::Message {
 public:
  sUpdateCollage();
  virtual ~sUpdateCollage();

  sUpdateCollage(const sUpdateCollage& from);

  inline sUpdateCollage& operator=(const sUpdateCollage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateCollage& default_instance();

  void Swap(sUpdateCollage* other);

  // implements Message ----------------------------------------------

  sUpdateCollage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateCollage& from);
  void MergeFrom(const sUpdateCollage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 10;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 10;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 id = 9;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 9;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required int32 pic_type = 2;
  inline bool has_pic_type() const;
  inline void clear_pic_type();
  static const int kPicTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pic_type() const;
  inline void set_pic_type(::google::protobuf::int32 value);

  // required string pic_scale = 3;
  inline bool has_pic_scale() const;
  inline void clear_pic_scale();
  static const int kPicScaleFieldNumber = 3;
  inline const ::std::string& pic_scale() const;
  inline void set_pic_scale(const ::std::string& value);
  inline void set_pic_scale(const char* value);
  inline void set_pic_scale(const char* value, size_t size);
  inline ::std::string* mutable_pic_scale();
  inline ::std::string* release_pic_scale();
  inline void set_allocated_pic_scale(::std::string* pic_scale);

  // required string pic_rotation = 4;
  inline bool has_pic_rotation() const;
  inline void clear_pic_rotation();
  static const int kPicRotationFieldNumber = 4;
  inline const ::std::string& pic_rotation() const;
  inline void set_pic_rotation(const ::std::string& value);
  inline void set_pic_rotation(const char* value);
  inline void set_pic_rotation(const char* value, size_t size);
  inline ::std::string* mutable_pic_rotation();
  inline ::std::string* release_pic_rotation();
  inline void set_allocated_pic_rotation(::std::string* pic_rotation);

  // required string pt_x = 5;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 5;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 6;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 6;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required int32 layer = 7;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 7;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // required int32 op_type = 8;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 8;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateCollage)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pic_type();
  inline void clear_has_pic_type();
  inline void set_has_pic_scale();
  inline void clear_has_pic_scale();
  inline void set_has_pic_rotation();
  inline void clear_has_pic_rotation();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_op_type();
  inline void clear_has_op_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 id_;
  ::std::string* pic_res_;
  ::std::string* pic_scale_;
  ::std::string* pic_rotation_;
  ::google::protobuf::int32 pic_type_;
  ::google::protobuf::int32 layer_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 op_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateCollage* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateWord : public ::google::protobuf::Message {
 public:
  cUpdateWord();
  virtual ~cUpdateWord();

  cUpdateWord(const cUpdateWord& from);

  inline cUpdateWord& operator=(const cUpdateWord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateWord& default_instance();

  void Swap(cUpdateWord* other);

  // implements Message ----------------------------------------------

  cUpdateWord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateWord& from);
  void MergeFrom(const cUpdateWord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required int32 color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // required int32 font = 5;
  inline bool has_font() const;
  inline void clear_font();
  static const int kFontFieldNumber = 5;
  inline ::google::protobuf::int32 font() const;
  inline void set_font(::google::protobuf::int32 value);

  // required int32 effect = 6;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 6;
  inline ::google::protobuf::int32 effect() const;
  inline void set_effect(::google::protobuf::int32 value);

  // required string pos_x = 7;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 7;
  inline const ::std::string& pos_x() const;
  inline void set_pos_x(const ::std::string& value);
  inline void set_pos_x(const char* value);
  inline void set_pos_x(const char* value, size_t size);
  inline ::std::string* mutable_pos_x();
  inline ::std::string* release_pos_x();
  inline void set_allocated_pos_x(::std::string* pos_x);

  // required string pos_y = 8;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 8;
  inline const ::std::string& pos_y() const;
  inline void set_pos_y(const ::std::string& value);
  inline void set_pos_y(const char* value);
  inline void set_pos_y(const char* value, size_t size);
  inline ::std::string* mutable_pos_y();
  inline ::std::string* release_pos_y();
  inline void set_allocated_pos_y(::std::string* pos_y);

  // required string retation = 9;
  inline bool has_retation() const;
  inline void clear_retation();
  static const int kRetationFieldNumber = 9;
  inline const ::std::string& retation() const;
  inline void set_retation(const ::std::string& value);
  inline void set_retation(const char* value);
  inline void set_retation(const char* value, size_t size);
  inline ::std::string* mutable_retation();
  inline ::std::string* release_retation();
  inline void set_allocated_retation(::std::string* retation);

  // required string scale = 10;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 10;
  inline const ::std::string& scale() const;
  inline void set_scale(const ::std::string& value);
  inline void set_scale(const char* value);
  inline void set_scale(const char* value, size_t size);
  inline ::std::string* mutable_scale();
  inline ::std::string* release_scale();
  inline void set_allocated_scale(::std::string* scale);

  // required int32 student_id = 11;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 11;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateWord)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_font();
  inline void clear_has_font();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_retation();
  inline void clear_has_retation();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::std::string* content_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 font_;
  ::google::protobuf::int32 effect_;
  ::std::string* pos_x_;
  ::std::string* pos_y_;
  ::std::string* retation_;
  ::std::string* scale_;
  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateWord* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateFrame : public ::google::protobuf::Message {
 public:
  cUpdateFrame();
  virtual ~cUpdateFrame();

  cUpdateFrame(const cUpdateFrame& from);

  inline cUpdateFrame& operator=(const cUpdateFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateFrame& default_instance();

  void Swap(cUpdateFrame* other);

  // implements Message ----------------------------------------------

  cUpdateFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateFrame& from);
  void MergeFrom(const cUpdateFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateFrame)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 frame_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateFrame* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateFrame : public ::google::protobuf::Message {
 public:
  sUpdateFrame();
  virtual ~sUpdateFrame();

  sUpdateFrame(const sUpdateFrame& from);

  inline sUpdateFrame& operator=(const sUpdateFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateFrame& default_instance();

  void Swap(sUpdateFrame* other);

  // implements Message ----------------------------------------------

  sUpdateFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateFrame& from);
  void MergeFrom(const sUpdateFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // required int32 frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateFrame)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;
  ::google::protobuf::int32 frame_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateFrame* default_instance_;
};
// -------------------------------------------------------------------

class cGetStudentDrawLog : public ::google::protobuf::Message {
 public:
  cGetStudentDrawLog();
  virtual ~cGetStudentDrawLog();

  cGetStudentDrawLog(const cGetStudentDrawLog& from);

  inline cGetStudentDrawLog& operator=(const cGetStudentDrawLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetStudentDrawLog& default_instance();

  void Swap(cGetStudentDrawLog* other);

  // implements Message ----------------------------------------------

  cGetStudentDrawLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetStudentDrawLog& from);
  void MergeFrom(const cGetStudentDrawLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetStudentDrawLog)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetStudentDrawLog* default_instance_;
};
// -------------------------------------------------------------------

class tst_book : public ::google::protobuf::Message {
 public:
  tst_book();
  virtual ~tst_book();

  tst_book(const tst_book& from);

  inline tst_book& operator=(const tst_book& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tst_book& default_instance();

  void Swap(tst_book* other);

  // implements Message ----------------------------------------------

  tst_book* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tst_book& from);
  void MergeFrom(const tst_book& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .bookNode book_node = 1;
  inline bool has_book_node() const;
  inline void clear_book_node();
  static const int kBookNodeFieldNumber = 1;
  inline const ::bookNode& book_node() const;
  inline ::bookNode* mutable_book_node();
  inline ::bookNode* release_book_node();
  inline void set_allocated_book_node(::bookNode* book_node);

  // @@protoc_insertion_point(class_scope:tst_book)
 private:
  inline void set_has_book_node();
  inline void clear_has_book_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::bookNode* book_node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static tst_book* default_instance_;
};
// ===================================================================


// ===================================================================

// cLogin

// required int32 type = 1;
inline bool cLogin::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cLogin::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cLogin::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cLogin::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 cLogin::type() const {
  return type_;
}
inline void cLogin::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string account = 2;
inline bool cLogin::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cLogin::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& cLogin::account() const {
  return *account_;
}
inline void cLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void cLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void cLogin::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* cLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cLogin::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passwd = 3;
inline bool cLogin::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cLogin::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cLogin::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cLogin::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& cLogin::passwd() const {
  return *passwd_;
}
inline void cLogin::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void cLogin::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void cLogin::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cLogin::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* cLogin::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cLogin::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sLogin

// optional bool result = 2;
inline bool sLogin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sLogin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sLogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sLogin::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sLogin::result() const {
  return result_;
}
inline void sLogin::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional bool enter_classroom = 3;
inline bool sLogin::has_enter_classroom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sLogin::set_has_enter_classroom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sLogin::clear_has_enter_classroom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sLogin::clear_enter_classroom() {
  enter_classroom_ = false;
  clear_has_enter_classroom();
}
inline bool sLogin::enter_classroom() const {
  return enter_classroom_;
}
inline void sLogin::set_enter_classroom(bool value) {
  set_has_enter_classroom();
  enter_classroom_ = value;
}

// optional int32 student_id = 1;
inline bool sLogin::has_student_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sLogin::set_has_student_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sLogin::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sLogin::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sLogin::student_id() const {
  return student_id_;
}
inline void sLogin::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 login_type = 4;
inline bool sLogin::has_login_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sLogin::set_has_login_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sLogin::clear_has_login_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sLogin::clear_login_type() {
  login_type_ = 0;
  clear_has_login_type();
}
inline ::google::protobuf::int32 sLogin::login_type() const {
  return login_type_;
}
inline void sLogin::set_login_type(::google::protobuf::int32 value) {
  set_has_login_type();
  login_type_ = value;
}

// -------------------------------------------------------------------

// cLogout

// -------------------------------------------------------------------

// sLogout

// required int32 login_type = 1;
inline bool sLogout::has_login_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sLogout::set_has_login_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sLogout::clear_has_login_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sLogout::clear_login_type() {
  login_type_ = 0;
  clear_has_login_type();
}
inline ::google::protobuf::int32 sLogout::login_type() const {
  return login_type_;
}
inline void sLogout::set_login_type(::google::protobuf::int32 value) {
  set_has_login_type();
  login_type_ = value;
}

// required int32 id = 2;
inline bool sLogout::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sLogout::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sLogout::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sLogout::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sLogout::id() const {
  return id_;
}
inline void sLogout::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// cGetFuncList

// -------------------------------------------------------------------

// FuncNode

// required int32 id = 1;
inline bool FuncNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FuncNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FuncNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FuncNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FuncNode::id() const {
  return id_;
}
inline void FuncNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool FuncNode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FuncNode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FuncNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FuncNode::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FuncNode::name() const {
  return *name_;
}
inline void FuncNode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FuncNode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FuncNode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FuncNode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FuncNode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FuncNode::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string res_path = 3;
inline bool FuncNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FuncNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FuncNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FuncNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& FuncNode::res_path() const {
  return *res_path_;
}
inline void FuncNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void FuncNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void FuncNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FuncNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* FuncNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FuncNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetFuncList

// repeated .FuncNode func_list = 1;
inline int sGetFuncList::func_list_size() const {
  return func_list_.size();
}
inline void sGetFuncList::clear_func_list() {
  func_list_.Clear();
}
inline const ::FuncNode& sGetFuncList::func_list(int index) const {
  return func_list_.Get(index);
}
inline ::FuncNode* sGetFuncList::mutable_func_list(int index) {
  return func_list_.Mutable(index);
}
inline ::FuncNode* sGetFuncList::add_func_list() {
  return func_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FuncNode >&
sGetFuncList::func_list() const {
  return func_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::FuncNode >*
sGetFuncList::mutable_func_list() {
  return &func_list_;
}

// -------------------------------------------------------------------

// cSetFunc

// required int32 func_type = 1;
inline bool cSetFunc::has_func_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSetFunc::set_has_func_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSetFunc::clear_has_func_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSetFunc::clear_func_type() {
  func_type_ = 0;
  clear_has_func_type();
}
inline ::google::protobuf::int32 cSetFunc::func_type() const {
  return func_type_;
}
inline void cSetFunc::set_func_type(::google::protobuf::int32 value) {
  set_has_func_type();
  func_type_ = value;
}

// -------------------------------------------------------------------

// sSetFunc

// optional bool result = 1;
inline bool sSetFunc::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSetFunc::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSetFunc::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSetFunc::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sSetFunc::result() const {
  return result_;
}
inline void sSetFunc::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// sGetClassroomStatus

// required .classroom_status cs = 1 [default = CS_INVALIED];
inline bool sGetClassroomStatus::has_cs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetClassroomStatus::set_has_cs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetClassroomStatus::clear_has_cs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetClassroomStatus::clear_cs() {
  cs_ = 1;
  clear_has_cs();
}
inline ::classroom_status sGetClassroomStatus::cs() const {
  return static_cast< ::classroom_status >(cs_);
}
inline void sGetClassroomStatus::set_cs(::classroom_status value) {
  assert(::classroom_status_IsValid(value));
  set_has_cs();
  cs_ = value;
}

// -------------------------------------------------------------------

// sGetClassroomInfo

// required int32 class_id = 1;
inline bool sGetClassroomInfo::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetClassroomInfo::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetClassroomInfo::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetClassroomInfo::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 sGetClassroomInfo::class_id() const {
  return class_id_;
}
inline void sGetClassroomInfo::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required int32 grade_id = 2;
inline bool sGetClassroomInfo::has_grade_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetClassroomInfo::set_has_grade_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetClassroomInfo::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetClassroomInfo::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 sGetClassroomInfo::grade_id() const {
  return grade_id_;
}
inline void sGetClassroomInfo::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// -------------------------------------------------------------------

// cGetSchoolAccountList

// required int32 school_id = 1;
inline bool cGetSchoolAccountList::has_school_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetSchoolAccountList::set_has_school_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetSchoolAccountList::clear_has_school_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetSchoolAccountList::clear_school_id() {
  school_id_ = 0;
  clear_has_school_id();
}
inline ::google::protobuf::int32 cGetSchoolAccountList::school_id() const {
  return school_id_;
}
inline void cGetSchoolAccountList::set_school_id(::google::protobuf::int32 value) {
  set_has_school_id();
  school_id_ = value;
}

// -------------------------------------------------------------------

// AccountNode

// optional string account = 1;
inline bool AccountNode::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountNode::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountNode::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountNode::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountNode::account() const {
  return *account_;
}
inline void AccountNode::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountNode::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountNode::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountNode::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* AccountNode::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountNode::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .LoginType user_type = 2;
inline bool AccountNode::has_user_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountNode::set_has_user_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountNode::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountNode::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::LoginType AccountNode::user_type() const {
  return static_cast< ::LoginType >(user_type_);
}
inline void AccountNode::set_user_type(::LoginType value) {
  assert(::LoginType_IsValid(value));
  set_has_user_type();
  user_type_ = value;
}

// -------------------------------------------------------------------

// sGetSchoolAccountList

// repeated .AccountNode account_list = 1;
inline int sGetSchoolAccountList::account_list_size() const {
  return account_list_.size();
}
inline void sGetSchoolAccountList::clear_account_list() {
  account_list_.Clear();
}
inline const ::AccountNode& sGetSchoolAccountList::account_list(int index) const {
  return account_list_.Get(index);
}
inline ::AccountNode* sGetSchoolAccountList::mutable_account_list(int index) {
  return account_list_.Mutable(index);
}
inline ::AccountNode* sGetSchoolAccountList::add_account_list() {
  return account_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AccountNode >&
sGetSchoolAccountList::account_list() const {
  return account_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AccountNode >*
sGetSchoolAccountList::mutable_account_list() {
  return &account_list_;
}

// -------------------------------------------------------------------

// cGetGradeList

// required int32 content = 1;
inline bool cGetGradeList::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetGradeList::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetGradeList::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetGradeList::clear_content() {
  content_ = 0;
  clear_has_content();
}
inline ::google::protobuf::int32 cGetGradeList::content() const {
  return content_;
}
inline void cGetGradeList::set_content(::google::protobuf::int32 value) {
  set_has_content();
  content_ = value;
}

// -------------------------------------------------------------------

// sGetGradeList

// repeated .ClassListNode grade_list = 1;
inline int sGetGradeList::grade_list_size() const {
  return grade_list_.size();
}
inline void sGetGradeList::clear_grade_list() {
  grade_list_.Clear();
}
inline const ::ClassListNode& sGetGradeList::grade_list(int index) const {
  return grade_list_.Get(index);
}
inline ::ClassListNode* sGetGradeList::mutable_grade_list(int index) {
  return grade_list_.Mutable(index);
}
inline ::ClassListNode* sGetGradeList::add_grade_list() {
  return grade_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
sGetGradeList::grade_list() const {
  return grade_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
sGetGradeList::mutable_grade_list() {
  return &grade_list_;
}

// -------------------------------------------------------------------

// cGetCourseList

// required int32 grade_id = 1;
inline bool cGetCourseList::has_grade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetCourseList::set_has_grade_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetCourseList::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetCourseList::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 cGetCourseList::grade_id() const {
  return grade_id_;
}
inline void cGetCourseList::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// -------------------------------------------------------------------

// CourseNode

// required int32 course_id = 1;
inline bool CourseNode::has_course_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CourseNode::set_has_course_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CourseNode::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CourseNode::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 CourseNode::course_id() const {
  return course_id_;
}
inline void CourseNode::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// required string course_name = 2;
inline bool CourseNode::has_course_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CourseNode::set_has_course_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CourseNode::clear_has_course_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CourseNode::clear_course_name() {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    course_name_->clear();
  }
  clear_has_course_name();
}
inline const ::std::string& CourseNode::course_name() const {
  return *course_name_;
}
inline void CourseNode::set_course_name(const ::std::string& value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void CourseNode::set_course_name(const char* value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void CourseNode::set_course_name(const char* value, size_t size) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CourseNode::mutable_course_name() {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  return course_name_;
}
inline ::std::string* CourseNode::release_course_name() {
  clear_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_name_;
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CourseNode::set_allocated_course_name(::std::string* course_name) {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    delete course_name_;
  }
  if (course_name) {
    set_has_course_name();
    course_name_ = course_name;
  } else {
    clear_has_course_name();
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 grade_id = 3;
inline bool CourseNode::has_grade_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CourseNode::set_has_grade_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CourseNode::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CourseNode::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 CourseNode::grade_id() const {
  return grade_id_;
}
inline void CourseNode::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// optional int32 language = 4;
inline bool CourseNode::has_language() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CourseNode::set_has_language() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CourseNode::clear_has_language() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CourseNode::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 CourseNode::language() const {
  return language_;
}
inline void CourseNode::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// optional int32 art = 5;
inline bool CourseNode::has_art() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CourseNode::set_has_art() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CourseNode::clear_has_art() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CourseNode::clear_art() {
  art_ = 0;
  clear_has_art();
}
inline ::google::protobuf::int32 CourseNode::art() const {
  return art_;
}
inline void CourseNode::set_art(::google::protobuf::int32 value) {
  set_has_art();
  art_ = value;
}

// optional int32 community = 6;
inline bool CourseNode::has_community() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CourseNode::set_has_community() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CourseNode::clear_has_community() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CourseNode::clear_community() {
  community_ = 0;
  clear_has_community();
}
inline ::google::protobuf::int32 CourseNode::community() const {
  return community_;
}
inline void CourseNode::set_community(::google::protobuf::int32 value) {
  set_has_community();
  community_ = value;
}

// optional int32 health = 7;
inline bool CourseNode::has_health() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CourseNode::set_has_health() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CourseNode::clear_has_health() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CourseNode::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 CourseNode::health() const {
  return health_;
}
inline void CourseNode::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// optional int32 science = 8;
inline bool CourseNode::has_science() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CourseNode::set_has_science() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CourseNode::clear_has_science() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CourseNode::clear_science() {
  science_ = 0;
  clear_has_science();
}
inline ::google::protobuf::int32 CourseNode::science() const {
  return science_;
}
inline void CourseNode::set_science(::google::protobuf::int32 value) {
  set_has_science();
  science_ = value;
}

// required string res_path = 9;
inline bool CourseNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CourseNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CourseNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CourseNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& CourseNode::res_path() const {
  return *res_path_;
}
inline void CourseNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void CourseNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void CourseNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CourseNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* CourseNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CourseNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .CourseType course_type = 10 [default = CT_INVALID];
inline bool CourseNode::has_course_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CourseNode::set_has_course_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CourseNode::clear_has_course_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CourseNode::clear_course_type() {
  course_type_ = 1;
  clear_has_course_type();
}
inline ::CourseType CourseNode::course_type() const {
  return static_cast< ::CourseType >(course_type_);
}
inline void CourseNode::set_course_type(::CourseType value) {
  assert(::CourseType_IsValid(value));
  set_has_course_type();
  course_type_ = value;
}

// optional string xml_path = 11;
inline bool CourseNode::has_xml_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CourseNode::set_has_xml_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CourseNode::clear_has_xml_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CourseNode::clear_xml_path() {
  if (xml_path_ != &::google::protobuf::internal::kEmptyString) {
    xml_path_->clear();
  }
  clear_has_xml_path();
}
inline const ::std::string& CourseNode::xml_path() const {
  return *xml_path_;
}
inline void CourseNode::set_xml_path(const ::std::string& value) {
  set_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    xml_path_ = new ::std::string;
  }
  xml_path_->assign(value);
}
inline void CourseNode::set_xml_path(const char* value) {
  set_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    xml_path_ = new ::std::string;
  }
  xml_path_->assign(value);
}
inline void CourseNode::set_xml_path(const char* value, size_t size) {
  set_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    xml_path_ = new ::std::string;
  }
  xml_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CourseNode::mutable_xml_path() {
  set_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    xml_path_ = new ::std::string;
  }
  return xml_path_;
}
inline ::std::string* CourseNode::release_xml_path() {
  clear_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xml_path_;
    xml_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CourseNode::set_allocated_xml_path(::std::string* xml_path) {
  if (xml_path_ != &::google::protobuf::internal::kEmptyString) {
    delete xml_path_;
  }
  if (xml_path) {
    set_has_xml_path();
    xml_path_ = xml_path;
  } else {
    clear_has_xml_path();
    xml_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 fac = 12;
inline bool CourseNode::has_fac() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CourseNode::set_has_fac() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CourseNode::clear_has_fac() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CourseNode::clear_fac() {
  fac_ = 0;
  clear_has_fac();
}
inline ::google::protobuf::int32 CourseNode::fac() const {
  return fac_;
}
inline void CourseNode::set_fac(::google::protobuf::int32 value) {
  set_has_fac();
  fac_ = value;
}

// required int32 puzzle = 13;
inline bool CourseNode::has_puzzle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CourseNode::set_has_puzzle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CourseNode::clear_has_puzzle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CourseNode::clear_puzzle() {
  puzzle_ = 0;
  clear_has_puzzle();
}
inline ::google::protobuf::int32 CourseNode::puzzle() const {
  return puzzle_;
}
inline void CourseNode::set_puzzle(::google::protobuf::int32 value) {
  set_has_puzzle();
  puzzle_ = value;
}

// required int32 fream = 14;
inline bool CourseNode::has_fream() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CourseNode::set_has_fream() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CourseNode::clear_has_fream() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CourseNode::clear_fream() {
  fream_ = 0;
  clear_has_fream();
}
inline ::google::protobuf::int32 CourseNode::fream() const {
  return fream_;
}
inline void CourseNode::set_fream(::google::protobuf::int32 value) {
  set_has_fream();
  fream_ = value;
}

// required int32 voice = 15;
inline bool CourseNode::has_voice() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CourseNode::set_has_voice() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CourseNode::clear_has_voice() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CourseNode::clear_voice() {
  voice_ = 0;
  clear_has_voice();
}
inline ::google::protobuf::int32 CourseNode::voice() const {
  return voice_;
}
inline void CourseNode::set_voice(::google::protobuf::int32 value) {
  set_has_voice();
  voice_ = value;
}

// required int32 world = 16;
inline bool CourseNode::has_world() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CourseNode::set_has_world() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CourseNode::clear_has_world() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CourseNode::clear_world() {
  world_ = 0;
  clear_has_world();
}
inline ::google::protobuf::int32 CourseNode::world() const {
  return world_;
}
inline void CourseNode::set_world(::google::protobuf::int32 value) {
  set_has_world();
  world_ = value;
}

// required string icon_path = 17;
inline bool CourseNode::has_icon_path() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CourseNode::set_has_icon_path() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CourseNode::clear_has_icon_path() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CourseNode::clear_icon_path() {
  if (icon_path_ != &::google::protobuf::internal::kEmptyString) {
    icon_path_->clear();
  }
  clear_has_icon_path();
}
inline const ::std::string& CourseNode::icon_path() const {
  return *icon_path_;
}
inline void CourseNode::set_icon_path(const ::std::string& value) {
  set_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    icon_path_ = new ::std::string;
  }
  icon_path_->assign(value);
}
inline void CourseNode::set_icon_path(const char* value) {
  set_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    icon_path_ = new ::std::string;
  }
  icon_path_->assign(value);
}
inline void CourseNode::set_icon_path(const char* value, size_t size) {
  set_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    icon_path_ = new ::std::string;
  }
  icon_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CourseNode::mutable_icon_path() {
  set_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    icon_path_ = new ::std::string;
  }
  return icon_path_;
}
inline ::std::string* CourseNode::release_icon_path() {
  clear_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_path_;
    icon_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CourseNode::set_allocated_icon_path(::std::string* icon_path) {
  if (icon_path_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_path_;
  }
  if (icon_path) {
    set_has_icon_path();
    icon_path_ = icon_path;
  } else {
    clear_has_icon_path();
    icon_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetCourseList

// repeated .CourseNode course_list = 1;
inline int sGetCourseList::course_list_size() const {
  return course_list_.size();
}
inline void sGetCourseList::clear_course_list() {
  course_list_.Clear();
}
inline const ::CourseNode& sGetCourseList::course_list(int index) const {
  return course_list_.Get(index);
}
inline ::CourseNode* sGetCourseList::mutable_course_list(int index) {
  return course_list_.Mutable(index);
}
inline ::CourseNode* sGetCourseList::add_course_list() {
  return course_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CourseNode >&
sGetCourseList::course_list() const {
  return course_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CourseNode >*
sGetCourseList::mutable_course_list() {
  return &course_list_;
}

// -------------------------------------------------------------------

// cGetContent

// -------------------------------------------------------------------

// sGetContent

// required int32 class_id = 1;
inline bool sGetContent::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetContent::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetContent::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetContent::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 sGetContent::class_id() const {
  return class_id_;
}
inline void sGetContent::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required int32 classroom_id = 2;
inline bool sGetContent::has_classroom_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetContent::set_has_classroom_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetContent::clear_has_classroom_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetContent::clear_classroom_id() {
  classroom_id_ = 0;
  clear_has_classroom_id();
}
inline ::google::protobuf::int32 sGetContent::classroom_id() const {
  return classroom_id_;
}
inline void sGetContent::set_classroom_id(::google::protobuf::int32 value) {
  set_has_classroom_id();
  classroom_id_ = value;
}

// repeated .ContentNode course_list = 3;
inline int sGetContent::course_list_size() const {
  return course_list_.size();
}
inline void sGetContent::clear_course_list() {
  course_list_.Clear();
}
inline const ::ContentNode& sGetContent::course_list(int index) const {
  return course_list_.Get(index);
}
inline ::ContentNode* sGetContent::mutable_course_list(int index) {
  return course_list_.Mutable(index);
}
inline ::ContentNode* sGetContent::add_course_list() {
  return course_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContentNode >&
sGetContent::course_list() const {
  return course_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContentNode >*
sGetContent::mutable_course_list() {
  return &course_list_;
}

// -------------------------------------------------------------------

// cGetClassList

// required int32 grade_id = 1;
inline bool cGetClassList::has_grade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetClassList::set_has_grade_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetClassList::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetClassList::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 cGetClassList::grade_id() const {
  return grade_id_;
}
inline void cGetClassList::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// -------------------------------------------------------------------

// ClassListNode

// required int32 id = 1;
inline bool ClassListNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassListNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassListNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassListNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClassListNode::id() const {
  return id_;
}
inline void ClassListNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool ClassListNode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassListNode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassListNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassListNode::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClassListNode::name() const {
  return *name_;
}
inline void ClassListNode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClassListNode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClassListNode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassListNode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ClassListNode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClassListNode::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string res_path = 3;
inline bool ClassListNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassListNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassListNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassListNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& ClassListNode::res_path() const {
  return *res_path_;
}
inline void ClassListNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void ClassListNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void ClassListNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassListNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* ClassListNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClassListNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetClassList

// repeated .ClassListNode class_list = 1;
inline int sGetClassList::class_list_size() const {
  return class_list_.size();
}
inline void sGetClassList::clear_class_list() {
  class_list_.Clear();
}
inline const ::ClassListNode& sGetClassList::class_list(int index) const {
  return class_list_.Get(index);
}
inline ::ClassListNode* sGetClassList::mutable_class_list(int index) {
  return class_list_.Mutable(index);
}
inline ::ClassListNode* sGetClassList::add_class_list() {
  return class_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
sGetClassList::class_list() const {
  return class_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
sGetClassList::mutable_class_list() {
  return &class_list_;
}

// -------------------------------------------------------------------

// cGetClassRoomList

// -------------------------------------------------------------------

// sGetClassRoomList

// repeated .ClassListNode classroom_list = 1;
inline int sGetClassRoomList::classroom_list_size() const {
  return classroom_list_.size();
}
inline void sGetClassRoomList::clear_classroom_list() {
  classroom_list_.Clear();
}
inline const ::ClassListNode& sGetClassRoomList::classroom_list(int index) const {
  return classroom_list_.Get(index);
}
inline ::ClassListNode* sGetClassRoomList::mutable_classroom_list(int index) {
  return classroom_list_.Mutable(index);
}
inline ::ClassListNode* sGetClassRoomList::add_classroom_list() {
  return classroom_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
sGetClassRoomList::classroom_list() const {
  return classroom_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
sGetClassRoomList::mutable_classroom_list() {
  return &classroom_list_;
}

// -------------------------------------------------------------------

// ContentNode

// required int32 course_id = 1;
inline bool ContentNode::has_course_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentNode::set_has_course_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentNode::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentNode::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 ContentNode::course_id() const {
  return course_id_;
}
inline void ContentNode::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// optional string course_xml = 2;
inline bool ContentNode::has_course_xml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentNode::set_has_course_xml() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentNode::clear_has_course_xml() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentNode::clear_course_xml() {
  if (course_xml_ != &::google::protobuf::internal::kEmptyString) {
    course_xml_->clear();
  }
  clear_has_course_xml();
}
inline const ::std::string& ContentNode::course_xml() const {
  return *course_xml_;
}
inline void ContentNode::set_course_xml(const ::std::string& value) {
  set_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    course_xml_ = new ::std::string;
  }
  course_xml_->assign(value);
}
inline void ContentNode::set_course_xml(const char* value) {
  set_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    course_xml_ = new ::std::string;
  }
  course_xml_->assign(value);
}
inline void ContentNode::set_course_xml(const char* value, size_t size) {
  set_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    course_xml_ = new ::std::string;
  }
  course_xml_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentNode::mutable_course_xml() {
  set_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    course_xml_ = new ::std::string;
  }
  return course_xml_;
}
inline ::std::string* ContentNode::release_course_xml() {
  clear_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_xml_;
    course_xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentNode::set_allocated_course_xml(::std::string* course_xml) {
  if (course_xml_ != &::google::protobuf::internal::kEmptyString) {
    delete course_xml_;
  }
  if (course_xml) {
    set_has_course_xml();
    course_xml_ = course_xml;
  } else {
    clear_has_course_xml();
    course_xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 art = 3;
inline bool ContentNode::has_art() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentNode::set_has_art() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentNode::clear_has_art() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentNode::clear_art() {
  art_ = 0;
  clear_has_art();
}
inline ::google::protobuf::int32 ContentNode::art() const {
  return art_;
}
inline void ContentNode::set_art(::google::protobuf::int32 value) {
  set_has_art();
  art_ = value;
}

// required int32 language = 4;
inline bool ContentNode::has_language() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentNode::set_has_language() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentNode::clear_has_language() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentNode::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 ContentNode::language() const {
  return language_;
}
inline void ContentNode::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// required int32 community = 5;
inline bool ContentNode::has_community() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentNode::set_has_community() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentNode::clear_has_community() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentNode::clear_community() {
  community_ = 0;
  clear_has_community();
}
inline ::google::protobuf::int32 ContentNode::community() const {
  return community_;
}
inline void ContentNode::set_community(::google::protobuf::int32 value) {
  set_has_community();
  community_ = value;
}

// required int32 health = 6;
inline bool ContentNode::has_health() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContentNode::set_has_health() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContentNode::clear_has_health() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContentNode::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 ContentNode::health() const {
  return health_;
}
inline void ContentNode::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required int32 science = 7;
inline bool ContentNode::has_science() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContentNode::set_has_science() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContentNode::clear_has_science() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContentNode::clear_science() {
  science_ = 0;
  clear_has_science();
}
inline ::google::protobuf::int32 ContentNode::science() const {
  return science_;
}
inline void ContentNode::set_science(::google::protobuf::int32 value) {
  set_has_science();
  science_ = value;
}

// required string res_path = 8;
inline bool ContentNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContentNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContentNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContentNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& ContentNode::res_path() const {
  return *res_path_;
}
inline void ContentNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void ContentNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void ContentNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* ContentNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string course_name = 9;
inline bool ContentNode::has_course_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContentNode::set_has_course_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContentNode::clear_has_course_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContentNode::clear_course_name() {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    course_name_->clear();
  }
  clear_has_course_name();
}
inline const ::std::string& ContentNode::course_name() const {
  return *course_name_;
}
inline void ContentNode::set_course_name(const ::std::string& value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void ContentNode::set_course_name(const char* value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void ContentNode::set_course_name(const char* value, size_t size) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentNode::mutable_course_name() {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  return course_name_;
}
inline ::std::string* ContentNode::release_course_name() {
  clear_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_name_;
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentNode::set_allocated_course_name(::std::string* course_name) {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    delete course_name_;
  }
  if (course_name) {
    set_has_course_name();
    course_name_ = course_name;
  } else {
    clear_has_course_name();
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 course_type = 10;
inline bool ContentNode::has_course_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContentNode::set_has_course_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContentNode::clear_has_course_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContentNode::clear_course_type() {
  course_type_ = 0;
  clear_has_course_type();
}
inline ::google::protobuf::int32 ContentNode::course_type() const {
  return course_type_;
}
inline void ContentNode::set_course_type(::google::protobuf::int32 value) {
  set_has_course_type();
  course_type_ = value;
}

// optional string icon_path = 11;
inline bool ContentNode::has_icon_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContentNode::set_has_icon_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContentNode::clear_has_icon_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContentNode::clear_icon_path() {
  if (icon_path_ != &::google::protobuf::internal::kEmptyString) {
    icon_path_->clear();
  }
  clear_has_icon_path();
}
inline const ::std::string& ContentNode::icon_path() const {
  return *icon_path_;
}
inline void ContentNode::set_icon_path(const ::std::string& value) {
  set_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    icon_path_ = new ::std::string;
  }
  icon_path_->assign(value);
}
inline void ContentNode::set_icon_path(const char* value) {
  set_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    icon_path_ = new ::std::string;
  }
  icon_path_->assign(value);
}
inline void ContentNode::set_icon_path(const char* value, size_t size) {
  set_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    icon_path_ = new ::std::string;
  }
  icon_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentNode::mutable_icon_path() {
  set_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    icon_path_ = new ::std::string;
  }
  return icon_path_;
}
inline ::std::string* ContentNode::release_icon_path() {
  clear_has_icon_path();
  if (icon_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_path_;
    icon_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentNode::set_allocated_icon_path(::std::string* icon_path) {
  if (icon_path_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_path_;
  }
  if (icon_path) {
    set_has_icon_path();
    icon_path_ = icon_path;
  } else {
    clear_has_icon_path();
    icon_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cSetContent

// required int32 class_id = 1;
inline bool cSetContent::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSetContent::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSetContent::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSetContent::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 cSetContent::class_id() const {
  return class_id_;
}
inline void cSetContent::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required int32 classroom_id = 2;
inline bool cSetContent::has_classroom_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cSetContent::set_has_classroom_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cSetContent::clear_has_classroom_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cSetContent::clear_classroom_id() {
  classroom_id_ = 0;
  clear_has_classroom_id();
}
inline ::google::protobuf::int32 cSetContent::classroom_id() const {
  return classroom_id_;
}
inline void cSetContent::set_classroom_id(::google::protobuf::int32 value) {
  set_has_classroom_id();
  classroom_id_ = value;
}

// repeated .ContentNode course_list = 3;
inline int cSetContent::course_list_size() const {
  return course_list_.size();
}
inline void cSetContent::clear_course_list() {
  course_list_.Clear();
}
inline const ::ContentNode& cSetContent::course_list(int index) const {
  return course_list_.Get(index);
}
inline ::ContentNode* cSetContent::mutable_course_list(int index) {
  return course_list_.Mutable(index);
}
inline ::ContentNode* cSetContent::add_course_list() {
  return course_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContentNode >&
cSetContent::course_list() const {
  return course_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContentNode >*
cSetContent::mutable_course_list() {
  return &course_list_;
}

// optional int32 grade_id = 4;
inline bool cSetContent::has_grade_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cSetContent::set_has_grade_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cSetContent::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cSetContent::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 cSetContent::grade_id() const {
  return grade_id_;
}
inline void cSetContent::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// -------------------------------------------------------------------

// sSetContent

// optional bool result = 1;
inline bool sSetContent::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSetContent::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSetContent::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSetContent::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sSetContent::result() const {
  return result_;
}
inline void sSetContent::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// required string msg = 2;
inline bool sSetContent::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSetContent::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSetContent::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSetContent::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sSetContent::msg() const {
  return *msg_;
}
inline void sSetContent::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetContent::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetContent::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSetContent::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sSetContent::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSetContent::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CoursewareStatusNode

// required int32 course_id = 1;
inline bool CoursewareStatusNode::has_course_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoursewareStatusNode::set_has_course_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoursewareStatusNode::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoursewareStatusNode::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 CoursewareStatusNode::course_id() const {
  return course_id_;
}
inline void CoursewareStatusNode::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// optional int32 idx = 3;
inline bool CoursewareStatusNode::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CoursewareStatusNode::set_has_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CoursewareStatusNode::clear_has_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CoursewareStatusNode::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 CoursewareStatusNode::idx() const {
  return idx_;
}
inline void CoursewareStatusNode::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// required .courseware_status cs = 2 [default = CS_INVALID];
inline bool CoursewareStatusNode::has_cs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CoursewareStatusNode::set_has_cs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CoursewareStatusNode::clear_has_cs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CoursewareStatusNode::clear_cs() {
  cs_ = 1;
  clear_has_cs();
}
inline ::courseware_status CoursewareStatusNode::cs() const {
  return static_cast< ::courseware_status >(cs_);
}
inline void CoursewareStatusNode::set_cs(::courseware_status value) {
  assert(::courseware_status_IsValid(value));
  set_has_cs();
  cs_ = value;
}

// -------------------------------------------------------------------

// sCourseware

// optional int32 idx = 3;
inline bool sCourseware::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCourseware::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCourseware::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCourseware::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 sCourseware::idx() const {
  return idx_;
}
inline void sCourseware::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// required int32 course_id = 1;
inline bool sCourseware::has_course_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sCourseware::set_has_course_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sCourseware::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sCourseware::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 sCourseware::course_id() const {
  return course_id_;
}
inline void sCourseware::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// required .courseware_status cs = 2 [default = CS_INVALID];
inline bool sCourseware::has_cs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sCourseware::set_has_cs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sCourseware::clear_has_cs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sCourseware::clear_cs() {
  cs_ = 1;
  clear_has_cs();
}
inline ::courseware_status sCourseware::cs() const {
  return static_cast< ::courseware_status >(cs_);
}
inline void sCourseware::set_cs(::courseware_status value) {
  assert(::courseware_status_IsValid(value));
  set_has_cs();
  cs_ = value;
}

// optional string course_name = 4;
inline bool sCourseware::has_course_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sCourseware::set_has_course_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sCourseware::clear_has_course_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sCourseware::clear_course_name() {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    course_name_->clear();
  }
  clear_has_course_name();
}
inline const ::std::string& sCourseware::course_name() const {
  return *course_name_;
}
inline void sCourseware::set_course_name(const ::std::string& value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void sCourseware::set_course_name(const char* value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void sCourseware::set_course_name(const char* value, size_t size) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sCourseware::mutable_course_name() {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  return course_name_;
}
inline ::std::string* sCourseware::release_course_name() {
  clear_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_name_;
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sCourseware::set_allocated_course_name(::std::string* course_name) {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    delete course_name_;
  }
  if (course_name) {
    set_has_course_name();
    course_name_ = course_name;
  } else {
    clear_has_course_name();
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateCourseware

// optional int32 course_id = 1;
inline bool UpdateCourseware::has_course_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateCourseware::set_has_course_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateCourseware::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateCourseware::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 UpdateCourseware::course_id() const {
  return course_id_;
}
inline void UpdateCourseware::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// optional int32 student_id = 2;
inline bool UpdateCourseware::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateCourseware::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateCourseware::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateCourseware::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 UpdateCourseware::student_id() const {
  return student_id_;
}
inline void UpdateCourseware::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// cCourseOver

// optional int32 idx = 1;
inline bool cCourseOver::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cCourseOver::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cCourseOver::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cCourseOver::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 cCourseOver::idx() const {
  return idx_;
}
inline void cCourseOver::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// -------------------------------------------------------------------

// sGetCoursewareListStatus

// repeated .CoursewareStatusNode course_status_list = 1;
inline int sGetCoursewareListStatus::course_status_list_size() const {
  return course_status_list_.size();
}
inline void sGetCoursewareListStatus::clear_course_status_list() {
  course_status_list_.Clear();
}
inline const ::CoursewareStatusNode& sGetCoursewareListStatus::course_status_list(int index) const {
  return course_status_list_.Get(index);
}
inline ::CoursewareStatusNode* sGetCoursewareListStatus::mutable_course_status_list(int index) {
  return course_status_list_.Mutable(index);
}
inline ::CoursewareStatusNode* sGetCoursewareListStatus::add_course_status_list() {
  return course_status_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CoursewareStatusNode >&
sGetCoursewareListStatus::course_status_list() const {
  return course_status_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CoursewareStatusNode >*
sGetCoursewareListStatus::mutable_course_status_list() {
  return &course_status_list_;
}

// -------------------------------------------------------------------

// cGetClassInfo

// -------------------------------------------------------------------

// sGetClassInfo

// required int32 class_id = 1;
inline bool sGetClassInfo::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetClassInfo::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetClassInfo::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetClassInfo::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 sGetClassInfo::class_id() const {
  return class_id_;
}
inline void sGetClassInfo::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// -------------------------------------------------------------------

// cGetWhiteboardInfo

// -------------------------------------------------------------------

// sGetWhiteboardInfo

// required string whiteboard_num_ = 1;
inline bool sGetWhiteboardInfo::has_whiteboard_num_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetWhiteboardInfo::set_has_whiteboard_num_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetWhiteboardInfo::clear_has_whiteboard_num_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetWhiteboardInfo::clear_whiteboard_num_() {
  if (whiteboard_num__ != &::google::protobuf::internal::kEmptyString) {
    whiteboard_num__->clear();
  }
  clear_has_whiteboard_num_();
}
inline const ::std::string& sGetWhiteboardInfo::whiteboard_num_() const {
  return *whiteboard_num__;
}
inline void sGetWhiteboardInfo::set_whiteboard_num_(const ::std::string& value) {
  set_has_whiteboard_num_();
  if (whiteboard_num__ == &::google::protobuf::internal::kEmptyString) {
    whiteboard_num__ = new ::std::string;
  }
  whiteboard_num__->assign(value);
}
inline void sGetWhiteboardInfo::set_whiteboard_num_(const char* value) {
  set_has_whiteboard_num_();
  if (whiteboard_num__ == &::google::protobuf::internal::kEmptyString) {
    whiteboard_num__ = new ::std::string;
  }
  whiteboard_num__->assign(value);
}
inline void sGetWhiteboardInfo::set_whiteboard_num_(const char* value, size_t size) {
  set_has_whiteboard_num_();
  if (whiteboard_num__ == &::google::protobuf::internal::kEmptyString) {
    whiteboard_num__ = new ::std::string;
  }
  whiteboard_num__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetWhiteboardInfo::mutable_whiteboard_num_() {
  set_has_whiteboard_num_();
  if (whiteboard_num__ == &::google::protobuf::internal::kEmptyString) {
    whiteboard_num__ = new ::std::string;
  }
  return whiteboard_num__;
}
inline ::std::string* sGetWhiteboardInfo::release_whiteboard_num_() {
  clear_has_whiteboard_num_();
  if (whiteboard_num__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = whiteboard_num__;
    whiteboard_num__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetWhiteboardInfo::set_allocated_whiteboard_num_(::std::string* whiteboard_num_) {
  if (whiteboard_num__ != &::google::protobuf::internal::kEmptyString) {
    delete whiteboard_num__;
  }
  if (whiteboard_num_) {
    set_has_whiteboard_num_();
    whiteboard_num__ = whiteboard_num_;
  } else {
    clear_has_whiteboard_num_();
    whiteboard_num__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string classroom_name_ = 2;
inline bool sGetWhiteboardInfo::has_classroom_name_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetWhiteboardInfo::set_has_classroom_name_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetWhiteboardInfo::clear_has_classroom_name_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetWhiteboardInfo::clear_classroom_name_() {
  if (classroom_name__ != &::google::protobuf::internal::kEmptyString) {
    classroom_name__->clear();
  }
  clear_has_classroom_name_();
}
inline const ::std::string& sGetWhiteboardInfo::classroom_name_() const {
  return *classroom_name__;
}
inline void sGetWhiteboardInfo::set_classroom_name_(const ::std::string& value) {
  set_has_classroom_name_();
  if (classroom_name__ == &::google::protobuf::internal::kEmptyString) {
    classroom_name__ = new ::std::string;
  }
  classroom_name__->assign(value);
}
inline void sGetWhiteboardInfo::set_classroom_name_(const char* value) {
  set_has_classroom_name_();
  if (classroom_name__ == &::google::protobuf::internal::kEmptyString) {
    classroom_name__ = new ::std::string;
  }
  classroom_name__->assign(value);
}
inline void sGetWhiteboardInfo::set_classroom_name_(const char* value, size_t size) {
  set_has_classroom_name_();
  if (classroom_name__ == &::google::protobuf::internal::kEmptyString) {
    classroom_name__ = new ::std::string;
  }
  classroom_name__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetWhiteboardInfo::mutable_classroom_name_() {
  set_has_classroom_name_();
  if (classroom_name__ == &::google::protobuf::internal::kEmptyString) {
    classroom_name__ = new ::std::string;
  }
  return classroom_name__;
}
inline ::std::string* sGetWhiteboardInfo::release_classroom_name_() {
  clear_has_classroom_name_();
  if (classroom_name__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = classroom_name__;
    classroom_name__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetWhiteboardInfo::set_allocated_classroom_name_(::std::string* classroom_name_) {
  if (classroom_name__ != &::google::protobuf::internal::kEmptyString) {
    delete classroom_name__;
  }
  if (classroom_name_) {
    set_has_classroom_name_();
    classroom_name__ = classroom_name_;
  } else {
    clear_has_classroom_name_();
    classroom_name__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 classroom_id_ = 3;
inline bool sGetWhiteboardInfo::has_classroom_id_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetWhiteboardInfo::set_has_classroom_id_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetWhiteboardInfo::clear_has_classroom_id_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetWhiteboardInfo::clear_classroom_id_() {
  classroom_id__ = 0;
  clear_has_classroom_id_();
}
inline ::google::protobuf::int32 sGetWhiteboardInfo::classroom_id_() const {
  return classroom_id__;
}
inline void sGetWhiteboardInfo::set_classroom_id_(::google::protobuf::int32 value) {
  set_has_classroom_id_();
  classroom_id__ = value;
}

// required .FuncType functype_ = 4 [default = FT_INVALID];
inline bool sGetWhiteboardInfo::has_functype_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetWhiteboardInfo::set_has_functype_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetWhiteboardInfo::clear_has_functype_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetWhiteboardInfo::clear_functype_() {
  functype__ = 1;
  clear_has_functype_();
}
inline ::FuncType sGetWhiteboardInfo::functype_() const {
  return static_cast< ::FuncType >(functype__);
}
inline void sGetWhiteboardInfo::set_functype_(::FuncType value) {
  assert(::FuncType_IsValid(value));
  set_has_functype_();
  functype__ = value;
}

// required int32 id_ = 5;
inline bool sGetWhiteboardInfo::has_id_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGetWhiteboardInfo::set_has_id_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGetWhiteboardInfo::clear_has_id_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGetWhiteboardInfo::clear_id_() {
  id__ = 0;
  clear_has_id_();
}
inline ::google::protobuf::int32 sGetWhiteboardInfo::id_() const {
  return id__;
}
inline void sGetWhiteboardInfo::set_id_(::google::protobuf::int32 value) {
  set_has_id_();
  id__ = value;
}

// required int32 fd_ = 6;
inline bool sGetWhiteboardInfo::has_fd_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGetWhiteboardInfo::set_has_fd_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGetWhiteboardInfo::clear_has_fd_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGetWhiteboardInfo::clear_fd_() {
  fd__ = 0;
  clear_has_fd_();
}
inline ::google::protobuf::int32 sGetWhiteboardInfo::fd_() const {
  return fd__;
}
inline void sGetWhiteboardInfo::set_fd_(::google::protobuf::int32 value) {
  set_has_fd_();
  fd__ = value;
}

// required .user_status userstatus_ = 7 [default = US_INVALID];
inline bool sGetWhiteboardInfo::has_userstatus_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGetWhiteboardInfo::set_has_userstatus_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGetWhiteboardInfo::clear_has_userstatus_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGetWhiteboardInfo::clear_userstatus_() {
  userstatus__ = 1;
  clear_has_userstatus_();
}
inline ::user_status sGetWhiteboardInfo::userstatus_() const {
  return static_cast< ::user_status >(userstatus__);
}
inline void sGetWhiteboardInfo::set_userstatus_(::user_status value) {
  assert(::user_status_IsValid(value));
  set_has_userstatus_();
  userstatus__ = value;
}

// required string account_ = 8;
inline bool sGetWhiteboardInfo::has_account_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGetWhiteboardInfo::set_has_account_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGetWhiteboardInfo::clear_has_account_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGetWhiteboardInfo::clear_account_() {
  if (account__ != &::google::protobuf::internal::kEmptyString) {
    account__->clear();
  }
  clear_has_account_();
}
inline const ::std::string& sGetWhiteboardInfo::account_() const {
  return *account__;
}
inline void sGetWhiteboardInfo::set_account_(const ::std::string& value) {
  set_has_account_();
  if (account__ == &::google::protobuf::internal::kEmptyString) {
    account__ = new ::std::string;
  }
  account__->assign(value);
}
inline void sGetWhiteboardInfo::set_account_(const char* value) {
  set_has_account_();
  if (account__ == &::google::protobuf::internal::kEmptyString) {
    account__ = new ::std::string;
  }
  account__->assign(value);
}
inline void sGetWhiteboardInfo::set_account_(const char* value, size_t size) {
  set_has_account_();
  if (account__ == &::google::protobuf::internal::kEmptyString) {
    account__ = new ::std::string;
  }
  account__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetWhiteboardInfo::mutable_account_() {
  set_has_account_();
  if (account__ == &::google::protobuf::internal::kEmptyString) {
    account__ = new ::std::string;
  }
  return account__;
}
inline ::std::string* sGetWhiteboardInfo::release_account_() {
  clear_has_account_();
  if (account__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account__;
    account__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetWhiteboardInfo::set_allocated_account_(::std::string* account_) {
  if (account__ != &::google::protobuf::internal::kEmptyString) {
    delete account__;
  }
  if (account_) {
    set_has_account_();
    account__ = account_;
  } else {
    clear_has_account_();
    account__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passwd_ = 9;
inline bool sGetWhiteboardInfo::has_passwd_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sGetWhiteboardInfo::set_has_passwd_() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sGetWhiteboardInfo::clear_has_passwd_() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sGetWhiteboardInfo::clear_passwd_() {
  if (passwd__ != &::google::protobuf::internal::kEmptyString) {
    passwd__->clear();
  }
  clear_has_passwd_();
}
inline const ::std::string& sGetWhiteboardInfo::passwd_() const {
  return *passwd__;
}
inline void sGetWhiteboardInfo::set_passwd_(const ::std::string& value) {
  set_has_passwd_();
  if (passwd__ == &::google::protobuf::internal::kEmptyString) {
    passwd__ = new ::std::string;
  }
  passwd__->assign(value);
}
inline void sGetWhiteboardInfo::set_passwd_(const char* value) {
  set_has_passwd_();
  if (passwd__ == &::google::protobuf::internal::kEmptyString) {
    passwd__ = new ::std::string;
  }
  passwd__->assign(value);
}
inline void sGetWhiteboardInfo::set_passwd_(const char* value, size_t size) {
  set_has_passwd_();
  if (passwd__ == &::google::protobuf::internal::kEmptyString) {
    passwd__ = new ::std::string;
  }
  passwd__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetWhiteboardInfo::mutable_passwd_() {
  set_has_passwd_();
  if (passwd__ == &::google::protobuf::internal::kEmptyString) {
    passwd__ = new ::std::string;
  }
  return passwd__;
}
inline ::std::string* sGetWhiteboardInfo::release_passwd_() {
  clear_has_passwd_();
  if (passwd__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd__;
    passwd__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetWhiteboardInfo::set_allocated_passwd_(::std::string* passwd_) {
  if (passwd__ != &::google::protobuf::internal::kEmptyString) {
    delete passwd__;
  }
  if (passwd_) {
    set_has_passwd_();
    passwd__ = passwd_;
  } else {
    clear_has_passwd_();
    passwd__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cDisplay

// required int32 idx = 1;
inline bool cDisplay::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cDisplay::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cDisplay::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cDisplay::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 cDisplay::idx() const {
  return idx_;
}
inline void cDisplay::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// required string course_name = 2;
inline bool cDisplay::has_course_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cDisplay::set_has_course_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cDisplay::clear_has_course_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cDisplay::clear_course_name() {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    course_name_->clear();
  }
  clear_has_course_name();
}
inline const ::std::string& cDisplay::course_name() const {
  return *course_name_;
}
inline void cDisplay::set_course_name(const ::std::string& value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void cDisplay::set_course_name(const char* value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void cDisplay::set_course_name(const char* value, size_t size) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cDisplay::mutable_course_name() {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  return course_name_;
}
inline ::std::string* cDisplay::release_course_name() {
  clear_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_name_;
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cDisplay::set_allocated_course_name(::std::string* course_name) {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    delete course_name_;
  }
  if (course_name) {
    set_has_course_name();
    course_name_ = course_name;
  } else {
    clear_has_course_name();
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sDisplay

// required int32 idx = 1;
inline bool sDisplay::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sDisplay::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sDisplay::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sDisplay::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 sDisplay::idx() const {
  return idx_;
}
inline void sDisplay::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// required string course_name = 2;
inline bool sDisplay::has_course_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sDisplay::set_has_course_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sDisplay::clear_has_course_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sDisplay::clear_course_name() {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    course_name_->clear();
  }
  clear_has_course_name();
}
inline const ::std::string& sDisplay::course_name() const {
  return *course_name_;
}
inline void sDisplay::set_course_name(const ::std::string& value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void sDisplay::set_course_name(const char* value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void sDisplay::set_course_name(const char* value, size_t size) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sDisplay::mutable_course_name() {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  return course_name_;
}
inline ::std::string* sDisplay::release_course_name() {
  clear_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_name_;
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sDisplay::set_allocated_course_name(::std::string* course_name) {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    delete course_name_;
  }
  if (course_name) {
    set_has_course_name();
    course_name_ = course_name;
  } else {
    clear_has_course_name();
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cEnlarge

// optional int32 group_id = 1;
inline bool cEnlarge::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cEnlarge::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cEnlarge::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cEnlarge::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 cEnlarge::group_id() const {
  return group_id_;
}
inline void cEnlarge::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// cReduce

// optional int32 group_id = 1;
inline bool cReduce::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cReduce::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cReduce::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cReduce::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 cReduce::group_id() const {
  return group_id_;
}
inline void cReduce::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// cClassOver

// -------------------------------------------------------------------

// sClassOver

// -------------------------------------------------------------------

// cLeaveEarly

// required int32 student_id = 1;
inline bool cLeaveEarly::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cLeaveEarly::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cLeaveEarly::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cLeaveEarly::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cLeaveEarly::student_id() const {
  return student_id_;
}
inline void cLeaveEarly::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// cGetStudentList

// required int32 class_id = 1;
inline bool cGetStudentList::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetStudentList::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetStudentList::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetStudentList::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 cGetStudentList::class_id() const {
  return class_id_;
}
inline void cGetStudentList::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// -------------------------------------------------------------------

// StudentListNode

// required int32 id = 1;
inline bool StudentListNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StudentListNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StudentListNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StudentListNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StudentListNode::id() const {
  return id_;
}
inline void StudentListNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool StudentListNode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StudentListNode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StudentListNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StudentListNode::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StudentListNode::name() const {
  return *name_;
}
inline void StudentListNode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StudentListNode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StudentListNode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StudentListNode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StudentListNode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StudentListNode::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string res_path = 3;
inline bool StudentListNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StudentListNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StudentListNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StudentListNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& StudentListNode::res_path() const {
  return *res_path_;
}
inline void StudentListNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void StudentListNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void StudentListNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StudentListNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* StudentListNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StudentListNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetStudentList

// repeated .StudentListNode student_list = 1;
inline int sGetStudentList::student_list_size() const {
  return student_list_.size();
}
inline void sGetStudentList::clear_student_list() {
  student_list_.Clear();
}
inline const ::StudentListNode& sGetStudentList::student_list(int index) const {
  return student_list_.Get(index);
}
inline ::StudentListNode* sGetStudentList::mutable_student_list(int index) {
  return student_list_.Mutable(index);
}
inline ::StudentListNode* sGetStudentList::add_student_list() {
  return student_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StudentListNode >&
sGetStudentList::student_list() const {
  return student_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::StudentListNode >*
sGetStudentList::mutable_student_list() {
  return &student_list_;
}

// -------------------------------------------------------------------

// cGetActiveStudentList

// required int32 class_id = 1;
inline bool cGetActiveStudentList::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetActiveStudentList::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetActiveStudentList::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetActiveStudentList::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 cGetActiveStudentList::class_id() const {
  return class_id_;
}
inline void cGetActiveStudentList::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// -------------------------------------------------------------------

// sGetActiveStudentList

// repeated int32 student_list = 1;
inline int sGetActiveStudentList::student_list_size() const {
  return student_list_.size();
}
inline void sGetActiveStudentList::clear_student_list() {
  student_list_.Clear();
}
inline ::google::protobuf::int32 sGetActiveStudentList::student_list(int index) const {
  return student_list_.Get(index);
}
inline void sGetActiveStudentList::set_student_list(int index, ::google::protobuf::int32 value) {
  student_list_.Set(index, value);
}
inline void sGetActiveStudentList::add_student_list(::google::protobuf::int32 value) {
  student_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sGetActiveStudentList::student_list() const {
  return student_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sGetActiveStudentList::mutable_student_list() {
  return &student_list_;
}

// -------------------------------------------------------------------

// cGetGroupStudentList

// optional int32 group_id = 1;
inline bool cGetGroupStudentList::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetGroupStudentList::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetGroupStudentList::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetGroupStudentList::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 cGetGroupStudentList::group_id() const {
  return group_id_;
}
inline void cGetGroupStudentList::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// sGetGroupStudentList

// required int32 group_id = 2;
inline bool sGetGroupStudentList::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetGroupStudentList::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetGroupStudentList::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetGroupStudentList::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 sGetGroupStudentList::group_id() const {
  return group_id_;
}
inline void sGetGroupStudentList::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// repeated int32 student_list = 1;
inline int sGetGroupStudentList::student_list_size() const {
  return student_list_.size();
}
inline void sGetGroupStudentList::clear_student_list() {
  student_list_.Clear();
}
inline ::google::protobuf::int32 sGetGroupStudentList::student_list(int index) const {
  return student_list_.Get(index);
}
inline void sGetGroupStudentList::set_student_list(int index, ::google::protobuf::int32 value) {
  student_list_.Set(index, value);
}
inline void sGetGroupStudentList::add_student_list(::google::protobuf::int32 value) {
  student_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sGetGroupStudentList::student_list() const {
  return student_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sGetGroupStudentList::mutable_student_list() {
  return &student_list_;
}

// -------------------------------------------------------------------

// cGetGroupList

// -------------------------------------------------------------------

// sGetGroupList

// repeated int32 group_list = 1;
inline int sGetGroupList::group_list_size() const {
  return group_list_.size();
}
inline void sGetGroupList::clear_group_list() {
  group_list_.Clear();
}
inline ::google::protobuf::int32 sGetGroupList::group_list(int index) const {
  return group_list_.Get(index);
}
inline void sGetGroupList::set_group_list(int index, ::google::protobuf::int32 value) {
  group_list_.Set(index, value);
}
inline void sGetGroupList::add_group_list(::google::protobuf::int32 value) {
  group_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sGetGroupList::group_list() const {
  return group_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sGetGroupList::mutable_group_list() {
  return &group_list_;
}

// -------------------------------------------------------------------

// sUpdateStudentStatus

// required int32 student_id = 1;
inline bool sUpdateStudentStatus::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateStudentStatus::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateStudentStatus::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateStudentStatus::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateStudentStatus::student_id() const {
  return student_id_;
}
inline void sUpdateStudentStatus::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required .user_status us = 2 [default = US_INVALID];
inline bool sUpdateStudentStatus::has_us() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateStudentStatus::set_has_us() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateStudentStatus::clear_has_us() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateStudentStatus::clear_us() {
  us_ = 1;
  clear_has_us();
}
inline ::user_status sUpdateStudentStatus::us() const {
  return static_cast< ::user_status >(us_);
}
inline void sUpdateStudentStatus::set_us(::user_status value) {
  assert(::user_status_IsValid(value));
  set_has_us();
  us_ = value;
}

// required int32 login_type = 3;
inline bool sUpdateStudentStatus::has_login_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateStudentStatus::set_has_login_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateStudentStatus::clear_has_login_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateStudentStatus::clear_login_type() {
  login_type_ = 0;
  clear_has_login_type();
}
inline ::google::protobuf::int32 sUpdateStudentStatus::login_type() const {
  return login_type_;
}
inline void sUpdateStudentStatus::set_login_type(::google::protobuf::int32 value) {
  set_has_login_type();
  login_type_ = value;
}

// -------------------------------------------------------------------

// cGetStudentInfo

// required int32 id = 1;
inline bool cGetStudentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetStudentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetStudentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetStudentInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cGetStudentInfo::id() const {
  return id_;
}
inline void cGetStudentInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// sGetStudentInfo

// required int32 id = 1;
inline bool sGetStudentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetStudentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetStudentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetStudentInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetStudentInfo::id() const {
  return id_;
}
inline void sGetStudentInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string number = 2;
inline bool sGetStudentInfo::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetStudentInfo::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetStudentInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetStudentInfo::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& sGetStudentInfo::number() const {
  return *number_;
}
inline void sGetStudentInfo::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetStudentInfo::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetStudentInfo::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* sGetStudentInfo::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool sGetStudentInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetStudentInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetStudentInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetStudentInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sGetStudentInfo::name() const {
  return *name_;
}
inline void sGetStudentInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetStudentInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetStudentInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sGetStudentInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sex = 4;
inline bool sGetStudentInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetStudentInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetStudentInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetStudentInfo::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& sGetStudentInfo::sex() const {
  return *sex_;
}
inline void sGetStudentInfo::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetStudentInfo::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetStudentInfo::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* sGetStudentInfo::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string race = 5;
inline bool sGetStudentInfo::has_race() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGetStudentInfo::set_has_race() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGetStudentInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGetStudentInfo::clear_race() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    race_->clear();
  }
  clear_has_race();
}
inline const ::std::string& sGetStudentInfo::race() const {
  return *race_;
}
inline void sGetStudentInfo::set_race(const ::std::string& value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetStudentInfo::set_race(const char* value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetStudentInfo::set_race(const char* value, size_t size) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_race() {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  return race_;
}
inline ::std::string* sGetStudentInfo::release_race() {
  clear_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = race_;
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_race(::std::string* race) {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (race) {
    set_has_race();
    race_ = race;
  } else {
    clear_has_race();
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string birthday = 12;
inline bool sGetStudentInfo::has_birthday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGetStudentInfo::set_has_birthday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGetStudentInfo::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGetStudentInfo::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& sGetStudentInfo::birthday() const {
  return *birthday_;
}
inline void sGetStudentInfo::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetStudentInfo::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetStudentInfo::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* sGetStudentInfo::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string native = 6;
inline bool sGetStudentInfo::has_native() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGetStudentInfo::set_has_native() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGetStudentInfo::clear_has_native() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGetStudentInfo::clear_native() {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    native_->clear();
  }
  clear_has_native();
}
inline const ::std::string& sGetStudentInfo::native() const {
  return *native_;
}
inline void sGetStudentInfo::set_native(const ::std::string& value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetStudentInfo::set_native(const char* value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetStudentInfo::set_native(const char* value, size_t size) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_native() {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  return native_;
}
inline ::std::string* sGetStudentInfo::release_native() {
  clear_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = native_;
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_native(::std::string* native) {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    delete native_;
  }
  if (native) {
    set_has_native();
    native_ = native;
  } else {
    clear_has_native();
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 class_id = 7;
inline bool sGetStudentInfo::has_class_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGetStudentInfo::set_has_class_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGetStudentInfo::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGetStudentInfo::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 sGetStudentInfo::class_id() const {
  return class_id_;
}
inline void sGetStudentInfo::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required string class_name = 8;
inline bool sGetStudentInfo::has_class_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sGetStudentInfo::set_has_class_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sGetStudentInfo::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sGetStudentInfo::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& sGetStudentInfo::class_name() const {
  return *class_name_;
}
inline void sGetStudentInfo::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void sGetStudentInfo::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void sGetStudentInfo::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* sGetStudentInfo::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 grade_id = 9;
inline bool sGetStudentInfo::has_grade_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sGetStudentInfo::set_has_grade_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sGetStudentInfo::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sGetStudentInfo::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 sGetStudentInfo::grade_id() const {
  return grade_id_;
}
inline void sGetStudentInfo::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// required string guardian = 10;
inline bool sGetStudentInfo::has_guardian() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sGetStudentInfo::set_has_guardian() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sGetStudentInfo::clear_has_guardian() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sGetStudentInfo::clear_guardian() {
  if (guardian_ != &::google::protobuf::internal::kEmptyString) {
    guardian_->clear();
  }
  clear_has_guardian();
}
inline const ::std::string& sGetStudentInfo::guardian() const {
  return *guardian_;
}
inline void sGetStudentInfo::set_guardian(const ::std::string& value) {
  set_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    guardian_ = new ::std::string;
  }
  guardian_->assign(value);
}
inline void sGetStudentInfo::set_guardian(const char* value) {
  set_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    guardian_ = new ::std::string;
  }
  guardian_->assign(value);
}
inline void sGetStudentInfo::set_guardian(const char* value, size_t size) {
  set_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    guardian_ = new ::std::string;
  }
  guardian_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_guardian() {
  set_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    guardian_ = new ::std::string;
  }
  return guardian_;
}
inline ::std::string* sGetStudentInfo::release_guardian() {
  clear_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guardian_;
    guardian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_guardian(::std::string* guardian) {
  if (guardian_ != &::google::protobuf::internal::kEmptyString) {
    delete guardian_;
  }
  if (guardian) {
    set_has_guardian();
    guardian_ = guardian;
  } else {
    clear_has_guardian();
    guardian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string guardian_phone = 13;
inline bool sGetStudentInfo::has_guardian_phone() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sGetStudentInfo::set_has_guardian_phone() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sGetStudentInfo::clear_has_guardian_phone() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sGetStudentInfo::clear_guardian_phone() {
  if (guardian_phone_ != &::google::protobuf::internal::kEmptyString) {
    guardian_phone_->clear();
  }
  clear_has_guardian_phone();
}
inline const ::std::string& sGetStudentInfo::guardian_phone() const {
  return *guardian_phone_;
}
inline void sGetStudentInfo::set_guardian_phone(const ::std::string& value) {
  set_has_guardian_phone();
  if (guardian_phone_ == &::google::protobuf::internal::kEmptyString) {
    guardian_phone_ = new ::std::string;
  }
  guardian_phone_->assign(value);
}
inline void sGetStudentInfo::set_guardian_phone(const char* value) {
  set_has_guardian_phone();
  if (guardian_phone_ == &::google::protobuf::internal::kEmptyString) {
    guardian_phone_ = new ::std::string;
  }
  guardian_phone_->assign(value);
}
inline void sGetStudentInfo::set_guardian_phone(const char* value, size_t size) {
  set_has_guardian_phone();
  if (guardian_phone_ == &::google::protobuf::internal::kEmptyString) {
    guardian_phone_ = new ::std::string;
  }
  guardian_phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_guardian_phone() {
  set_has_guardian_phone();
  if (guardian_phone_ == &::google::protobuf::internal::kEmptyString) {
    guardian_phone_ = new ::std::string;
  }
  return guardian_phone_;
}
inline ::std::string* sGetStudentInfo::release_guardian_phone() {
  clear_has_guardian_phone();
  if (guardian_phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guardian_phone_;
    guardian_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_guardian_phone(::std::string* guardian_phone) {
  if (guardian_phone_ != &::google::protobuf::internal::kEmptyString) {
    delete guardian_phone_;
  }
  if (guardian_phone) {
    set_has_guardian_phone();
    guardian_phone_ = guardian_phone;
  } else {
    clear_has_guardian_phone();
    guardian_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string grade_name = 11;
inline bool sGetStudentInfo::has_grade_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sGetStudentInfo::set_has_grade_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sGetStudentInfo::clear_has_grade_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sGetStudentInfo::clear_grade_name() {
  if (grade_name_ != &::google::protobuf::internal::kEmptyString) {
    grade_name_->clear();
  }
  clear_has_grade_name();
}
inline const ::std::string& sGetStudentInfo::grade_name() const {
  return *grade_name_;
}
inline void sGetStudentInfo::set_grade_name(const ::std::string& value) {
  set_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    grade_name_ = new ::std::string;
  }
  grade_name_->assign(value);
}
inline void sGetStudentInfo::set_grade_name(const char* value) {
  set_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    grade_name_ = new ::std::string;
  }
  grade_name_->assign(value);
}
inline void sGetStudentInfo::set_grade_name(const char* value, size_t size) {
  set_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    grade_name_ = new ::std::string;
  }
  grade_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_grade_name() {
  set_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    grade_name_ = new ::std::string;
  }
  return grade_name_;
}
inline ::std::string* sGetStudentInfo::release_grade_name() {
  clear_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grade_name_;
    grade_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_grade_name(::std::string* grade_name) {
  if (grade_name_ != &::google::protobuf::internal::kEmptyString) {
    delete grade_name_;
  }
  if (grade_name) {
    set_has_grade_name();
    grade_name_ = grade_name;
  } else {
    clear_has_grade_name();
    grade_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string account = 14;
inline bool sGetStudentInfo::has_account() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sGetStudentInfo::set_has_account() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sGetStudentInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sGetStudentInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& sGetStudentInfo::account() const {
  return *account_;
}
inline void sGetStudentInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void sGetStudentInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void sGetStudentInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* sGetStudentInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string address = 15;
inline bool sGetStudentInfo::has_address() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sGetStudentInfo::set_has_address() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sGetStudentInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sGetStudentInfo::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& sGetStudentInfo::address() const {
  return *address_;
}
inline void sGetStudentInfo::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void sGetStudentInfo::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void sGetStudentInfo::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* sGetStudentInfo::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetTeacherInfo

// required int32 id = 1;
inline bool cGetTeacherInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetTeacherInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetTeacherInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetTeacherInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cGetTeacherInfo::id() const {
  return id_;
}
inline void cGetTeacherInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// sGetTeacherInfo

// required int32 id = 1;
inline bool sGetTeacherInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetTeacherInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetTeacherInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetTeacherInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetTeacherInfo::id() const {
  return id_;
}
inline void sGetTeacherInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string number = 2;
inline bool sGetTeacherInfo::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetTeacherInfo::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetTeacherInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetTeacherInfo::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& sGetTeacherInfo::number() const {
  return *number_;
}
inline void sGetTeacherInfo::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetTeacherInfo::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetTeacherInfo::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* sGetTeacherInfo::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool sGetTeacherInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetTeacherInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetTeacherInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetTeacherInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sGetTeacherInfo::name() const {
  return *name_;
}
inline void sGetTeacherInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetTeacherInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetTeacherInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sGetTeacherInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sex = 4;
inline bool sGetTeacherInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetTeacherInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetTeacherInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetTeacherInfo::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& sGetTeacherInfo::sex() const {
  return *sex_;
}
inline void sGetTeacherInfo::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetTeacherInfo::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetTeacherInfo::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* sGetTeacherInfo::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string race = 5;
inline bool sGetTeacherInfo::has_race() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGetTeacherInfo::set_has_race() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGetTeacherInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGetTeacherInfo::clear_race() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    race_->clear();
  }
  clear_has_race();
}
inline const ::std::string& sGetTeacherInfo::race() const {
  return *race_;
}
inline void sGetTeacherInfo::set_race(const ::std::string& value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetTeacherInfo::set_race(const char* value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetTeacherInfo::set_race(const char* value, size_t size) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_race() {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  return race_;
}
inline ::std::string* sGetTeacherInfo::release_race() {
  clear_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = race_;
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_race(::std::string* race) {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (race) {
    set_has_race();
    race_ = race;
  } else {
    clear_has_race();
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string birthday = 6;
inline bool sGetTeacherInfo::has_birthday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGetTeacherInfo::set_has_birthday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGetTeacherInfo::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGetTeacherInfo::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& sGetTeacherInfo::birthday() const {
  return *birthday_;
}
inline void sGetTeacherInfo::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetTeacherInfo::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetTeacherInfo::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* sGetTeacherInfo::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string native = 7;
inline bool sGetTeacherInfo::has_native() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGetTeacherInfo::set_has_native() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGetTeacherInfo::clear_has_native() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGetTeacherInfo::clear_native() {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    native_->clear();
  }
  clear_has_native();
}
inline const ::std::string& sGetTeacherInfo::native() const {
  return *native_;
}
inline void sGetTeacherInfo::set_native(const ::std::string& value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetTeacherInfo::set_native(const char* value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetTeacherInfo::set_native(const char* value, size_t size) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_native() {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  return native_;
}
inline ::std::string* sGetTeacherInfo::release_native() {
  clear_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = native_;
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_native(::std::string* native) {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    delete native_;
  }
  if (native) {
    set_has_native();
    native_ = native;
  } else {
    clear_has_native();
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string school_name = 8;
inline bool sGetTeacherInfo::has_school_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGetTeacherInfo::set_has_school_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGetTeacherInfo::clear_has_school_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGetTeacherInfo::clear_school_name() {
  if (school_name_ != &::google::protobuf::internal::kEmptyString) {
    school_name_->clear();
  }
  clear_has_school_name();
}
inline const ::std::string& sGetTeacherInfo::school_name() const {
  return *school_name_;
}
inline void sGetTeacherInfo::set_school_name(const ::std::string& value) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(value);
}
inline void sGetTeacherInfo::set_school_name(const char* value) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(value);
}
inline void sGetTeacherInfo::set_school_name(const char* value, size_t size) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_school_name() {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  return school_name_;
}
inline ::std::string* sGetTeacherInfo::release_school_name() {
  clear_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = school_name_;
    school_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_school_name(::std::string* school_name) {
  if (school_name_ != &::google::protobuf::internal::kEmptyString) {
    delete school_name_;
  }
  if (school_name) {
    set_has_school_name();
    school_name_ = school_name;
  } else {
    clear_has_school_name();
    school_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string res_path = 9;
inline bool sGetTeacherInfo::has_res_path() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sGetTeacherInfo::set_has_res_path() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sGetTeacherInfo::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sGetTeacherInfo::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& sGetTeacherInfo::res_path() const {
  return *res_path_;
}
inline void sGetTeacherInfo::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void sGetTeacherInfo::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void sGetTeacherInfo::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* sGetTeacherInfo::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PeerGroup

// required int32 student_id = 1;
inline bool PeerGroup::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerGroup::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerGroup::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerGroup::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 PeerGroup::student_id() const {
  return student_id_;
}
inline void PeerGroup::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// cSetGroup

// required int32 group_id = 1;
inline bool cSetGroup::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSetGroup::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSetGroup::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSetGroup::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 cSetGroup::group_id() const {
  return group_id_;
}
inline void cSetGroup::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required string group_name = 2;
inline bool cSetGroup::has_group_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cSetGroup::set_has_group_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cSetGroup::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cSetGroup::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& cSetGroup::group_name() const {
  return *group_name_;
}
inline void cSetGroup::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void cSetGroup::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void cSetGroup::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cSetGroup::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  return group_name_;
}
inline ::std::string* cSetGroup::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cSetGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PeerGroup student_list = 3;
inline int cSetGroup::student_list_size() const {
  return student_list_.size();
}
inline void cSetGroup::clear_student_list() {
  student_list_.Clear();
}
inline const ::PeerGroup& cSetGroup::student_list(int index) const {
  return student_list_.Get(index);
}
inline ::PeerGroup* cSetGroup::mutable_student_list(int index) {
  return student_list_.Mutable(index);
}
inline ::PeerGroup* cSetGroup::add_student_list() {
  return student_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PeerGroup >&
cSetGroup::student_list() const {
  return student_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PeerGroup >*
cSetGroup::mutable_student_list() {
  return &student_list_;
}

// -------------------------------------------------------------------

// sSetGroup

// required int32 result = 2;
inline bool sSetGroup::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSetGroup::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSetGroup::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSetGroup::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 sSetGroup::result() const {
  return result_;
}
inline void sSetGroup::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string msg = 1;
inline bool sSetGroup::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSetGroup::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSetGroup::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSetGroup::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sSetGroup::msg() const {
  return *msg_;
}
inline void sSetGroup::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetGroup::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetGroup::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSetGroup::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sSetGroup::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSetGroup::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cRelay

// -------------------------------------------------------------------

// sRelay

// required int32 student_id = 1;
inline bool sRelay::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sRelay::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sRelay::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sRelay::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sRelay::student_id() const {
  return student_id_;
}
inline void sRelay::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// bookNode

// optional int32 book_id = 1;
inline bool bookNode::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bookNode::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bookNode::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bookNode::clear_book_id() {
  book_id_ = 0;
  clear_has_book_id();
}
inline ::google::protobuf::int32 bookNode::book_id() const {
  return book_id_;
}
inline void bookNode::set_book_id(::google::protobuf::int32 value) {
  set_has_book_id();
  book_id_ = value;
}

// optional string book_name = 2;
inline bool bookNode::has_book_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bookNode::set_has_book_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bookNode::clear_has_book_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bookNode::clear_book_name() {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    book_name_->clear();
  }
  clear_has_book_name();
}
inline const ::std::string& bookNode::book_name() const {
  return *book_name_;
}
inline void bookNode::set_book_name(const ::std::string& value) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(value);
}
inline void bookNode::set_book_name(const char* value) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(value);
}
inline void bookNode::set_book_name(const char* value, size_t size) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bookNode::mutable_book_name() {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  return book_name_;
}
inline ::std::string* bookNode::release_book_name() {
  clear_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = book_name_;
    book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bookNode::set_allocated_book_name(::std::string* book_name) {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    delete book_name_;
  }
  if (book_name) {
    set_has_book_name();
    book_name_ = book_name;
  } else {
    clear_has_book_name();
    book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 book_type = 3;
inline bool bookNode::has_book_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bookNode::set_has_book_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bookNode::clear_has_book_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bookNode::clear_book_type() {
  book_type_ = 0;
  clear_has_book_type();
}
inline ::google::protobuf::int32 bookNode::book_type() const {
  return book_type_;
}
inline void bookNode::set_book_type(::google::protobuf::int32 value) {
  set_has_book_type();
  book_type_ = value;
}

// optional int32 auth_id = 4;
inline bool bookNode::has_auth_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bookNode::set_has_auth_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bookNode::clear_has_auth_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bookNode::clear_auth_id() {
  auth_id_ = 0;
  clear_has_auth_id();
}
inline ::google::protobuf::int32 bookNode::auth_id() const {
  return auth_id_;
}
inline void bookNode::set_auth_id(::google::protobuf::int32 value) {
  set_has_auth_id();
  auth_id_ = value;
}

// optional .LoginType auth_type = 5;
inline bool bookNode::has_auth_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bookNode::set_has_auth_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bookNode::clear_has_auth_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bookNode::clear_auth_type() {
  auth_type_ = 0;
  clear_has_auth_type();
}
inline ::LoginType bookNode::auth_type() const {
  return static_cast< ::LoginType >(auth_type_);
}
inline void bookNode::set_auth_type(::LoginType value) {
  assert(::LoginType_IsValid(value));
  set_has_auth_type();
  auth_type_ = value;
}

// -------------------------------------------------------------------

// cGetPublicBooksList

// optional int32 owner_id = 1;
inline bool cGetPublicBooksList::has_owner_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetPublicBooksList::set_has_owner_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetPublicBooksList::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetPublicBooksList::clear_owner_id() {
  owner_id_ = 0;
  clear_has_owner_id();
}
inline ::google::protobuf::int32 cGetPublicBooksList::owner_id() const {
  return owner_id_;
}
inline void cGetPublicBooksList::set_owner_id(::google::protobuf::int32 value) {
  set_has_owner_id();
  owner_id_ = value;
}

// optional string owner_type = 2;
inline bool cGetPublicBooksList::has_owner_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cGetPublicBooksList::set_has_owner_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cGetPublicBooksList::clear_has_owner_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cGetPublicBooksList::clear_owner_type() {
  if (owner_type_ != &::google::protobuf::internal::kEmptyString) {
    owner_type_->clear();
  }
  clear_has_owner_type();
}
inline const ::std::string& cGetPublicBooksList::owner_type() const {
  return *owner_type_;
}
inline void cGetPublicBooksList::set_owner_type(const ::std::string& value) {
  set_has_owner_type();
  if (owner_type_ == &::google::protobuf::internal::kEmptyString) {
    owner_type_ = new ::std::string;
  }
  owner_type_->assign(value);
}
inline void cGetPublicBooksList::set_owner_type(const char* value) {
  set_has_owner_type();
  if (owner_type_ == &::google::protobuf::internal::kEmptyString) {
    owner_type_ = new ::std::string;
  }
  owner_type_->assign(value);
}
inline void cGetPublicBooksList::set_owner_type(const char* value, size_t size) {
  set_has_owner_type();
  if (owner_type_ == &::google::protobuf::internal::kEmptyString) {
    owner_type_ = new ::std::string;
  }
  owner_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cGetPublicBooksList::mutable_owner_type() {
  set_has_owner_type();
  if (owner_type_ == &::google::protobuf::internal::kEmptyString) {
    owner_type_ = new ::std::string;
  }
  return owner_type_;
}
inline ::std::string* cGetPublicBooksList::release_owner_type() {
  clear_has_owner_type();
  if (owner_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = owner_type_;
    owner_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cGetPublicBooksList::set_allocated_owner_type(::std::string* owner_type) {
  if (owner_type_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_type_;
  }
  if (owner_type) {
    set_has_owner_type();
    owner_type_ = owner_type;
  } else {
    clear_has_owner_type();
    owner_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// userNode

// optional int32 user_id = 1;
inline bool userNode::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userNode::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userNode::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userNode::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 userNode::user_id() const {
  return user_id_;
}
inline void userNode::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_account = 2;
inline bool userNode::has_user_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userNode::set_has_user_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userNode::clear_has_user_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userNode::clear_user_account() {
  if (user_account_ != &::google::protobuf::internal::kEmptyString) {
    user_account_->clear();
  }
  clear_has_user_account();
}
inline const ::std::string& userNode::user_account() const {
  return *user_account_;
}
inline void userNode::set_user_account(const ::std::string& value) {
  set_has_user_account();
  if (user_account_ == &::google::protobuf::internal::kEmptyString) {
    user_account_ = new ::std::string;
  }
  user_account_->assign(value);
}
inline void userNode::set_user_account(const char* value) {
  set_has_user_account();
  if (user_account_ == &::google::protobuf::internal::kEmptyString) {
    user_account_ = new ::std::string;
  }
  user_account_->assign(value);
}
inline void userNode::set_user_account(const char* value, size_t size) {
  set_has_user_account();
  if (user_account_ == &::google::protobuf::internal::kEmptyString) {
    user_account_ = new ::std::string;
  }
  user_account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userNode::mutable_user_account() {
  set_has_user_account();
  if (user_account_ == &::google::protobuf::internal::kEmptyString) {
    user_account_ = new ::std::string;
  }
  return user_account_;
}
inline ::std::string* userNode::release_user_account() {
  clear_has_user_account();
  if (user_account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_account_;
    user_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userNode::set_allocated_user_account(::std::string* user_account) {
  if (user_account_ != &::google::protobuf::internal::kEmptyString) {
    delete user_account_;
  }
  if (user_account) {
    set_has_user_account();
    user_account_ = user_account;
  } else {
    clear_has_user_account();
    user_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// serverInfoNode

// optional string server_addr = 1;
inline bool serverInfoNode::has_server_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void serverInfoNode::set_has_server_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void serverInfoNode::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void serverInfoNode::clear_server_addr() {
  if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
    server_addr_->clear();
  }
  clear_has_server_addr();
}
inline const ::std::string& serverInfoNode::server_addr() const {
  return *server_addr_;
}
inline void serverInfoNode::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
}
inline void serverInfoNode::set_server_addr(const char* value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
}
inline void serverInfoNode::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* serverInfoNode::mutable_server_addr() {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  return server_addr_;
}
inline ::std::string* serverInfoNode::release_server_addr() {
  clear_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_addr_;
    server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void serverInfoNode::set_allocated_server_addr(::std::string* server_addr) {
  if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete server_addr_;
  }
  if (server_addr) {
    set_has_server_addr();
    server_addr_ = server_addr;
  } else {
    clear_has_server_addr();
    server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 server_port = 2;
inline bool serverInfoNode::has_server_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void serverInfoNode::set_has_server_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void serverInfoNode::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void serverInfoNode::clear_server_port() {
  server_port_ = 0;
  clear_has_server_port();
}
inline ::google::protobuf::int32 serverInfoNode::server_port() const {
  return server_port_;
}
inline void serverInfoNode::set_server_port(::google::protobuf::int32 value) {
  set_has_server_port();
  server_port_ = value;
}

// optional string full_addr = 3;
inline bool serverInfoNode::has_full_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void serverInfoNode::set_has_full_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void serverInfoNode::clear_has_full_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void serverInfoNode::clear_full_addr() {
  if (full_addr_ != &::google::protobuf::internal::kEmptyString) {
    full_addr_->clear();
  }
  clear_has_full_addr();
}
inline const ::std::string& serverInfoNode::full_addr() const {
  return *full_addr_;
}
inline void serverInfoNode::set_full_addr(const ::std::string& value) {
  set_has_full_addr();
  if (full_addr_ == &::google::protobuf::internal::kEmptyString) {
    full_addr_ = new ::std::string;
  }
  full_addr_->assign(value);
}
inline void serverInfoNode::set_full_addr(const char* value) {
  set_has_full_addr();
  if (full_addr_ == &::google::protobuf::internal::kEmptyString) {
    full_addr_ = new ::std::string;
  }
  full_addr_->assign(value);
}
inline void serverInfoNode::set_full_addr(const char* value, size_t size) {
  set_has_full_addr();
  if (full_addr_ == &::google::protobuf::internal::kEmptyString) {
    full_addr_ = new ::std::string;
  }
  full_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* serverInfoNode::mutable_full_addr() {
  set_has_full_addr();
  if (full_addr_ == &::google::protobuf::internal::kEmptyString) {
    full_addr_ = new ::std::string;
  }
  return full_addr_;
}
inline ::std::string* serverInfoNode::release_full_addr() {
  clear_has_full_addr();
  if (full_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_addr_;
    full_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void serverInfoNode::set_allocated_full_addr(::std::string* full_addr) {
  if (full_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete full_addr_;
  }
  if (full_addr) {
    set_has_full_addr();
    full_addr_ = full_addr;
  } else {
    clear_has_full_addr();
    full_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// bookList

// repeated .bookNode book_list = 1;
inline int bookList::book_list_size() const {
  return book_list_.size();
}
inline void bookList::clear_book_list() {
  book_list_.Clear();
}
inline const ::bookNode& bookList::book_list(int index) const {
  return book_list_.Get(index);
}
inline ::bookNode* bookList::mutable_book_list(int index) {
  return book_list_.Mutable(index);
}
inline ::bookNode* bookList::add_book_list() {
  return book_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bookNode >&
bookList::book_list() const {
  return book_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::bookNode >*
bookList::mutable_book_list() {
  return &book_list_;
}

// -------------------------------------------------------------------

// cPublish

// optional int32 book_type = 1;
inline bool cPublish::has_book_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cPublish::set_has_book_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cPublish::clear_has_book_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cPublish::clear_book_type() {
  book_type_ = 0;
  clear_has_book_type();
}
inline ::google::protobuf::int32 cPublish::book_type() const {
  return book_type_;
}
inline void cPublish::set_book_type(::google::protobuf::int32 value) {
  set_has_book_type();
  book_type_ = value;
}

// optional .CourseType course_type = 11 [default = CT_INVALID];
inline bool cPublish::has_course_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cPublish::set_has_course_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cPublish::clear_has_course_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cPublish::clear_course_type() {
  course_type_ = 1;
  clear_has_course_type();
}
inline ::CourseType cPublish::course_type() const {
  return static_cast< ::CourseType >(course_type_);
}
inline void cPublish::set_course_type(::CourseType value) {
  assert(::CourseType_IsValid(value));
  set_has_course_type();
  course_type_ = value;
}

// optional string book_name = 2;
inline bool cPublish::has_book_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cPublish::set_has_book_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cPublish::clear_has_book_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cPublish::clear_book_name() {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    book_name_->clear();
  }
  clear_has_book_name();
}
inline const ::std::string& cPublish::book_name() const {
  return *book_name_;
}
inline void cPublish::set_book_name(const ::std::string& value) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(value);
}
inline void cPublish::set_book_name(const char* value) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(value);
}
inline void cPublish::set_book_name(const char* value, size_t size) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cPublish::mutable_book_name() {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  return book_name_;
}
inline ::std::string* cPublish::release_book_name() {
  clear_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = book_name_;
    book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cPublish::set_allocated_book_name(::std::string* book_name) {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    delete book_name_;
  }
  if (book_name) {
    set_has_book_name();
    book_name_ = book_name;
  } else {
    clear_has_book_name();
    book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string time = 3;
inline bool cPublish::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cPublish::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cPublish::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cPublish::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& cPublish::time() const {
  return *time_;
}
inline void cPublish::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void cPublish::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void cPublish::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cPublish::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* cPublish::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cPublish::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 belongs = 4;
inline bool cPublish::has_belongs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cPublish::set_has_belongs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cPublish::clear_has_belongs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cPublish::clear_belongs() {
  belongs_ = 0;
  clear_has_belongs();
}
inline ::google::protobuf::int32 cPublish::belongs() const {
  return belongs_;
}
inline void cPublish::set_belongs(::google::protobuf::int32 value) {
  set_has_belongs();
  belongs_ = value;
}

// optional int32 art = 5;
inline bool cPublish::has_art() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cPublish::set_has_art() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cPublish::clear_has_art() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cPublish::clear_art() {
  art_ = 0;
  clear_has_art();
}
inline ::google::protobuf::int32 cPublish::art() const {
  return art_;
}
inline void cPublish::set_art(::google::protobuf::int32 value) {
  set_has_art();
  art_ = value;
}

// optional int32 language = 6;
inline bool cPublish::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cPublish::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cPublish::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cPublish::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 cPublish::language() const {
  return language_;
}
inline void cPublish::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// optional int32 community = 7;
inline bool cPublish::has_community() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cPublish::set_has_community() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cPublish::clear_has_community() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cPublish::clear_community() {
  community_ = 0;
  clear_has_community();
}
inline ::google::protobuf::int32 cPublish::community() const {
  return community_;
}
inline void cPublish::set_community(::google::protobuf::int32 value) {
  set_has_community();
  community_ = value;
}

// optional int32 health = 8;
inline bool cPublish::has_health() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cPublish::set_has_health() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cPublish::clear_has_health() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cPublish::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 cPublish::health() const {
  return health_;
}
inline void cPublish::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// optional int32 science = 9;
inline bool cPublish::has_science() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void cPublish::set_has_science() {
  _has_bits_[0] |= 0x00000200u;
}
inline void cPublish::clear_has_science() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void cPublish::clear_science() {
  science_ = 0;
  clear_has_science();
}
inline ::google::protobuf::int32 cPublish::science() const {
  return science_;
}
inline void cPublish::set_science(::google::protobuf::int32 value) {
  set_has_science();
  science_ = value;
}

// optional string res_path = 10;
inline bool cPublish::has_res_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void cPublish::set_has_res_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void cPublish::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void cPublish::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& cPublish::res_path() const {
  return *res_path_;
}
inline void cPublish::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void cPublish::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void cPublish::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cPublish::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* cPublish::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cPublish::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cSell

// optional int32 book_id = 1;
inline bool cSell::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSell::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSell::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSell::clear_book_id() {
  book_id_ = 0;
  clear_has_book_id();
}
inline ::google::protobuf::int32 cSell::book_id() const {
  return book_id_;
}
inline void cSell::set_book_id(::google::protobuf::int32 value) {
  set_has_book_id();
  book_id_ = value;
}

// optional int32 auth_id = 2;
inline bool cSell::has_auth_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cSell::set_has_auth_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cSell::clear_has_auth_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cSell::clear_auth_id() {
  auth_id_ = 0;
  clear_has_auth_id();
}
inline ::google::protobuf::int32 cSell::auth_id() const {
  return auth_id_;
}
inline void cSell::set_auth_id(::google::protobuf::int32 value) {
  set_has_auth_id();
  auth_id_ = value;
}

// optional string auth_type = 3;
inline bool cSell::has_auth_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cSell::set_has_auth_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cSell::clear_has_auth_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cSell::clear_auth_type() {
  if (auth_type_ != &::google::protobuf::internal::kEmptyString) {
    auth_type_->clear();
  }
  clear_has_auth_type();
}
inline const ::std::string& cSell::auth_type() const {
  return *auth_type_;
}
inline void cSell::set_auth_type(const ::std::string& value) {
  set_has_auth_type();
  if (auth_type_ == &::google::protobuf::internal::kEmptyString) {
    auth_type_ = new ::std::string;
  }
  auth_type_->assign(value);
}
inline void cSell::set_auth_type(const char* value) {
  set_has_auth_type();
  if (auth_type_ == &::google::protobuf::internal::kEmptyString) {
    auth_type_ = new ::std::string;
  }
  auth_type_->assign(value);
}
inline void cSell::set_auth_type(const char* value, size_t size) {
  set_has_auth_type();
  if (auth_type_ == &::google::protobuf::internal::kEmptyString) {
    auth_type_ = new ::std::string;
  }
  auth_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cSell::mutable_auth_type() {
  set_has_auth_type();
  if (auth_type_ == &::google::protobuf::internal::kEmptyString) {
    auth_type_ = new ::std::string;
  }
  return auth_type_;
}
inline ::std::string* cSell::release_auth_type() {
  clear_has_auth_type();
  if (auth_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_type_;
    auth_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cSell::set_allocated_auth_type(::std::string* auth_type) {
  if (auth_type_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_type_;
  }
  if (auth_type) {
    set_has_auth_type();
    auth_type_ = auth_type;
  } else {
    clear_has_auth_type();
    auth_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cChangeOwner

// optional int32 book_id = 1;
inline bool cChangeOwner::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cChangeOwner::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cChangeOwner::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cChangeOwner::clear_book_id() {
  book_id_ = 0;
  clear_has_book_id();
}
inline ::google::protobuf::int32 cChangeOwner::book_id() const {
  return book_id_;
}
inline void cChangeOwner::set_book_id(::google::protobuf::int32 value) {
  set_has_book_id();
  book_id_ = value;
}

// optional string to_auth_account = 2;
inline bool cChangeOwner::has_to_auth_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cChangeOwner::set_has_to_auth_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cChangeOwner::clear_has_to_auth_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cChangeOwner::clear_to_auth_account() {
  if (to_auth_account_ != &::google::protobuf::internal::kEmptyString) {
    to_auth_account_->clear();
  }
  clear_has_to_auth_account();
}
inline const ::std::string& cChangeOwner::to_auth_account() const {
  return *to_auth_account_;
}
inline void cChangeOwner::set_to_auth_account(const ::std::string& value) {
  set_has_to_auth_account();
  if (to_auth_account_ == &::google::protobuf::internal::kEmptyString) {
    to_auth_account_ = new ::std::string;
  }
  to_auth_account_->assign(value);
}
inline void cChangeOwner::set_to_auth_account(const char* value) {
  set_has_to_auth_account();
  if (to_auth_account_ == &::google::protobuf::internal::kEmptyString) {
    to_auth_account_ = new ::std::string;
  }
  to_auth_account_->assign(value);
}
inline void cChangeOwner::set_to_auth_account(const char* value, size_t size) {
  set_has_to_auth_account();
  if (to_auth_account_ == &::google::protobuf::internal::kEmptyString) {
    to_auth_account_ = new ::std::string;
  }
  to_auth_account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cChangeOwner::mutable_to_auth_account() {
  set_has_to_auth_account();
  if (to_auth_account_ == &::google::protobuf::internal::kEmptyString) {
    to_auth_account_ = new ::std::string;
  }
  return to_auth_account_;
}
inline ::std::string* cChangeOwner::release_to_auth_account() {
  clear_has_to_auth_account();
  if (to_auth_account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_auth_account_;
    to_auth_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cChangeOwner::set_allocated_to_auth_account(::std::string* to_auth_account) {
  if (to_auth_account_ != &::google::protobuf::internal::kEmptyString) {
    delete to_auth_account_;
  }
  if (to_auth_account) {
    set_has_to_auth_account();
    to_auth_account_ = to_auth_account;
  } else {
    clear_has_to_auth_account();
    to_auth_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sResult

// optional bool result = 1;
inline bool sResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sResult::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sResult::result() const {
  return result_;
}
inline void sResult::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional string msg = 2;
inline bool sResult::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sResult::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sResult::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sResult::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sResult::msg() const {
  return *msg_;
}
inline void sResult::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sResult::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sResult::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sResult::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sResult::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sResult::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// group_node

// optional int32 group_id = 1;
inline bool group_node::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void group_node::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void group_node::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void group_node::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 group_node::group_id() const {
  return group_id_;
}
inline void group_node::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// point

// optional string pt_x = 1;
inline bool point::has_pt_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void point::set_has_pt_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void point::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void point::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& point::pt_x() const {
  return *pt_x_;
}
inline void point::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void point::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void point::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* point::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* point::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void point::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pt_y = 2;
inline bool point::has_pt_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void point::set_has_pt_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void point::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void point::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& point::pt_y() const {
  return *pt_y_;
}
inline void point::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void point::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void point::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* point::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* point::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void point::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PuzzleInfo

// optional int32 group_id = 1;
inline bool PuzzleInfo::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PuzzleInfo::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PuzzleInfo::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PuzzleInfo::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 PuzzleInfo::group_id() const {
  return group_id_;
}
inline void PuzzleInfo::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional int32 random = 2;
inline bool PuzzleInfo::has_random() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PuzzleInfo::set_has_random() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PuzzleInfo::clear_has_random() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PuzzleInfo::clear_random() {
  random_ = 0;
  clear_has_random();
}
inline ::google::protobuf::int32 PuzzleInfo::random() const {
  return random_;
}
inline void PuzzleInfo::set_random(::google::protobuf::int32 value) {
  set_has_random();
  random_ = value;
}

// optional int32 puzzle_id = 3;
inline bool PuzzleInfo::has_puzzle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PuzzleInfo::set_has_puzzle_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PuzzleInfo::clear_has_puzzle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PuzzleInfo::clear_puzzle_id() {
  puzzle_id_ = 0;
  clear_has_puzzle_id();
}
inline ::google::protobuf::int32 PuzzleInfo::puzzle_id() const {
  return puzzle_id_;
}
inline void PuzzleInfo::set_puzzle_id(::google::protobuf::int32 value) {
  set_has_puzzle_id();
  puzzle_id_ = value;
}

// -------------------------------------------------------------------

// UpdatePuzzleResult

// optional int32 group_id = 1;
inline bool UpdatePuzzleResult::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePuzzleResult::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePuzzleResult::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePuzzleResult::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 UpdatePuzzleResult::group_id() const {
  return group_id_;
}
inline void UpdatePuzzleResult::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional int32 pic_id = 2;
inline bool UpdatePuzzleResult::has_pic_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePuzzleResult::set_has_pic_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdatePuzzleResult::clear_has_pic_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdatePuzzleResult::clear_pic_id() {
  pic_id_ = 0;
  clear_has_pic_id();
}
inline ::google::protobuf::int32 UpdatePuzzleResult::pic_id() const {
  return pic_id_;
}
inline void UpdatePuzzleResult::set_pic_id(::google::protobuf::int32 value) {
  set_has_pic_id();
  pic_id_ = value;
}

// optional string pt_x = 3;
inline bool UpdatePuzzleResult::has_pt_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdatePuzzleResult::set_has_pt_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdatePuzzleResult::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdatePuzzleResult::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& UpdatePuzzleResult::pt_x() const {
  return *pt_x_;
}
inline void UpdatePuzzleResult::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void UpdatePuzzleResult::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void UpdatePuzzleResult::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePuzzleResult::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* UpdatePuzzleResult::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePuzzleResult::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pt_y = 4;
inline bool UpdatePuzzleResult::has_pt_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdatePuzzleResult::set_has_pt_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdatePuzzleResult::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdatePuzzleResult::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& UpdatePuzzleResult::pt_y() const {
  return *pt_y_;
}
inline void UpdatePuzzleResult::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void UpdatePuzzleResult::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void UpdatePuzzleResult::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePuzzleResult::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* UpdatePuzzleResult::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePuzzleResult::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 tag = 5;
inline bool UpdatePuzzleResult::has_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdatePuzzleResult::set_has_tag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdatePuzzleResult::clear_has_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdatePuzzleResult::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
inline ::google::protobuf::int32 UpdatePuzzleResult::tag() const {
  return tag_;
}
inline void UpdatePuzzleResult::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
}

// optional int32 puzzle_id = 6;
inline bool UpdatePuzzleResult::has_puzzle_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdatePuzzleResult::set_has_puzzle_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdatePuzzleResult::clear_has_puzzle_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdatePuzzleResult::clear_puzzle_id() {
  puzzle_id_ = 0;
  clear_has_puzzle_id();
}
inline ::google::protobuf::int32 UpdatePuzzleResult::puzzle_id() const {
  return puzzle_id_;
}
inline void UpdatePuzzleResult::set_puzzle_id(::google::protobuf::int32 value) {
  set_has_puzzle_id();
  puzzle_id_ = value;
}

// -------------------------------------------------------------------

// UpdateConn

// optional int32 group_id = 1;
inline bool UpdateConn::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateConn::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateConn::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateConn::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 UpdateConn::group_id() const {
  return group_id_;
}
inline void UpdateConn::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional int32 idx = 2;
inline bool UpdateConn::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateConn::set_has_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateConn::clear_has_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateConn::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 UpdateConn::idx() const {
  return idx_;
}
inline void UpdateConn::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// optional int32 conn_id = 3;
inline bool UpdateConn::has_conn_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateConn::set_has_conn_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateConn::clear_has_conn_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateConn::clear_conn_id() {
  conn_id_ = 0;
  clear_has_conn_id();
}
inline ::google::protobuf::int32 UpdateConn::conn_id() const {
  return conn_id_;
}
inline void UpdateConn::set_conn_id(::google::protobuf::int32 value) {
  set_has_conn_id();
  conn_id_ = value;
}

// -------------------------------------------------------------------

// cGetNextStudent

// required int32 opt = 1;
inline bool cGetNextStudent::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetNextStudent::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetNextStudent::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetNextStudent::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 cGetNextStudent::opt() const {
  return opt_;
}
inline void cGetNextStudent::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// required string pos_x = 2;
inline bool cGetNextStudent::has_pos_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cGetNextStudent::set_has_pos_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cGetNextStudent::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cGetNextStudent::clear_pos_x() {
  if (pos_x_ != &::google::protobuf::internal::kEmptyString) {
    pos_x_->clear();
  }
  clear_has_pos_x();
}
inline const ::std::string& cGetNextStudent::pos_x() const {
  return *pos_x_;
}
inline void cGetNextStudent::set_pos_x(const ::std::string& value) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(value);
}
inline void cGetNextStudent::set_pos_x(const char* value) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(value);
}
inline void cGetNextStudent::set_pos_x(const char* value, size_t size) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cGetNextStudent::mutable_pos_x() {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  return pos_x_;
}
inline ::std::string* cGetNextStudent::release_pos_x() {
  clear_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pos_x_;
    pos_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cGetNextStudent::set_allocated_pos_x(::std::string* pos_x) {
  if (pos_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pos_x_;
  }
  if (pos_x) {
    set_has_pos_x();
    pos_x_ = pos_x;
  } else {
    clear_has_pos_x();
    pos_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pos_y = 3;
inline bool cGetNextStudent::has_pos_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cGetNextStudent::set_has_pos_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cGetNextStudent::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cGetNextStudent::clear_pos_y() {
  if (pos_y_ != &::google::protobuf::internal::kEmptyString) {
    pos_y_->clear();
  }
  clear_has_pos_y();
}
inline const ::std::string& cGetNextStudent::pos_y() const {
  return *pos_y_;
}
inline void cGetNextStudent::set_pos_y(const ::std::string& value) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(value);
}
inline void cGetNextStudent::set_pos_y(const char* value) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(value);
}
inline void cGetNextStudent::set_pos_y(const char* value, size_t size) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cGetNextStudent::mutable_pos_y() {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  return pos_y_;
}
inline ::std::string* cGetNextStudent::release_pos_y() {
  clear_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pos_y_;
    pos_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cGetNextStudent::set_allocated_pos_y(::std::string* pos_y) {
  if (pos_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pos_y_;
  }
  if (pos_y) {
    set_has_pos_y();
    pos_y_ = pos_y;
  } else {
    clear_has_pos_y();
    pos_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 student_id = 4;
inline bool cGetNextStudent::has_student_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cGetNextStudent::set_has_student_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cGetNextStudent::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cGetNextStudent::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cGetNextStudent::student_id() const {
  return student_id_;
}
inline void cGetNextStudent::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// sGetNextStudent

// required int32 opt = 1;
inline bool sGetNextStudent::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetNextStudent::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetNextStudent::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetNextStudent::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 sGetNextStudent::opt() const {
  return opt_;
}
inline void sGetNextStudent::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// required string pos_x = 2;
inline bool sGetNextStudent::has_pos_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetNextStudent::set_has_pos_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetNextStudent::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetNextStudent::clear_pos_x() {
  if (pos_x_ != &::google::protobuf::internal::kEmptyString) {
    pos_x_->clear();
  }
  clear_has_pos_x();
}
inline const ::std::string& sGetNextStudent::pos_x() const {
  return *pos_x_;
}
inline void sGetNextStudent::set_pos_x(const ::std::string& value) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(value);
}
inline void sGetNextStudent::set_pos_x(const char* value) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(value);
}
inline void sGetNextStudent::set_pos_x(const char* value, size_t size) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetNextStudent::mutable_pos_x() {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  return pos_x_;
}
inline ::std::string* sGetNextStudent::release_pos_x() {
  clear_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pos_x_;
    pos_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetNextStudent::set_allocated_pos_x(::std::string* pos_x) {
  if (pos_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pos_x_;
  }
  if (pos_x) {
    set_has_pos_x();
    pos_x_ = pos_x;
  } else {
    clear_has_pos_x();
    pos_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pos_y = 3;
inline bool sGetNextStudent::has_pos_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetNextStudent::set_has_pos_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetNextStudent::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetNextStudent::clear_pos_y() {
  if (pos_y_ != &::google::protobuf::internal::kEmptyString) {
    pos_y_->clear();
  }
  clear_has_pos_y();
}
inline const ::std::string& sGetNextStudent::pos_y() const {
  return *pos_y_;
}
inline void sGetNextStudent::set_pos_y(const ::std::string& value) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(value);
}
inline void sGetNextStudent::set_pos_y(const char* value) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(value);
}
inline void sGetNextStudent::set_pos_y(const char* value, size_t size) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetNextStudent::mutable_pos_y() {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  return pos_y_;
}
inline ::std::string* sGetNextStudent::release_pos_y() {
  clear_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pos_y_;
    pos_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetNextStudent::set_allocated_pos_y(::std::string* pos_y) {
  if (pos_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pos_y_;
  }
  if (pos_y) {
    set_has_pos_y();
    pos_y_ = pos_y;
  } else {
    clear_has_pos_y();
    pos_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 student_id = 4;
inline bool sGetNextStudent::has_student_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetNextStudent::set_has_student_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetNextStudent::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetNextStudent::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sGetNextStudent::student_id() const {
  return student_id_;
}
inline void sGetNextStudent::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// cUpdateDrawSet

// optional bool facsimile = 1;
inline bool cUpdateDrawSet::has_facsimile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateDrawSet::set_has_facsimile() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateDrawSet::clear_has_facsimile() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateDrawSet::clear_facsimile() {
  facsimile_ = false;
  clear_has_facsimile();
}
inline bool cUpdateDrawSet::facsimile() const {
  return facsimile_;
}
inline void cUpdateDrawSet::set_facsimile(bool value) {
  set_has_facsimile();
  facsimile_ = value;
}

// optional bool puzzle = 2;
inline bool cUpdateDrawSet::has_puzzle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateDrawSet::set_has_puzzle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateDrawSet::clear_has_puzzle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateDrawSet::clear_puzzle() {
  puzzle_ = false;
  clear_has_puzzle();
}
inline bool cUpdateDrawSet::puzzle() const {
  return puzzle_;
}
inline void cUpdateDrawSet::set_puzzle(bool value) {
  set_has_puzzle();
  puzzle_ = value;
}

// optional bool frame = 3;
inline bool cUpdateDrawSet::has_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateDrawSet::set_has_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateDrawSet::clear_has_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateDrawSet::clear_frame() {
  frame_ = false;
  clear_has_frame();
}
inline bool cUpdateDrawSet::frame() const {
  return frame_;
}
inline void cUpdateDrawSet::set_frame(bool value) {
  set_has_frame();
  frame_ = value;
}

// optional bool record = 4;
inline bool cUpdateDrawSet::has_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateDrawSet::set_has_record() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateDrawSet::clear_has_record() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateDrawSet::clear_record() {
  record_ = false;
  clear_has_record();
}
inline bool cUpdateDrawSet::record() const {
  return record_;
}
inline void cUpdateDrawSet::set_record(bool value) {
  set_has_record();
  record_ = value;
}

// optional bool world = 5;
inline bool cUpdateDrawSet::has_world() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdateDrawSet::set_has_world() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdateDrawSet::clear_has_world() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdateDrawSet::clear_world() {
  world_ = false;
  clear_has_world();
}
inline bool cUpdateDrawSet::world() const {
  return world_;
}
inline void cUpdateDrawSet::set_world(bool value) {
  set_has_world();
  world_ = value;
}

// repeated string paper_name = 6;
inline int cUpdateDrawSet::paper_name_size() const {
  return paper_name_.size();
}
inline void cUpdateDrawSet::clear_paper_name() {
  paper_name_.Clear();
}
inline const ::std::string& cUpdateDrawSet::paper_name(int index) const {
  return paper_name_.Get(index);
}
inline ::std::string* cUpdateDrawSet::mutable_paper_name(int index) {
  return paper_name_.Mutable(index);
}
inline void cUpdateDrawSet::set_paper_name(int index, const ::std::string& value) {
  paper_name_.Mutable(index)->assign(value);
}
inline void cUpdateDrawSet::set_paper_name(int index, const char* value) {
  paper_name_.Mutable(index)->assign(value);
}
inline void cUpdateDrawSet::set_paper_name(int index, const char* value, size_t size) {
  paper_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateDrawSet::add_paper_name() {
  return paper_name_.Add();
}
inline void cUpdateDrawSet::add_paper_name(const ::std::string& value) {
  paper_name_.Add()->assign(value);
}
inline void cUpdateDrawSet::add_paper_name(const char* value) {
  paper_name_.Add()->assign(value);
}
inline void cUpdateDrawSet::add_paper_name(const char* value, size_t size) {
  paper_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
cUpdateDrawSet::paper_name() const {
  return paper_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
cUpdateDrawSet::mutable_paper_name() {
  return &paper_name_;
}

// repeated int32 pen_id = 7;
inline int cUpdateDrawSet::pen_id_size() const {
  return pen_id_.size();
}
inline void cUpdateDrawSet::clear_pen_id() {
  pen_id_.Clear();
}
inline ::google::protobuf::int32 cUpdateDrawSet::pen_id(int index) const {
  return pen_id_.Get(index);
}
inline void cUpdateDrawSet::set_pen_id(int index, ::google::protobuf::int32 value) {
  pen_id_.Set(index, value);
}
inline void cUpdateDrawSet::add_pen_id(::google::protobuf::int32 value) {
  pen_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cUpdateDrawSet::pen_id() const {
  return pen_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cUpdateDrawSet::mutable_pen_id() {
  return &pen_id_;
}

// -------------------------------------------------------------------

// cUpdateDrawInfo

// -------------------------------------------------------------------

// sUpdateDrawInfo

// -------------------------------------------------------------------

// cUpdateBackground

// required int32 student_id = 2;
inline bool cUpdateBackground::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateBackground::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateBackground::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateBackground::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateBackground::student_id() const {
  return student_id_;
}
inline void cUpdateBackground::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 paper_id = 1;
inline bool cUpdateBackground::has_paper_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateBackground::set_has_paper_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateBackground::clear_has_paper_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateBackground::clear_paper_id() {
  paper_id_ = 0;
  clear_has_paper_id();
}
inline ::google::protobuf::int32 cUpdateBackground::paper_id() const {
  return paper_id_;
}
inline void cUpdateBackground::set_paper_id(::google::protobuf::int32 value) {
  set_has_paper_id();
  paper_id_ = value;
}

// -------------------------------------------------------------------

// sUpdateBackground

// required int32 student_id = 2;
inline bool sUpdateBackground::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateBackground::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateBackground::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateBackground::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateBackground::student_id() const {
  return student_id_;
}
inline void sUpdateBackground::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 paper_id = 1;
inline bool sUpdateBackground::has_paper_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateBackground::set_has_paper_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateBackground::clear_has_paper_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateBackground::clear_paper_id() {
  paper_id_ = 0;
  clear_has_paper_id();
}
inline ::google::protobuf::int32 sUpdateBackground::paper_id() const {
  return paper_id_;
}
inline void sUpdateBackground::set_paper_id(::google::protobuf::int32 value) {
  set_has_paper_id();
  paper_id_ = value;
}

// -------------------------------------------------------------------

// cUpdateCopyIntoPaint

// required int32 student_id = 8;
inline bool cUpdateCopyIntoPaint::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateCopyIntoPaint::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateCopyIntoPaint::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateCopyIntoPaint::student_id() const {
  return student_id_;
}
inline void cUpdateCopyIntoPaint::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 pic_id = 1;
inline bool cUpdateCopyIntoPaint::has_pic_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pic_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateCopyIntoPaint::clear_has_pic_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateCopyIntoPaint::clear_pic_id() {
  pic_id_ = 0;
  clear_has_pic_id();
}
inline ::google::protobuf::int32 cUpdateCopyIntoPaint::pic_id() const {
  return pic_id_;
}
inline void cUpdateCopyIntoPaint::set_pic_id(::google::protobuf::int32 value) {
  set_has_pic_id();
  pic_id_ = value;
}

// required string pic_res = 2;
inline bool cUpdateCopyIntoPaint::has_pic_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pic_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateCopyIntoPaint::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateCopyIntoPaint::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& cUpdateCopyIntoPaint::pic_res() const {
  return *pic_res_;
}
inline void cUpdateCopyIntoPaint::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_scale = 3;
inline bool cUpdateCopyIntoPaint::has_pic_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pic_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateCopyIntoPaint::clear_has_pic_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateCopyIntoPaint::clear_pic_scale() {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    pic_scale_->clear();
  }
  clear_has_pic_scale();
}
inline const ::std::string& cUpdateCopyIntoPaint::pic_scale() const {
  return *pic_scale_;
}
inline void cUpdateCopyIntoPaint::set_pic_scale(const ::std::string& value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_scale(const char* value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_scale(const char* value, size_t size) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pic_scale() {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  return pic_scale_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pic_scale() {
  clear_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_scale_;
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pic_scale(::std::string* pic_scale) {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_scale_;
  }
  if (pic_scale) {
    set_has_pic_scale();
    pic_scale_ = pic_scale;
  } else {
    clear_has_pic_scale();
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_rotation = 4;
inline bool cUpdateCopyIntoPaint::has_pic_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pic_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdateCopyIntoPaint::clear_has_pic_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdateCopyIntoPaint::clear_pic_rotation() {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    pic_rotation_->clear();
  }
  clear_has_pic_rotation();
}
inline const ::std::string& cUpdateCopyIntoPaint::pic_rotation() const {
  return *pic_rotation_;
}
inline void cUpdateCopyIntoPaint::set_pic_rotation(const ::std::string& value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_rotation(const char* value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_rotation(const char* value, size_t size) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pic_rotation() {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  return pic_rotation_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pic_rotation() {
  clear_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_rotation_;
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pic_rotation(::std::string* pic_rotation) {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_rotation_;
  }
  if (pic_rotation) {
    set_has_pic_rotation();
    pic_rotation_ = pic_rotation;
  } else {
    clear_has_pic_rotation();
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 5;
inline bool cUpdateCopyIntoPaint::has_pt_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pt_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cUpdateCopyIntoPaint::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cUpdateCopyIntoPaint::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdateCopyIntoPaint::pt_x() const {
  return *pt_x_;
}
inline void cUpdateCopyIntoPaint::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 6;
inline bool cUpdateCopyIntoPaint::has_pt_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pt_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cUpdateCopyIntoPaint::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cUpdateCopyIntoPaint::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdateCopyIntoPaint::pt_y() const {
  return *pt_y_;
}
inline void cUpdateCopyIntoPaint::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 op_type = 7;
inline bool cUpdateCopyIntoPaint::has_op_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_op_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cUpdateCopyIntoPaint::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cUpdateCopyIntoPaint::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 cUpdateCopyIntoPaint::op_type() const {
  return op_type_;
}
inline void cUpdateCopyIntoPaint::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// -------------------------------------------------------------------

// sUpdateCopyIntoPaint

// required int32 student_id = 8;
inline bool sUpdateCopyIntoPaint::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateCopyIntoPaint::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateCopyIntoPaint::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateCopyIntoPaint::student_id() const {
  return student_id_;
}
inline void sUpdateCopyIntoPaint::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 pic_id = 1;
inline bool sUpdateCopyIntoPaint::has_pic_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pic_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateCopyIntoPaint::clear_has_pic_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateCopyIntoPaint::clear_pic_id() {
  pic_id_ = 0;
  clear_has_pic_id();
}
inline ::google::protobuf::int32 sUpdateCopyIntoPaint::pic_id() const {
  return pic_id_;
}
inline void sUpdateCopyIntoPaint::set_pic_id(::google::protobuf::int32 value) {
  set_has_pic_id();
  pic_id_ = value;
}

// required string pic_res = 2;
inline bool sUpdateCopyIntoPaint::has_pic_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pic_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateCopyIntoPaint::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateCopyIntoPaint::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& sUpdateCopyIntoPaint::pic_res() const {
  return *pic_res_;
}
inline void sUpdateCopyIntoPaint::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_scale = 3;
inline bool sUpdateCopyIntoPaint::has_pic_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pic_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdateCopyIntoPaint::clear_has_pic_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdateCopyIntoPaint::clear_pic_scale() {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    pic_scale_->clear();
  }
  clear_has_pic_scale();
}
inline const ::std::string& sUpdateCopyIntoPaint::pic_scale() const {
  return *pic_scale_;
}
inline void sUpdateCopyIntoPaint::set_pic_scale(const ::std::string& value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_scale(const char* value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_scale(const char* value, size_t size) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pic_scale() {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  return pic_scale_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pic_scale() {
  clear_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_scale_;
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pic_scale(::std::string* pic_scale) {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_scale_;
  }
  if (pic_scale) {
    set_has_pic_scale();
    pic_scale_ = pic_scale;
  } else {
    clear_has_pic_scale();
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_rotation = 4;
inline bool sUpdateCopyIntoPaint::has_pic_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pic_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sUpdateCopyIntoPaint::clear_has_pic_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sUpdateCopyIntoPaint::clear_pic_rotation() {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    pic_rotation_->clear();
  }
  clear_has_pic_rotation();
}
inline const ::std::string& sUpdateCopyIntoPaint::pic_rotation() const {
  return *pic_rotation_;
}
inline void sUpdateCopyIntoPaint::set_pic_rotation(const ::std::string& value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_rotation(const char* value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_rotation(const char* value, size_t size) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pic_rotation() {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  return pic_rotation_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pic_rotation() {
  clear_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_rotation_;
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pic_rotation(::std::string* pic_rotation) {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_rotation_;
  }
  if (pic_rotation) {
    set_has_pic_rotation();
    pic_rotation_ = pic_rotation;
  } else {
    clear_has_pic_rotation();
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 5;
inline bool sUpdateCopyIntoPaint::has_pt_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pt_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sUpdateCopyIntoPaint::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sUpdateCopyIntoPaint::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdateCopyIntoPaint::pt_x() const {
  return *pt_x_;
}
inline void sUpdateCopyIntoPaint::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 6;
inline bool sUpdateCopyIntoPaint::has_pt_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pt_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sUpdateCopyIntoPaint::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sUpdateCopyIntoPaint::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdateCopyIntoPaint::pt_y() const {
  return *pt_y_;
}
inline void sUpdateCopyIntoPaint::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 op_type = 7;
inline bool sUpdateCopyIntoPaint::has_op_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_op_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sUpdateCopyIntoPaint::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sUpdateCopyIntoPaint::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 sUpdateCopyIntoPaint::op_type() const {
  return op_type_;
}
inline void sUpdateCopyIntoPaint::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// -------------------------------------------------------------------

// UpdatePenAndEraserNode

// required int32 student_id = 10;
inline bool UpdatePenAndEraserNode::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePenAndEraserNode::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePenAndEraserNode::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 UpdatePenAndEraserNode::student_id() const {
  return student_id_;
}
inline void UpdatePenAndEraserNode::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 pen_type = 1;
inline bool UpdatePenAndEraserNode::has_pen_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_pen_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdatePenAndEraserNode::clear_has_pen_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdatePenAndEraserNode::clear_pen_type() {
  pen_type_ = 0;
  clear_has_pen_type();
}
inline ::google::protobuf::int32 UpdatePenAndEraserNode::pen_type() const {
  return pen_type_;
}
inline void UpdatePenAndEraserNode::set_pen_type(::google::protobuf::int32 value) {
  set_has_pen_type();
  pen_type_ = value;
}

// required int32 pen_color = 2;
inline bool UpdatePenAndEraserNode::has_pen_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_pen_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdatePenAndEraserNode::clear_has_pen_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdatePenAndEraserNode::clear_pen_color() {
  pen_color_ = 0;
  clear_has_pen_color();
}
inline ::google::protobuf::int32 UpdatePenAndEraserNode::pen_color() const {
  return pen_color_;
}
inline void UpdatePenAndEraserNode::set_pen_color(::google::protobuf::int32 value) {
  set_has_pen_color();
  pen_color_ = value;
}

// required string pen_size = 3;
inline bool UpdatePenAndEraserNode::has_pen_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_pen_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdatePenAndEraserNode::clear_has_pen_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdatePenAndEraserNode::clear_pen_size() {
  if (pen_size_ != &::google::protobuf::internal::kEmptyString) {
    pen_size_->clear();
  }
  clear_has_pen_size();
}
inline const ::std::string& UpdatePenAndEraserNode::pen_size() const {
  return *pen_size_;
}
inline void UpdatePenAndEraserNode::set_pen_size(const ::std::string& value) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(value);
}
inline void UpdatePenAndEraserNode::set_pen_size(const char* value) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(value);
}
inline void UpdatePenAndEraserNode::set_pen_size(const char* value, size_t size) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePenAndEraserNode::mutable_pen_size() {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  return pen_size_;
}
inline ::std::string* UpdatePenAndEraserNode::release_pen_size() {
  clear_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pen_size_;
    pen_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePenAndEraserNode::set_allocated_pen_size(::std::string* pen_size) {
  if (pen_size_ != &::google::protobuf::internal::kEmptyString) {
    delete pen_size_;
  }
  if (pen_size) {
    set_has_pen_size();
    pen_size_ = pen_size;
  } else {
    clear_has_pen_size();
    pen_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pen_trans = 4;
inline bool UpdatePenAndEraserNode::has_pen_trans() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_pen_trans() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdatePenAndEraserNode::clear_has_pen_trans() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdatePenAndEraserNode::clear_pen_trans() {
  pen_trans_ = 0;
  clear_has_pen_trans();
}
inline ::google::protobuf::int32 UpdatePenAndEraserNode::pen_trans() const {
  return pen_trans_;
}
inline void UpdatePenAndEraserNode::set_pen_trans(::google::protobuf::int32 value) {
  set_has_pen_trans();
  pen_trans_ = value;
}

// required int32 paint_type = 5;
inline bool UpdatePenAndEraserNode::has_paint_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_paint_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdatePenAndEraserNode::clear_has_paint_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdatePenAndEraserNode::clear_paint_type() {
  paint_type_ = 0;
  clear_has_paint_type();
}
inline ::google::protobuf::int32 UpdatePenAndEraserNode::paint_type() const {
  return paint_type_;
}
inline void UpdatePenAndEraserNode::set_paint_type(::google::protobuf::int32 value) {
  set_has_paint_type();
  paint_type_ = value;
}

// required string pt_x = 6;
inline bool UpdatePenAndEraserNode::has_pt_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_pt_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdatePenAndEraserNode::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdatePenAndEraserNode::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& UpdatePenAndEraserNode::pt_x() const {
  return *pt_x_;
}
inline void UpdatePenAndEraserNode::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void UpdatePenAndEraserNode::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void UpdatePenAndEraserNode::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePenAndEraserNode::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* UpdatePenAndEraserNode::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePenAndEraserNode::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 7;
inline bool UpdatePenAndEraserNode::has_pt_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_pt_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpdatePenAndEraserNode::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpdatePenAndEraserNode::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& UpdatePenAndEraserNode::pt_y() const {
  return *pt_y_;
}
inline void UpdatePenAndEraserNode::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void UpdatePenAndEraserNode::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void UpdatePenAndEraserNode::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePenAndEraserNode::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* UpdatePenAndEraserNode::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePenAndEraserNode::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prept_x = 8;
inline bool UpdatePenAndEraserNode::has_prept_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_prept_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UpdatePenAndEraserNode::clear_has_prept_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UpdatePenAndEraserNode::clear_prept_x() {
  if (prept_x_ != &::google::protobuf::internal::kEmptyString) {
    prept_x_->clear();
  }
  clear_has_prept_x();
}
inline const ::std::string& UpdatePenAndEraserNode::prept_x() const {
  return *prept_x_;
}
inline void UpdatePenAndEraserNode::set_prept_x(const ::std::string& value) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(value);
}
inline void UpdatePenAndEraserNode::set_prept_x(const char* value) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(value);
}
inline void UpdatePenAndEraserNode::set_prept_x(const char* value, size_t size) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePenAndEraserNode::mutable_prept_x() {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  return prept_x_;
}
inline ::std::string* UpdatePenAndEraserNode::release_prept_x() {
  clear_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prept_x_;
    prept_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePenAndEraserNode::set_allocated_prept_x(::std::string* prept_x) {
  if (prept_x_ != &::google::protobuf::internal::kEmptyString) {
    delete prept_x_;
  }
  if (prept_x) {
    set_has_prept_x();
    prept_x_ = prept_x;
  } else {
    clear_has_prept_x();
    prept_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prept_y = 9;
inline bool UpdatePenAndEraserNode::has_prept_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UpdatePenAndEraserNode::set_has_prept_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UpdatePenAndEraserNode::clear_has_prept_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UpdatePenAndEraserNode::clear_prept_y() {
  if (prept_y_ != &::google::protobuf::internal::kEmptyString) {
    prept_y_->clear();
  }
  clear_has_prept_y();
}
inline const ::std::string& UpdatePenAndEraserNode::prept_y() const {
  return *prept_y_;
}
inline void UpdatePenAndEraserNode::set_prept_y(const ::std::string& value) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(value);
}
inline void UpdatePenAndEraserNode::set_prept_y(const char* value) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(value);
}
inline void UpdatePenAndEraserNode::set_prept_y(const char* value, size_t size) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePenAndEraserNode::mutable_prept_y() {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  return prept_y_;
}
inline ::std::string* UpdatePenAndEraserNode::release_prept_y() {
  clear_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prept_y_;
    prept_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePenAndEraserNode::set_allocated_prept_y(::std::string* prept_y) {
  if (prept_y_ != &::google::protobuf::internal::kEmptyString) {
    delete prept_y_;
  }
  if (prept_y) {
    set_has_prept_y();
    prept_y_ = prept_y;
  } else {
    clear_has_prept_y();
    prept_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cUpdatePenAnderaser

// repeated .UpdatePenAndEraserNode node = 1;
inline int cUpdatePenAnderaser::node_size() const {
  return node_.size();
}
inline void cUpdatePenAnderaser::clear_node() {
  node_.Clear();
}
inline const ::UpdatePenAndEraserNode& cUpdatePenAnderaser::node(int index) const {
  return node_.Get(index);
}
inline ::UpdatePenAndEraserNode* cUpdatePenAnderaser::mutable_node(int index) {
  return node_.Mutable(index);
}
inline ::UpdatePenAndEraserNode* cUpdatePenAnderaser::add_node() {
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UpdatePenAndEraserNode >&
cUpdatePenAnderaser::node() const {
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::UpdatePenAndEraserNode >*
cUpdatePenAnderaser::mutable_node() {
  return &node_;
}

// -------------------------------------------------------------------

// sUpdatePenAnderaser

// required int32 student_id = 10;
inline bool sUpdatePenAnderaser::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdatePenAnderaser::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdatePenAnderaser::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdatePenAnderaser::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::student_id() const {
  return student_id_;
}
inline void sUpdatePenAnderaser::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 pen_type = 1;
inline bool sUpdatePenAnderaser::has_pen_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pen_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdatePenAnderaser::clear_has_pen_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdatePenAnderaser::clear_pen_type() {
  pen_type_ = 0;
  clear_has_pen_type();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::pen_type() const {
  return pen_type_;
}
inline void sUpdatePenAnderaser::set_pen_type(::google::protobuf::int32 value) {
  set_has_pen_type();
  pen_type_ = value;
}

// required int32 pen_color = 2;
inline bool sUpdatePenAnderaser::has_pen_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pen_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdatePenAnderaser::clear_has_pen_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdatePenAnderaser::clear_pen_color() {
  pen_color_ = 0;
  clear_has_pen_color();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::pen_color() const {
  return pen_color_;
}
inline void sUpdatePenAnderaser::set_pen_color(::google::protobuf::int32 value) {
  set_has_pen_color();
  pen_color_ = value;
}

// required string pen_size = 3;
inline bool sUpdatePenAnderaser::has_pen_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pen_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdatePenAnderaser::clear_has_pen_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdatePenAnderaser::clear_pen_size() {
  if (pen_size_ != &::google::protobuf::internal::kEmptyString) {
    pen_size_->clear();
  }
  clear_has_pen_size();
}
inline const ::std::string& sUpdatePenAnderaser::pen_size() const {
  return *pen_size_;
}
inline void sUpdatePenAnderaser::set_pen_size(const ::std::string& value) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(value);
}
inline void sUpdatePenAnderaser::set_pen_size(const char* value) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(value);
}
inline void sUpdatePenAnderaser::set_pen_size(const char* value, size_t size) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_pen_size() {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  return pen_size_;
}
inline ::std::string* sUpdatePenAnderaser::release_pen_size() {
  clear_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pen_size_;
    pen_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_pen_size(::std::string* pen_size) {
  if (pen_size_ != &::google::protobuf::internal::kEmptyString) {
    delete pen_size_;
  }
  if (pen_size) {
    set_has_pen_size();
    pen_size_ = pen_size;
  } else {
    clear_has_pen_size();
    pen_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pen_trans = 4;
inline bool sUpdatePenAnderaser::has_pen_trans() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pen_trans() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sUpdatePenAnderaser::clear_has_pen_trans() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sUpdatePenAnderaser::clear_pen_trans() {
  pen_trans_ = 0;
  clear_has_pen_trans();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::pen_trans() const {
  return pen_trans_;
}
inline void sUpdatePenAnderaser::set_pen_trans(::google::protobuf::int32 value) {
  set_has_pen_trans();
  pen_trans_ = value;
}

// required int32 paint_type = 5;
inline bool sUpdatePenAnderaser::has_paint_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sUpdatePenAnderaser::set_has_paint_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sUpdatePenAnderaser::clear_has_paint_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sUpdatePenAnderaser::clear_paint_type() {
  paint_type_ = 0;
  clear_has_paint_type();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::paint_type() const {
  return paint_type_;
}
inline void sUpdatePenAnderaser::set_paint_type(::google::protobuf::int32 value) {
  set_has_paint_type();
  paint_type_ = value;
}

// required string pt_x = 6;
inline bool sUpdatePenAnderaser::has_pt_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pt_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sUpdatePenAnderaser::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sUpdatePenAnderaser::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdatePenAnderaser::pt_x() const {
  return *pt_x_;
}
inline void sUpdatePenAnderaser::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdatePenAnderaser::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdatePenAnderaser::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdatePenAnderaser::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 7;
inline bool sUpdatePenAnderaser::has_pt_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pt_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sUpdatePenAnderaser::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sUpdatePenAnderaser::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdatePenAnderaser::pt_y() const {
  return *pt_y_;
}
inline void sUpdatePenAnderaser::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdatePenAnderaser::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdatePenAnderaser::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdatePenAnderaser::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prept_x = 8;
inline bool sUpdatePenAnderaser::has_prept_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sUpdatePenAnderaser::set_has_prept_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sUpdatePenAnderaser::clear_has_prept_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sUpdatePenAnderaser::clear_prept_x() {
  if (prept_x_ != &::google::protobuf::internal::kEmptyString) {
    prept_x_->clear();
  }
  clear_has_prept_x();
}
inline const ::std::string& sUpdatePenAnderaser::prept_x() const {
  return *prept_x_;
}
inline void sUpdatePenAnderaser::set_prept_x(const ::std::string& value) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(value);
}
inline void sUpdatePenAnderaser::set_prept_x(const char* value) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(value);
}
inline void sUpdatePenAnderaser::set_prept_x(const char* value, size_t size) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_prept_x() {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  return prept_x_;
}
inline ::std::string* sUpdatePenAnderaser::release_prept_x() {
  clear_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prept_x_;
    prept_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_prept_x(::std::string* prept_x) {
  if (prept_x_ != &::google::protobuf::internal::kEmptyString) {
    delete prept_x_;
  }
  if (prept_x) {
    set_has_prept_x();
    prept_x_ = prept_x;
  } else {
    clear_has_prept_x();
    prept_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prept_y = 9;
inline bool sUpdatePenAnderaser::has_prept_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sUpdatePenAnderaser::set_has_prept_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sUpdatePenAnderaser::clear_has_prept_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sUpdatePenAnderaser::clear_prept_y() {
  if (prept_y_ != &::google::protobuf::internal::kEmptyString) {
    prept_y_->clear();
  }
  clear_has_prept_y();
}
inline const ::std::string& sUpdatePenAnderaser::prept_y() const {
  return *prept_y_;
}
inline void sUpdatePenAnderaser::set_prept_y(const ::std::string& value) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(value);
}
inline void sUpdatePenAnderaser::set_prept_y(const char* value) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(value);
}
inline void sUpdatePenAnderaser::set_prept_y(const char* value, size_t size) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_prept_y() {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  return prept_y_;
}
inline ::std::string* sUpdatePenAnderaser::release_prept_y() {
  clear_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prept_y_;
    prept_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_prept_y(::std::string* prept_y) {
  if (prept_y_ != &::google::protobuf::internal::kEmptyString) {
    delete prept_y_;
  }
  if (prept_y) {
    set_has_prept_y();
    prept_y_ = prept_y;
  } else {
    clear_has_prept_y();
    prept_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cUpdateFilling

// required int32 student_id = 4;
inline bool cUpdateFilling::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateFilling::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateFilling::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateFilling::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateFilling::student_id() const {
  return student_id_;
}
inline void cUpdateFilling::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required string pt_list = 1;
inline bool cUpdateFilling::has_pt_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateFilling::set_has_pt_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateFilling::clear_has_pt_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateFilling::clear_pt_list() {
  if (pt_list_ != &::google::protobuf::internal::kEmptyString) {
    pt_list_->clear();
  }
  clear_has_pt_list();
}
inline const ::std::string& cUpdateFilling::pt_list() const {
  return *pt_list_;
}
inline void cUpdateFilling::set_pt_list(const ::std::string& value) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(value);
}
inline void cUpdateFilling::set_pt_list(const char* value) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(value);
}
inline void cUpdateFilling::set_pt_list(const char* value, size_t size) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateFilling::mutable_pt_list() {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  return pt_list_;
}
inline ::std::string* cUpdateFilling::release_pt_list() {
  clear_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_list_;
    pt_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateFilling::set_allocated_pt_list(::std::string* pt_list) {
  if (pt_list_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_list_;
  }
  if (pt_list) {
    set_has_pt_list();
    pt_list_ = pt_list;
  } else {
    clear_has_pt_list();
    pt_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 trans = 3;
inline bool cUpdateFilling::has_trans() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateFilling::set_has_trans() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateFilling::clear_has_trans() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateFilling::clear_trans() {
  trans_ = 0;
  clear_has_trans();
}
inline ::google::protobuf::int32 cUpdateFilling::trans() const {
  return trans_;
}
inline void cUpdateFilling::set_trans(::google::protobuf::int32 value) {
  set_has_trans();
  trans_ = value;
}

// required int32 color = 2;
inline bool cUpdateFilling::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateFilling::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateFilling::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateFilling::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 cUpdateFilling::color() const {
  return color_;
}
inline void cUpdateFilling::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// sUpdateFilling

// required int32 student_id = 4;
inline bool sUpdateFilling::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateFilling::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateFilling::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateFilling::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateFilling::student_id() const {
  return student_id_;
}
inline void sUpdateFilling::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required string pt_list = 1;
inline bool sUpdateFilling::has_pt_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateFilling::set_has_pt_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateFilling::clear_has_pt_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateFilling::clear_pt_list() {
  if (pt_list_ != &::google::protobuf::internal::kEmptyString) {
    pt_list_->clear();
  }
  clear_has_pt_list();
}
inline const ::std::string& sUpdateFilling::pt_list() const {
  return *pt_list_;
}
inline void sUpdateFilling::set_pt_list(const ::std::string& value) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(value);
}
inline void sUpdateFilling::set_pt_list(const char* value) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(value);
}
inline void sUpdateFilling::set_pt_list(const char* value, size_t size) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateFilling::mutable_pt_list() {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  return pt_list_;
}
inline ::std::string* sUpdateFilling::release_pt_list() {
  clear_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_list_;
    pt_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateFilling::set_allocated_pt_list(::std::string* pt_list) {
  if (pt_list_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_list_;
  }
  if (pt_list) {
    set_has_pt_list();
    pt_list_ = pt_list;
  } else {
    clear_has_pt_list();
    pt_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 trans = 3;
inline bool sUpdateFilling::has_trans() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateFilling::set_has_trans() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateFilling::clear_has_trans() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateFilling::clear_trans() {
  trans_ = 0;
  clear_has_trans();
}
inline ::google::protobuf::int32 sUpdateFilling::trans() const {
  return trans_;
}
inline void sUpdateFilling::set_trans(::google::protobuf::int32 value) {
  set_has_trans();
  trans_ = value;
}

// required int32 color = 2;
inline bool sUpdateFilling::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdateFilling::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdateFilling::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdateFilling::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 sUpdateFilling::color() const {
  return color_;
}
inline void sUpdateFilling::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// cUpdateStamp

// required int32 student_id = 4;
inline bool cUpdateStamp::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateStamp::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateStamp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateStamp::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateStamp::student_id() const {
  return student_id_;
}
inline void cUpdateStamp::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required string pic_res = 1;
inline bool cUpdateStamp::has_pic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateStamp::set_has_pic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateStamp::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateStamp::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& cUpdateStamp::pic_res() const {
  return *pic_res_;
}
inline void cUpdateStamp::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateStamp::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateStamp::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateStamp::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* cUpdateStamp::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateStamp::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 2;
inline bool cUpdateStamp::has_pt_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateStamp::set_has_pt_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateStamp::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateStamp::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdateStamp::pt_x() const {
  return *pt_x_;
}
inline void cUpdateStamp::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateStamp::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateStamp::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateStamp::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdateStamp::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateStamp::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 3;
inline bool cUpdateStamp::has_pt_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateStamp::set_has_pt_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateStamp::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateStamp::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdateStamp::pt_y() const {
  return *pt_y_;
}
inline void cUpdateStamp::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateStamp::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateStamp::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateStamp::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdateStamp::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateStamp::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sUpdateStamp

// required int32 student_id = 4;
inline bool sUpdateStamp::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateStamp::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateStamp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateStamp::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateStamp::student_id() const {
  return student_id_;
}
inline void sUpdateStamp::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required string pic_res = 1;
inline bool sUpdateStamp::has_pic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateStamp::set_has_pic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateStamp::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateStamp::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& sUpdateStamp::pic_res() const {
  return *pic_res_;
}
inline void sUpdateStamp::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateStamp::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateStamp::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateStamp::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* sUpdateStamp::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateStamp::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 2;
inline bool sUpdateStamp::has_pt_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateStamp::set_has_pt_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateStamp::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateStamp::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdateStamp::pt_x() const {
  return *pt_x_;
}
inline void sUpdateStamp::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateStamp::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateStamp::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateStamp::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdateStamp::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateStamp::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 3;
inline bool sUpdateStamp::has_pt_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdateStamp::set_has_pt_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdateStamp::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdateStamp::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdateStamp::pt_y() const {
  return *pt_y_;
}
inline void sUpdateStamp::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateStamp::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateStamp::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateStamp::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdateStamp::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateStamp::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cUpdateFillPic

// required int32 student_id = 4;
inline bool cUpdateFillPic::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateFillPic::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateFillPic::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateFillPic::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateFillPic::student_id() const {
  return student_id_;
}
inline void cUpdateFillPic::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required string pic_res = 1;
inline bool cUpdateFillPic::has_pic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateFillPic::set_has_pic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateFillPic::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateFillPic::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& cUpdateFillPic::pic_res() const {
  return *pic_res_;
}
inline void cUpdateFillPic::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateFillPic::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateFillPic::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateFillPic::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* cUpdateFillPic::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateFillPic::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 2;
inline bool cUpdateFillPic::has_pt_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateFillPic::set_has_pt_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateFillPic::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateFillPic::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdateFillPic::pt_x() const {
  return *pt_x_;
}
inline void cUpdateFillPic::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateFillPic::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateFillPic::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateFillPic::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdateFillPic::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateFillPic::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 3;
inline bool cUpdateFillPic::has_pt_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateFillPic::set_has_pt_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateFillPic::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateFillPic::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdateFillPic::pt_y() const {
  return *pt_y_;
}
inline void cUpdateFillPic::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateFillPic::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateFillPic::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateFillPic::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdateFillPic::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateFillPic::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sUpdateFillPic

// required int32 student_id = 4;
inline bool sUpdateFillPic::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateFillPic::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateFillPic::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateFillPic::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateFillPic::student_id() const {
  return student_id_;
}
inline void sUpdateFillPic::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required string pic_res = 1;
inline bool sUpdateFillPic::has_pic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateFillPic::set_has_pic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateFillPic::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateFillPic::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& sUpdateFillPic::pic_res() const {
  return *pic_res_;
}
inline void sUpdateFillPic::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateFillPic::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateFillPic::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateFillPic::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* sUpdateFillPic::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateFillPic::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 2;
inline bool sUpdateFillPic::has_pt_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateFillPic::set_has_pt_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateFillPic::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateFillPic::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdateFillPic::pt_x() const {
  return *pt_x_;
}
inline void sUpdateFillPic::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateFillPic::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateFillPic::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateFillPic::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdateFillPic::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateFillPic::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 3;
inline bool sUpdateFillPic::has_pt_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdateFillPic::set_has_pt_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdateFillPic::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdateFillPic::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdateFillPic::pt_y() const {
  return *pt_y_;
}
inline void sUpdateFillPic::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateFillPic::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateFillPic::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateFillPic::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdateFillPic::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateFillPic::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cUpdateMutex

// required int32 student_id = 3;
inline bool cUpdateMutex::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateMutex::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateMutex::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateMutex::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateMutex::student_id() const {
  return student_id_;
}
inline void cUpdateMutex::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required .mutex_status ms = 1 [default = MS_LOCK];
inline bool cUpdateMutex::has_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateMutex::set_has_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateMutex::clear_has_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateMutex::clear_ms() {
  ms_ = 1;
  clear_has_ms();
}
inline ::mutex_status cUpdateMutex::ms() const {
  return static_cast< ::mutex_status >(ms_);
}
inline void cUpdateMutex::set_ms(::mutex_status value) {
  assert(::mutex_status_IsValid(value));
  set_has_ms();
  ms_ = value;
}

// required int32 lock_id = 2;
inline bool cUpdateMutex::has_lock_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateMutex::set_has_lock_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateMutex::clear_has_lock_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateMutex::clear_lock_id() {
  lock_id_ = 0;
  clear_has_lock_id();
}
inline ::google::protobuf::int32 cUpdateMutex::lock_id() const {
  return lock_id_;
}
inline void cUpdateMutex::set_lock_id(::google::protobuf::int32 value) {
  set_has_lock_id();
  lock_id_ = value;
}

// -------------------------------------------------------------------

// sUpdateMutex

// required int32 student_id = 3;
inline bool sUpdateMutex::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateMutex::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateMutex::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateMutex::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateMutex::student_id() const {
  return student_id_;
}
inline void sUpdateMutex::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 lock_id = 2;
inline bool sUpdateMutex::has_lock_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateMutex::set_has_lock_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateMutex::clear_has_lock_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateMutex::clear_lock_id() {
  lock_id_ = 0;
  clear_has_lock_id();
}
inline ::google::protobuf::int32 sUpdateMutex::lock_id() const {
  return lock_id_;
}
inline void sUpdateMutex::set_lock_id(::google::protobuf::int32 value) {
  set_has_lock_id();
  lock_id_ = value;
}

// optional int32 result = 1;
inline bool sUpdateMutex::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateMutex::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateMutex::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateMutex::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 sUpdateMutex::result() const {
  return result_;
}
inline void sUpdateMutex::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .mutex_status ms = 4 [default = MS_LOCK];
inline bool sUpdateMutex::has_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdateMutex::set_has_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdateMutex::clear_has_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdateMutex::clear_ms() {
  ms_ = 1;
  clear_has_ms();
}
inline ::mutex_status sUpdateMutex::ms() const {
  return static_cast< ::mutex_status >(ms_);
}
inline void sUpdateMutex::set_ms(::mutex_status value) {
  assert(::mutex_status_IsValid(value));
  set_has_ms();
  ms_ = value;
}

// -------------------------------------------------------------------

// cUpdateCollage

// required int32 student_id = 10;
inline bool cUpdateCollage::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateCollage::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateCollage::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateCollage::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateCollage::student_id() const {
  return student_id_;
}
inline void cUpdateCollage::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 id = 9;
inline bool cUpdateCollage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateCollage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateCollage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateCollage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cUpdateCollage::id() const {
  return id_;
}
inline void cUpdateCollage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string pic_res = 1;
inline bool cUpdateCollage::has_pic_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateCollage::set_has_pic_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateCollage::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateCollage::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& cUpdateCollage::pic_res() const {
  return *pic_res_;
}
inline void cUpdateCollage::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateCollage::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateCollage::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* cUpdateCollage::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pic_type = 2;
inline bool cUpdateCollage::has_pic_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateCollage::set_has_pic_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateCollage::clear_has_pic_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateCollage::clear_pic_type() {
  pic_type_ = 0;
  clear_has_pic_type();
}
inline ::google::protobuf::int32 cUpdateCollage::pic_type() const {
  return pic_type_;
}
inline void cUpdateCollage::set_pic_type(::google::protobuf::int32 value) {
  set_has_pic_type();
  pic_type_ = value;
}

// required string pic_scale = 3;
inline bool cUpdateCollage::has_pic_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdateCollage::set_has_pic_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdateCollage::clear_has_pic_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdateCollage::clear_pic_scale() {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    pic_scale_->clear();
  }
  clear_has_pic_scale();
}
inline const ::std::string& cUpdateCollage::pic_scale() const {
  return *pic_scale_;
}
inline void cUpdateCollage::set_pic_scale(const ::std::string& value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void cUpdateCollage::set_pic_scale(const char* value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void cUpdateCollage::set_pic_scale(const char* value, size_t size) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pic_scale() {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  return pic_scale_;
}
inline ::std::string* cUpdateCollage::release_pic_scale() {
  clear_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_scale_;
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pic_scale(::std::string* pic_scale) {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_scale_;
  }
  if (pic_scale) {
    set_has_pic_scale();
    pic_scale_ = pic_scale;
  } else {
    clear_has_pic_scale();
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_rotation = 4;
inline bool cUpdateCollage::has_pic_rotation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cUpdateCollage::set_has_pic_rotation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cUpdateCollage::clear_has_pic_rotation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cUpdateCollage::clear_pic_rotation() {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    pic_rotation_->clear();
  }
  clear_has_pic_rotation();
}
inline const ::std::string& cUpdateCollage::pic_rotation() const {
  return *pic_rotation_;
}
inline void cUpdateCollage::set_pic_rotation(const ::std::string& value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void cUpdateCollage::set_pic_rotation(const char* value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void cUpdateCollage::set_pic_rotation(const char* value, size_t size) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pic_rotation() {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  return pic_rotation_;
}
inline ::std::string* cUpdateCollage::release_pic_rotation() {
  clear_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_rotation_;
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pic_rotation(::std::string* pic_rotation) {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_rotation_;
  }
  if (pic_rotation) {
    set_has_pic_rotation();
    pic_rotation_ = pic_rotation;
  } else {
    clear_has_pic_rotation();
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 5;
inline bool cUpdateCollage::has_pt_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cUpdateCollage::set_has_pt_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cUpdateCollage::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cUpdateCollage::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdateCollage::pt_x() const {
  return *pt_x_;
}
inline void cUpdateCollage::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateCollage::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateCollage::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdateCollage::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 6;
inline bool cUpdateCollage::has_pt_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cUpdateCollage::set_has_pt_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cUpdateCollage::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cUpdateCollage::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdateCollage::pt_y() const {
  return *pt_y_;
}
inline void cUpdateCollage::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateCollage::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateCollage::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdateCollage::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 layer = 7;
inline bool cUpdateCollage::has_layer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cUpdateCollage::set_has_layer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cUpdateCollage::clear_has_layer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cUpdateCollage::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 cUpdateCollage::layer() const {
  return layer_;
}
inline void cUpdateCollage::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// required int32 op_type = 8;
inline bool cUpdateCollage::has_op_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void cUpdateCollage::set_has_op_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void cUpdateCollage::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void cUpdateCollage::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 cUpdateCollage::op_type() const {
  return op_type_;
}
inline void cUpdateCollage::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// -------------------------------------------------------------------

// sUpdateCollage

// required int32 student_id = 10;
inline bool sUpdateCollage::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateCollage::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateCollage::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateCollage::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateCollage::student_id() const {
  return student_id_;
}
inline void sUpdateCollage::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 id = 9;
inline bool sUpdateCollage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateCollage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateCollage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateCollage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sUpdateCollage::id() const {
  return id_;
}
inline void sUpdateCollage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string pic_res = 1;
inline bool sUpdateCollage::has_pic_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateCollage::set_has_pic_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateCollage::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateCollage::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& sUpdateCollage::pic_res() const {
  return *pic_res_;
}
inline void sUpdateCollage::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateCollage::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateCollage::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* sUpdateCollage::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pic_type = 2;
inline bool sUpdateCollage::has_pic_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdateCollage::set_has_pic_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdateCollage::clear_has_pic_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdateCollage::clear_pic_type() {
  pic_type_ = 0;
  clear_has_pic_type();
}
inline ::google::protobuf::int32 sUpdateCollage::pic_type() const {
  return pic_type_;
}
inline void sUpdateCollage::set_pic_type(::google::protobuf::int32 value) {
  set_has_pic_type();
  pic_type_ = value;
}

// required string pic_scale = 3;
inline bool sUpdateCollage::has_pic_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sUpdateCollage::set_has_pic_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sUpdateCollage::clear_has_pic_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sUpdateCollage::clear_pic_scale() {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    pic_scale_->clear();
  }
  clear_has_pic_scale();
}
inline const ::std::string& sUpdateCollage::pic_scale() const {
  return *pic_scale_;
}
inline void sUpdateCollage::set_pic_scale(const ::std::string& value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void sUpdateCollage::set_pic_scale(const char* value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void sUpdateCollage::set_pic_scale(const char* value, size_t size) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pic_scale() {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  return pic_scale_;
}
inline ::std::string* sUpdateCollage::release_pic_scale() {
  clear_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_scale_;
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pic_scale(::std::string* pic_scale) {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_scale_;
  }
  if (pic_scale) {
    set_has_pic_scale();
    pic_scale_ = pic_scale;
  } else {
    clear_has_pic_scale();
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_rotation = 4;
inline bool sUpdateCollage::has_pic_rotation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sUpdateCollage::set_has_pic_rotation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sUpdateCollage::clear_has_pic_rotation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sUpdateCollage::clear_pic_rotation() {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    pic_rotation_->clear();
  }
  clear_has_pic_rotation();
}
inline const ::std::string& sUpdateCollage::pic_rotation() const {
  return *pic_rotation_;
}
inline void sUpdateCollage::set_pic_rotation(const ::std::string& value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void sUpdateCollage::set_pic_rotation(const char* value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void sUpdateCollage::set_pic_rotation(const char* value, size_t size) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pic_rotation() {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  return pic_rotation_;
}
inline ::std::string* sUpdateCollage::release_pic_rotation() {
  clear_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_rotation_;
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pic_rotation(::std::string* pic_rotation) {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_rotation_;
  }
  if (pic_rotation) {
    set_has_pic_rotation();
    pic_rotation_ = pic_rotation;
  } else {
    clear_has_pic_rotation();
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 5;
inline bool sUpdateCollage::has_pt_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sUpdateCollage::set_has_pt_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sUpdateCollage::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sUpdateCollage::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdateCollage::pt_x() const {
  return *pt_x_;
}
inline void sUpdateCollage::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateCollage::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateCollage::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdateCollage::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 6;
inline bool sUpdateCollage::has_pt_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sUpdateCollage::set_has_pt_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sUpdateCollage::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sUpdateCollage::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdateCollage::pt_y() const {
  return *pt_y_;
}
inline void sUpdateCollage::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateCollage::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateCollage::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdateCollage::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 layer = 7;
inline bool sUpdateCollage::has_layer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sUpdateCollage::set_has_layer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sUpdateCollage::clear_has_layer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sUpdateCollage::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 sUpdateCollage::layer() const {
  return layer_;
}
inline void sUpdateCollage::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// required int32 op_type = 8;
inline bool sUpdateCollage::has_op_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sUpdateCollage::set_has_op_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sUpdateCollage::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sUpdateCollage::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 sUpdateCollage::op_type() const {
  return op_type_;
}
inline void sUpdateCollage::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// -------------------------------------------------------------------

// cUpdateWord

// required int32 type = 12;
inline bool cUpdateWord::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateWord::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateWord::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateWord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 cUpdateWord::type() const {
  return type_;
}
inline void cUpdateWord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 id = 1;
inline bool cUpdateWord::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateWord::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateWord::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateWord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cUpdateWord::id() const {
  return id_;
}
inline void cUpdateWord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string content = 2;
inline bool cUpdateWord::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateWord::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateWord::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateWord::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& cUpdateWord::content() const {
  return *content_;
}
inline void cUpdateWord::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void cUpdateWord::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void cUpdateWord::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateWord::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* cUpdateWord::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateWord::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 3;
inline bool cUpdateWord::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateWord::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateWord::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateWord::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 cUpdateWord::size() const {
  return size_;
}
inline void cUpdateWord::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required int32 color = 4;
inline bool cUpdateWord::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdateWord::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdateWord::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdateWord::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 cUpdateWord::color() const {
  return color_;
}
inline void cUpdateWord::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// required int32 font = 5;
inline bool cUpdateWord::has_font() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cUpdateWord::set_has_font() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cUpdateWord::clear_has_font() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cUpdateWord::clear_font() {
  font_ = 0;
  clear_has_font();
}
inline ::google::protobuf::int32 cUpdateWord::font() const {
  return font_;
}
inline void cUpdateWord::set_font(::google::protobuf::int32 value) {
  set_has_font();
  font_ = value;
}

// required int32 effect = 6;
inline bool cUpdateWord::has_effect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cUpdateWord::set_has_effect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cUpdateWord::clear_has_effect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cUpdateWord::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
inline ::google::protobuf::int32 cUpdateWord::effect() const {
  return effect_;
}
inline void cUpdateWord::set_effect(::google::protobuf::int32 value) {
  set_has_effect();
  effect_ = value;
}

// required string pos_x = 7;
inline bool cUpdateWord::has_pos_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cUpdateWord::set_has_pos_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cUpdateWord::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cUpdateWord::clear_pos_x() {
  if (pos_x_ != &::google::protobuf::internal::kEmptyString) {
    pos_x_->clear();
  }
  clear_has_pos_x();
}
inline const ::std::string& cUpdateWord::pos_x() const {
  return *pos_x_;
}
inline void cUpdateWord::set_pos_x(const ::std::string& value) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(value);
}
inline void cUpdateWord::set_pos_x(const char* value) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(value);
}
inline void cUpdateWord::set_pos_x(const char* value, size_t size) {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  pos_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateWord::mutable_pos_x() {
  set_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    pos_x_ = new ::std::string;
  }
  return pos_x_;
}
inline ::std::string* cUpdateWord::release_pos_x() {
  clear_has_pos_x();
  if (pos_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pos_x_;
    pos_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateWord::set_allocated_pos_x(::std::string* pos_x) {
  if (pos_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pos_x_;
  }
  if (pos_x) {
    set_has_pos_x();
    pos_x_ = pos_x;
  } else {
    clear_has_pos_x();
    pos_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pos_y = 8;
inline bool cUpdateWord::has_pos_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cUpdateWord::set_has_pos_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cUpdateWord::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cUpdateWord::clear_pos_y() {
  if (pos_y_ != &::google::protobuf::internal::kEmptyString) {
    pos_y_->clear();
  }
  clear_has_pos_y();
}
inline const ::std::string& cUpdateWord::pos_y() const {
  return *pos_y_;
}
inline void cUpdateWord::set_pos_y(const ::std::string& value) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(value);
}
inline void cUpdateWord::set_pos_y(const char* value) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(value);
}
inline void cUpdateWord::set_pos_y(const char* value, size_t size) {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  pos_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateWord::mutable_pos_y() {
  set_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    pos_y_ = new ::std::string;
  }
  return pos_y_;
}
inline ::std::string* cUpdateWord::release_pos_y() {
  clear_has_pos_y();
  if (pos_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pos_y_;
    pos_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateWord::set_allocated_pos_y(::std::string* pos_y) {
  if (pos_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pos_y_;
  }
  if (pos_y) {
    set_has_pos_y();
    pos_y_ = pos_y;
  } else {
    clear_has_pos_y();
    pos_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string retation = 9;
inline bool cUpdateWord::has_retation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void cUpdateWord::set_has_retation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void cUpdateWord::clear_has_retation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void cUpdateWord::clear_retation() {
  if (retation_ != &::google::protobuf::internal::kEmptyString) {
    retation_->clear();
  }
  clear_has_retation();
}
inline const ::std::string& cUpdateWord::retation() const {
  return *retation_;
}
inline void cUpdateWord::set_retation(const ::std::string& value) {
  set_has_retation();
  if (retation_ == &::google::protobuf::internal::kEmptyString) {
    retation_ = new ::std::string;
  }
  retation_->assign(value);
}
inline void cUpdateWord::set_retation(const char* value) {
  set_has_retation();
  if (retation_ == &::google::protobuf::internal::kEmptyString) {
    retation_ = new ::std::string;
  }
  retation_->assign(value);
}
inline void cUpdateWord::set_retation(const char* value, size_t size) {
  set_has_retation();
  if (retation_ == &::google::protobuf::internal::kEmptyString) {
    retation_ = new ::std::string;
  }
  retation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateWord::mutable_retation() {
  set_has_retation();
  if (retation_ == &::google::protobuf::internal::kEmptyString) {
    retation_ = new ::std::string;
  }
  return retation_;
}
inline ::std::string* cUpdateWord::release_retation() {
  clear_has_retation();
  if (retation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retation_;
    retation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateWord::set_allocated_retation(::std::string* retation) {
  if (retation_ != &::google::protobuf::internal::kEmptyString) {
    delete retation_;
  }
  if (retation) {
    set_has_retation();
    retation_ = retation;
  } else {
    clear_has_retation();
    retation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string scale = 10;
inline bool cUpdateWord::has_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void cUpdateWord::set_has_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void cUpdateWord::clear_has_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void cUpdateWord::clear_scale() {
  if (scale_ != &::google::protobuf::internal::kEmptyString) {
    scale_->clear();
  }
  clear_has_scale();
}
inline const ::std::string& cUpdateWord::scale() const {
  return *scale_;
}
inline void cUpdateWord::set_scale(const ::std::string& value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
}
inline void cUpdateWord::set_scale(const char* value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
}
inline void cUpdateWord::set_scale(const char* value, size_t size) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateWord::mutable_scale() {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  return scale_;
}
inline ::std::string* cUpdateWord::release_scale() {
  clear_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scale_;
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateWord::set_allocated_scale(::std::string* scale) {
  if (scale_ != &::google::protobuf::internal::kEmptyString) {
    delete scale_;
  }
  if (scale) {
    set_has_scale();
    scale_ = scale;
  } else {
    clear_has_scale();
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 student_id = 11;
inline bool cUpdateWord::has_student_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void cUpdateWord::set_has_student_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void cUpdateWord::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void cUpdateWord::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateWord::student_id() const {
  return student_id_;
}
inline void cUpdateWord::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// cUpdateFrame

// required int32 student_id = 2;
inline bool cUpdateFrame::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateFrame::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateFrame::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateFrame::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cUpdateFrame::student_id() const {
  return student_id_;
}
inline void cUpdateFrame::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 frame_id = 1;
inline bool cUpdateFrame::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateFrame::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateFrame::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateFrame::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 cUpdateFrame::frame_id() const {
  return frame_id_;
}
inline void cUpdateFrame::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
}

// -------------------------------------------------------------------

// sUpdateFrame

// required int32 student_id = 2;
inline bool sUpdateFrame::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateFrame::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateFrame::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateFrame::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateFrame::student_id() const {
  return student_id_;
}
inline void sUpdateFrame::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// required int32 frame_id = 1;
inline bool sUpdateFrame::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateFrame::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateFrame::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateFrame::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 sUpdateFrame::frame_id() const {
  return frame_id_;
}
inline void sUpdateFrame::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
}

// -------------------------------------------------------------------

// cGetStudentDrawLog

// required int32 student_id = 1;
inline bool cGetStudentDrawLog::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetStudentDrawLog::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetStudentDrawLog::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetStudentDrawLog::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 cGetStudentDrawLog::student_id() const {
  return student_id_;
}
inline void cGetStudentDrawLog::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// tst_book

// required .bookNode book_node = 1;
inline bool tst_book::has_book_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tst_book::set_has_book_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tst_book::clear_has_book_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tst_book::clear_book_node() {
  if (book_node_ != NULL) book_node_->::bookNode::Clear();
  clear_has_book_node();
}
inline const ::bookNode& tst_book::book_node() const {
  return book_node_ != NULL ? *book_node_ : *default_instance_->book_node_;
}
inline ::bookNode* tst_book::mutable_book_node() {
  set_has_book_node();
  if (book_node_ == NULL) book_node_ = new ::bookNode;
  return book_node_;
}
inline ::bookNode* tst_book::release_book_node() {
  clear_has_book_node();
  ::bookNode* temp = book_node_;
  book_node_ = NULL;
  return temp;
}
inline void tst_book::set_allocated_book_node(::bookNode* book_node) {
  delete book_node_;
  book_node_ = book_node;
  if (book_node) {
    set_has_book_node();
  } else {
    clear_has_book_node();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::classroom_status>() {
  return ::classroom_status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginType>() {
  return ::LoginType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CourseType>() {
  return ::CourseType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::courseware_status>() {
  return ::courseware_status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FuncType>() {
  return ::FuncType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user_status>() {
  return ::user_status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mutex_status>() {
  return ::mutex_status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fprotocol_2eproto__INCLUDED
