// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/protocol.proto

#ifndef PROTOBUF_proto_2fprotocol_2eproto__INCLUDED
#define PROTOBUF_proto_2fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fprotocol_2eproto();
void protobuf_AssignDesc_proto_2fprotocol_2eproto();
void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

class cLogin;
class sLogin;
class cLogout;
class sLogout;
class cGetFuncList;
class FuncNode;
class sGetFuncList;
class cSetFunc;
class sSetFunc;
class cGetGradeList;
class sGetGradeList;
class cGetCourseList;
class CourseNode;
class sGetCourseList;
class cGetContent;
class sGetContent;
class cGetClassList;
class ClassListNode;
class sGetClassList;
class cGetClassRoomList;
class sGetClassRoomList;
class ContentNode;
class cSetContent;
class sSetContent;
class sCourseware;
class cClassOver;
class sClassOver;
class cGetStudentList;
class StudentListNode;
class sGetStudentList;
class cGetActiveStudentList;
class sGetActiveStudentList;
class sUpdateStudentStatus;
class cGetStudentInfo;
class sGetStudentInfo;
class cGetTeacherInfo;
class sGetTeacherInfo;
class PeerGroup;
class cSetGroup;
class sSetGroup;
class cRelay;
class sRelay;
class bookNode;
class cGetPersonalBooksList;
class sGetPersonalBooksList;
class cGetServerAddr;
class sGetServerAddr;
class cGetPublicBooksList;
class sGetPublicBooksList;
class cUploadBook;
class sUploadBook;
class cDownloadFromPersonal;
class sDownloadFromPersonal;
class cDownloadFromPublic;
class sDownloadFromPublic;
class cTransferBook;
class sTransferBook;
class cPublish;
class sPublish;
class cUpdateDrawSet;
class cUpdateDrawInfo;
class sUpdateDrawInfo;
class cUpdateBackground;
class sUpdateBackground;
class cUpdateCopyIntoPaint;
class sUpdateCopyIntoPaint;
class cUpdatePenAnderaser;
class sUpdatePenAnderaser;
class cUpdateFilling;
class sUpdateFilling;
class cUpdateStamp;
class sUpdateStamp;
class cUpdateFillPic;
class sUpdateFillPic;
class cUpdateMutex;
class sUpdateMutex;
class cUpdateCollage;
class sUpdateCollage;
class cUpdateWord;
class sUpdateWord;
class cUpdateFrame;
class sUpdateFrame;

enum CourseNode_CourseType {
  CourseNode_CourseType_CT_INVALID = 1,
  CourseNode_CourseType_CT_RELAY = 2,
  CourseNode_CourseType_CT_DRAW = 3,
  CourseNode_CourseType_CT_FREEDRAW = 4
};
bool CourseNode_CourseType_IsValid(int value);
const CourseNode_CourseType CourseNode_CourseType_CourseType_MIN = CourseNode_CourseType_CT_INVALID;
const CourseNode_CourseType CourseNode_CourseType_CourseType_MAX = CourseNode_CourseType_CT_FREEDRAW;
const int CourseNode_CourseType_CourseType_ARRAYSIZE = CourseNode_CourseType_CourseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CourseNode_CourseType_descriptor();
inline const ::std::string& CourseNode_CourseType_Name(CourseNode_CourseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CourseNode_CourseType_descriptor(), value);
}
inline bool CourseNode_CourseType_Parse(
    const ::std::string& name, CourseNode_CourseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CourseNode_CourseType>(
    CourseNode_CourseType_descriptor(), name, value);
}
// ===================================================================

class cLogin : public ::google::protobuf::Message {
 public:
  cLogin();
  virtual ~cLogin();

  cLogin(const cLogin& from);

  inline cLogin& operator=(const cLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cLogin& default_instance();

  void Swap(cLogin* other);

  // implements Message ----------------------------------------------

  cLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cLogin& from);
  void MergeFrom(const cLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:cLogin)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* passwd_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cLogin* default_instance_;
};
// -------------------------------------------------------------------

class sLogin : public ::google::protobuf::Message {
 public:
  sLogin();
  virtual ~sLogin();

  sLogin(const sLogin& from);

  inline sLogin& operator=(const sLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sLogin& default_instance();

  void Swap(sLogin* other);

  // implements Message ----------------------------------------------

  sLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sLogin& from);
  void MergeFrom(const sLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // optional bool enter_classroom = 3;
  inline bool has_enter_classroom() const;
  inline void clear_enter_classroom();
  static const int kEnterClassroomFieldNumber = 3;
  inline bool enter_classroom() const;
  inline void set_enter_classroom(bool value);

  // optional int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sLogin)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_enter_classroom();
  inline void clear_has_enter_classroom();
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;
  bool enter_classroom_;
  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sLogin* default_instance_;
};
// -------------------------------------------------------------------

class cLogout : public ::google::protobuf::Message {
 public:
  cLogout();
  virtual ~cLogout();

  cLogout(const cLogout& from);

  inline cLogout& operator=(const cLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cLogout& default_instance();

  void Swap(cLogout* other);

  // implements Message ----------------------------------------------

  cLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cLogout& from);
  void MergeFrom(const cLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cLogout)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cLogout* default_instance_;
};
// -------------------------------------------------------------------

class sLogout : public ::google::protobuf::Message {
 public:
  sLogout();
  virtual ~sLogout();

  sLogout(const sLogout& from);

  inline sLogout& operator=(const sLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sLogout& default_instance();

  void Swap(sLogout* other);

  // implements Message ----------------------------------------------

  sLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sLogout& from);
  void MergeFrom(const sLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 login_type = 1;
  inline bool has_login_type() const;
  inline void clear_login_type();
  static const int kLoginTypeFieldNumber = 1;
  inline ::google::protobuf::int32 login_type() const;
  inline void set_login_type(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sLogout)
 private:
  inline void set_has_login_type();
  inline void clear_has_login_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 login_type_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sLogout* default_instance_;
};
// -------------------------------------------------------------------

class cGetFuncList : public ::google::protobuf::Message {
 public:
  cGetFuncList();
  virtual ~cGetFuncList();

  cGetFuncList(const cGetFuncList& from);

  inline cGetFuncList& operator=(const cGetFuncList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetFuncList& default_instance();

  void Swap(cGetFuncList* other);

  // implements Message ----------------------------------------------

  cGetFuncList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetFuncList& from);
  void MergeFrom(const cGetFuncList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetFuncList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetFuncList* default_instance_;
};
// -------------------------------------------------------------------

class FuncNode : public ::google::protobuf::Message {
 public:
  FuncNode();
  virtual ~FuncNode();

  FuncNode(const FuncNode& from);

  inline FuncNode& operator=(const FuncNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FuncNode& default_instance();

  void Swap(FuncNode* other);

  // implements Message ----------------------------------------------

  FuncNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FuncNode& from);
  void MergeFrom(const FuncNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string res_path = 3;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 3;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:FuncNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static FuncNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetFuncList : public ::google::protobuf::Message {
 public:
  sGetFuncList();
  virtual ~sGetFuncList();

  sGetFuncList(const sGetFuncList& from);

  inline sGetFuncList& operator=(const sGetFuncList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetFuncList& default_instance();

  void Swap(sGetFuncList* other);

  // implements Message ----------------------------------------------

  sGetFuncList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetFuncList& from);
  void MergeFrom(const sGetFuncList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FuncNode func_list = 1;
  inline int func_list_size() const;
  inline void clear_func_list();
  static const int kFuncListFieldNumber = 1;
  inline const ::FuncNode& func_list(int index) const;
  inline ::FuncNode* mutable_func_list(int index);
  inline ::FuncNode* add_func_list();
  inline const ::google::protobuf::RepeatedPtrField< ::FuncNode >&
      func_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::FuncNode >*
      mutable_func_list();

  // @@protoc_insertion_point(class_scope:sGetFuncList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FuncNode > func_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetFuncList* default_instance_;
};
// -------------------------------------------------------------------

class cSetFunc : public ::google::protobuf::Message {
 public:
  cSetFunc();
  virtual ~cSetFunc();

  cSetFunc(const cSetFunc& from);

  inline cSetFunc& operator=(const cSetFunc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSetFunc& default_instance();

  void Swap(cSetFunc* other);

  // implements Message ----------------------------------------------

  cSetFunc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSetFunc& from);
  void MergeFrom(const cSetFunc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 func_type = 1;
  inline bool has_func_type() const;
  inline void clear_func_type();
  static const int kFuncTypeFieldNumber = 1;
  inline ::google::protobuf::int32 func_type() const;
  inline void set_func_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cSetFunc)
 private:
  inline void set_has_func_type();
  inline void clear_has_func_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 func_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSetFunc* default_instance_;
};
// -------------------------------------------------------------------

class sSetFunc : public ::google::protobuf::Message {
 public:
  sSetFunc();
  virtual ~sSetFunc();

  sSetFunc(const sSetFunc& from);

  inline sSetFunc& operator=(const sSetFunc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sSetFunc& default_instance();

  void Swap(sSetFunc* other);

  // implements Message ----------------------------------------------

  sSetFunc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sSetFunc& from);
  void MergeFrom(const sSetFunc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:sSetFunc)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sSetFunc* default_instance_;
};
// -------------------------------------------------------------------

class cGetGradeList : public ::google::protobuf::Message {
 public:
  cGetGradeList();
  virtual ~cGetGradeList();

  cGetGradeList(const cGetGradeList& from);

  inline cGetGradeList& operator=(const cGetGradeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetGradeList& default_instance();

  void Swap(cGetGradeList* other);

  // implements Message ----------------------------------------------

  cGetGradeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetGradeList& from);
  void MergeFrom(const cGetGradeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline ::google::protobuf::int32 content() const;
  inline void set_content(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetGradeList)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetGradeList* default_instance_;
};
// -------------------------------------------------------------------

class sGetGradeList : public ::google::protobuf::Message {
 public:
  sGetGradeList();
  virtual ~sGetGradeList();

  sGetGradeList(const sGetGradeList& from);

  inline sGetGradeList& operator=(const sGetGradeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetGradeList& default_instance();

  void Swap(sGetGradeList* other);

  // implements Message ----------------------------------------------

  sGetGradeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetGradeList& from);
  void MergeFrom(const sGetGradeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ClassListNode grade_list = 1;
  inline int grade_list_size() const;
  inline void clear_grade_list();
  static const int kGradeListFieldNumber = 1;
  inline const ::ClassListNode& grade_list(int index) const;
  inline ::ClassListNode* mutable_grade_list(int index);
  inline ::ClassListNode* add_grade_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
      grade_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
      mutable_grade_list();

  // @@protoc_insertion_point(class_scope:sGetGradeList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ClassListNode > grade_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetGradeList* default_instance_;
};
// -------------------------------------------------------------------

class cGetCourseList : public ::google::protobuf::Message {
 public:
  cGetCourseList();
  virtual ~cGetCourseList();

  cGetCourseList(const cGetCourseList& from);

  inline cGetCourseList& operator=(const cGetCourseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetCourseList& default_instance();

  void Swap(cGetCourseList* other);

  // implements Message ----------------------------------------------

  cGetCourseList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetCourseList& from);
  void MergeFrom(const cGetCourseList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grade_id = 1;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 1;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetCourseList)
 private:
  inline void set_has_grade_id();
  inline void clear_has_grade_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetCourseList* default_instance_;
};
// -------------------------------------------------------------------

class CourseNode : public ::google::protobuf::Message {
 public:
  CourseNode();
  virtual ~CourseNode();

  CourseNode(const CourseNode& from);

  inline CourseNode& operator=(const CourseNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CourseNode& default_instance();

  void Swap(CourseNode* other);

  // implements Message ----------------------------------------------

  CourseNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CourseNode& from);
  void MergeFrom(const CourseNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CourseNode_CourseType CourseType;
  static const CourseType CT_INVALID = CourseNode_CourseType_CT_INVALID;
  static const CourseType CT_RELAY = CourseNode_CourseType_CT_RELAY;
  static const CourseType CT_DRAW = CourseNode_CourseType_CT_DRAW;
  static const CourseType CT_FREEDRAW = CourseNode_CourseType_CT_FREEDRAW;
  static inline bool CourseType_IsValid(int value) {
    return CourseNode_CourseType_IsValid(value);
  }
  static const CourseType CourseType_MIN =
    CourseNode_CourseType_CourseType_MIN;
  static const CourseType CourseType_MAX =
    CourseNode_CourseType_CourseType_MAX;
  static const int CourseType_ARRAYSIZE =
    CourseNode_CourseType_CourseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CourseType_descriptor() {
    return CourseNode_CourseType_descriptor();
  }
  static inline const ::std::string& CourseType_Name(CourseType value) {
    return CourseNode_CourseType_Name(value);
  }
  static inline bool CourseType_Parse(const ::std::string& name,
      CourseType* value) {
    return CourseNode_CourseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // required string course_name = 2;
  inline bool has_course_name() const;
  inline void clear_course_name();
  static const int kCourseNameFieldNumber = 2;
  inline const ::std::string& course_name() const;
  inline void set_course_name(const ::std::string& value);
  inline void set_course_name(const char* value);
  inline void set_course_name(const char* value, size_t size);
  inline ::std::string* mutable_course_name();
  inline ::std::string* release_course_name();
  inline void set_allocated_course_name(::std::string* course_name);

  // required int32 grade_id = 3;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 3;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // optional int32 language = 4;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 4;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);

  // optional int32 art = 5;
  inline bool has_art() const;
  inline void clear_art();
  static const int kArtFieldNumber = 5;
  inline ::google::protobuf::int32 art() const;
  inline void set_art(::google::protobuf::int32 value);

  // optional int32 community = 6;
  inline bool has_community() const;
  inline void clear_community();
  static const int kCommunityFieldNumber = 6;
  inline ::google::protobuf::int32 community() const;
  inline void set_community(::google::protobuf::int32 value);

  // optional int32 health = 7;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 7;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // optional int32 science = 8;
  inline bool has_science() const;
  inline void clear_science();
  static const int kScienceFieldNumber = 8;
  inline ::google::protobuf::int32 science() const;
  inline void set_science(::google::protobuf::int32 value);

  // required string res_path = 9;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 9;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // required .CourseNode.CourseType course_type = 10 [default = CT_INVALID];
  inline bool has_course_type() const;
  inline void clear_course_type();
  static const int kCourseTypeFieldNumber = 10;
  inline ::CourseNode_CourseType course_type() const;
  inline void set_course_type(::CourseNode_CourseType value);

  // optional string xml_path = 11;
  inline bool has_xml_path() const;
  inline void clear_xml_path();
  static const int kXmlPathFieldNumber = 11;
  inline const ::std::string& xml_path() const;
  inline void set_xml_path(const ::std::string& value);
  inline void set_xml_path(const char* value);
  inline void set_xml_path(const char* value, size_t size);
  inline ::std::string* mutable_xml_path();
  inline ::std::string* release_xml_path();
  inline void set_allocated_xml_path(::std::string* xml_path);

  // @@protoc_insertion_point(class_scope:CourseNode)
 private:
  inline void set_has_course_id();
  inline void clear_has_course_id();
  inline void set_has_course_name();
  inline void clear_has_course_name();
  inline void set_has_grade_id();
  inline void clear_has_grade_id();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_art();
  inline void clear_has_art();
  inline void set_has_community();
  inline void clear_has_community();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_science();
  inline void clear_has_science();
  inline void set_has_res_path();
  inline void clear_has_res_path();
  inline void set_has_course_type();
  inline void clear_has_course_type();
  inline void set_has_xml_path();
  inline void clear_has_xml_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* course_name_;
  ::google::protobuf::int32 course_id_;
  ::google::protobuf::int32 grade_id_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 art_;
  ::google::protobuf::int32 community_;
  ::google::protobuf::int32 health_;
  ::std::string* res_path_;
  ::google::protobuf::int32 science_;
  int course_type_;
  ::std::string* xml_path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static CourseNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetCourseList : public ::google::protobuf::Message {
 public:
  sGetCourseList();
  virtual ~sGetCourseList();

  sGetCourseList(const sGetCourseList& from);

  inline sGetCourseList& operator=(const sGetCourseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetCourseList& default_instance();

  void Swap(sGetCourseList* other);

  // implements Message ----------------------------------------------

  sGetCourseList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetCourseList& from);
  void MergeFrom(const sGetCourseList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CourseNode course_list = 1;
  inline int course_list_size() const;
  inline void clear_course_list();
  static const int kCourseListFieldNumber = 1;
  inline const ::CourseNode& course_list(int index) const;
  inline ::CourseNode* mutable_course_list(int index);
  inline ::CourseNode* add_course_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CourseNode >&
      course_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CourseNode >*
      mutable_course_list();

  // @@protoc_insertion_point(class_scope:sGetCourseList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CourseNode > course_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetCourseList* default_instance_;
};
// -------------------------------------------------------------------

class cGetContent : public ::google::protobuf::Message {
 public:
  cGetContent();
  virtual ~cGetContent();

  cGetContent(const cGetContent& from);

  inline cGetContent& operator=(const cGetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetContent& default_instance();

  void Swap(cGetContent* other);

  // implements Message ----------------------------------------------

  cGetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetContent& from);
  void MergeFrom(const cGetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetContent)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetContent* default_instance_;
};
// -------------------------------------------------------------------

class sGetContent : public ::google::protobuf::Message {
 public:
  sGetContent();
  virtual ~sGetContent();

  sGetContent(const sGetContent& from);

  inline sGetContent& operator=(const sGetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetContent& default_instance();

  void Swap(sGetContent* other);

  // implements Message ----------------------------------------------

  sGetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetContent& from);
  void MergeFrom(const sGetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required int32 classroom_id = 2;
  inline bool has_classroom_id() const;
  inline void clear_classroom_id();
  static const int kClassroomIdFieldNumber = 2;
  inline ::google::protobuf::int32 classroom_id() const;
  inline void set_classroom_id(::google::protobuf::int32 value);

  // repeated .ContentNode course_list = 3;
  inline int course_list_size() const;
  inline void clear_course_list();
  static const int kCourseListFieldNumber = 3;
  inline const ::ContentNode& course_list(int index) const;
  inline ::ContentNode* mutable_course_list(int index);
  inline ::ContentNode* add_course_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ContentNode >&
      course_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContentNode >*
      mutable_course_list();

  // @@protoc_insertion_point(class_scope:sGetContent)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_classroom_id();
  inline void clear_has_classroom_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;
  ::google::protobuf::int32 classroom_id_;
  ::google::protobuf::RepeatedPtrField< ::ContentNode > course_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetContent* default_instance_;
};
// -------------------------------------------------------------------

class cGetClassList : public ::google::protobuf::Message {
 public:
  cGetClassList();
  virtual ~cGetClassList();

  cGetClassList(const cGetClassList& from);

  inline cGetClassList& operator=(const cGetClassList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetClassList& default_instance();

  void Swap(cGetClassList* other);

  // implements Message ----------------------------------------------

  cGetClassList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetClassList& from);
  void MergeFrom(const cGetClassList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grade_id = 1;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 1;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetClassList)
 private:
  inline void set_has_grade_id();
  inline void clear_has_grade_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetClassList* default_instance_;
};
// -------------------------------------------------------------------

class ClassListNode : public ::google::protobuf::Message {
 public:
  ClassListNode();
  virtual ~ClassListNode();

  ClassListNode(const ClassListNode& from);

  inline ClassListNode& operator=(const ClassListNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassListNode& default_instance();

  void Swap(ClassListNode* other);

  // implements Message ----------------------------------------------

  ClassListNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassListNode& from);
  void MergeFrom(const ClassListNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string res_path = 3;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 3;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:ClassListNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ClassListNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassList : public ::google::protobuf::Message {
 public:
  sGetClassList();
  virtual ~sGetClassList();

  sGetClassList(const sGetClassList& from);

  inline sGetClassList& operator=(const sGetClassList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassList& default_instance();

  void Swap(sGetClassList* other);

  // implements Message ----------------------------------------------

  sGetClassList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassList& from);
  void MergeFrom(const sGetClassList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ClassListNode class_list = 1;
  inline int class_list_size() const;
  inline void clear_class_list();
  static const int kClassListFieldNumber = 1;
  inline const ::ClassListNode& class_list(int index) const;
  inline ::ClassListNode* mutable_class_list(int index);
  inline ::ClassListNode* add_class_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
      class_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
      mutable_class_list();

  // @@protoc_insertion_point(class_scope:sGetClassList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ClassListNode > class_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassList* default_instance_;
};
// -------------------------------------------------------------------

class cGetClassRoomList : public ::google::protobuf::Message {
 public:
  cGetClassRoomList();
  virtual ~cGetClassRoomList();

  cGetClassRoomList(const cGetClassRoomList& from);

  inline cGetClassRoomList& operator=(const cGetClassRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetClassRoomList& default_instance();

  void Swap(cGetClassRoomList* other);

  // implements Message ----------------------------------------------

  cGetClassRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetClassRoomList& from);
  void MergeFrom(const cGetClassRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetClassRoomList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetClassRoomList* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassRoomList : public ::google::protobuf::Message {
 public:
  sGetClassRoomList();
  virtual ~sGetClassRoomList();

  sGetClassRoomList(const sGetClassRoomList& from);

  inline sGetClassRoomList& operator=(const sGetClassRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassRoomList& default_instance();

  void Swap(sGetClassRoomList* other);

  // implements Message ----------------------------------------------

  sGetClassRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassRoomList& from);
  void MergeFrom(const sGetClassRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ClassListNode classroom_list = 1;
  inline int classroom_list_size() const;
  inline void clear_classroom_list();
  static const int kClassroomListFieldNumber = 1;
  inline const ::ClassListNode& classroom_list(int index) const;
  inline ::ClassListNode* mutable_classroom_list(int index);
  inline ::ClassListNode* add_classroom_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
      classroom_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
      mutable_classroom_list();

  // @@protoc_insertion_point(class_scope:sGetClassRoomList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ClassListNode > classroom_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassRoomList* default_instance_;
};
// -------------------------------------------------------------------

class ContentNode : public ::google::protobuf::Message {
 public:
  ContentNode();
  virtual ~ContentNode();

  ContentNode(const ContentNode& from);

  inline ContentNode& operator=(const ContentNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentNode& default_instance();

  void Swap(ContentNode* other);

  // implements Message ----------------------------------------------

  ContentNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentNode& from);
  void MergeFrom(const ContentNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // optional string course_xml = 2;
  inline bool has_course_xml() const;
  inline void clear_course_xml();
  static const int kCourseXmlFieldNumber = 2;
  inline const ::std::string& course_xml() const;
  inline void set_course_xml(const ::std::string& value);
  inline void set_course_xml(const char* value);
  inline void set_course_xml(const char* value, size_t size);
  inline ::std::string* mutable_course_xml();
  inline ::std::string* release_course_xml();
  inline void set_allocated_course_xml(::std::string* course_xml);

  // @@protoc_insertion_point(class_scope:ContentNode)
 private:
  inline void set_has_course_id();
  inline void clear_has_course_id();
  inline void set_has_course_xml();
  inline void clear_has_course_xml();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* course_xml_;
  ::google::protobuf::int32 course_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ContentNode* default_instance_;
};
// -------------------------------------------------------------------

class cSetContent : public ::google::protobuf::Message {
 public:
  cSetContent();
  virtual ~cSetContent();

  cSetContent(const cSetContent& from);

  inline cSetContent& operator=(const cSetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSetContent& default_instance();

  void Swap(cSetContent* other);

  // implements Message ----------------------------------------------

  cSetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSetContent& from);
  void MergeFrom(const cSetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required int32 classroom_id = 2;
  inline bool has_classroom_id() const;
  inline void clear_classroom_id();
  static const int kClassroomIdFieldNumber = 2;
  inline ::google::protobuf::int32 classroom_id() const;
  inline void set_classroom_id(::google::protobuf::int32 value);

  // repeated .ContentNode course_list = 3;
  inline int course_list_size() const;
  inline void clear_course_list();
  static const int kCourseListFieldNumber = 3;
  inline const ::ContentNode& course_list(int index) const;
  inline ::ContentNode* mutable_course_list(int index);
  inline ::ContentNode* add_course_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ContentNode >&
      course_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContentNode >*
      mutable_course_list();

  // @@protoc_insertion_point(class_scope:cSetContent)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_classroom_id();
  inline void clear_has_classroom_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;
  ::google::protobuf::int32 classroom_id_;
  ::google::protobuf::RepeatedPtrField< ::ContentNode > course_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSetContent* default_instance_;
};
// -------------------------------------------------------------------

class sSetContent : public ::google::protobuf::Message {
 public:
  sSetContent();
  virtual ~sSetContent();

  sSetContent(const sSetContent& from);

  inline sSetContent& operator=(const sSetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sSetContent& default_instance();

  void Swap(sSetContent* other);

  // implements Message ----------------------------------------------

  sSetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sSetContent& from);
  void MergeFrom(const sSetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sSetContent)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sSetContent* default_instance_;
};
// -------------------------------------------------------------------

class sCourseware : public ::google::protobuf::Message {
 public:
  sCourseware();
  virtual ~sCourseware();

  sCourseware(const sCourseware& from);

  inline sCourseware& operator=(const sCourseware& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sCourseware& default_instance();

  void Swap(sCourseware* other);

  // implements Message ----------------------------------------------

  sCourseware* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sCourseware& from);
  void MergeFrom(const sCourseware& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sCourseware)
 private:
  inline void set_has_course_id();
  inline void clear_has_course_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 course_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sCourseware* default_instance_;
};
// -------------------------------------------------------------------

class cClassOver : public ::google::protobuf::Message {
 public:
  cClassOver();
  virtual ~cClassOver();

  cClassOver(const cClassOver& from);

  inline cClassOver& operator=(const cClassOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cClassOver& default_instance();

  void Swap(cClassOver* other);

  // implements Message ----------------------------------------------

  cClassOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cClassOver& from);
  void MergeFrom(const cClassOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cClassOver)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cClassOver* default_instance_;
};
// -------------------------------------------------------------------

class sClassOver : public ::google::protobuf::Message {
 public:
  sClassOver();
  virtual ~sClassOver();

  sClassOver(const sClassOver& from);

  inline sClassOver& operator=(const sClassOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sClassOver& default_instance();

  void Swap(sClassOver* other);

  // implements Message ----------------------------------------------

  sClassOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sClassOver& from);
  void MergeFrom(const sClassOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sClassOver)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sClassOver* default_instance_;
};
// -------------------------------------------------------------------

class cGetStudentList : public ::google::protobuf::Message {
 public:
  cGetStudentList();
  virtual ~cGetStudentList();

  cGetStudentList(const cGetStudentList& from);

  inline cGetStudentList& operator=(const cGetStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetStudentList& default_instance();

  void Swap(cGetStudentList* other);

  // implements Message ----------------------------------------------

  cGetStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetStudentList& from);
  void MergeFrom(const cGetStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetStudentList)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetStudentList* default_instance_;
};
// -------------------------------------------------------------------

class StudentListNode : public ::google::protobuf::Message {
 public:
  StudentListNode();
  virtual ~StudentListNode();

  StudentListNode(const StudentListNode& from);

  inline StudentListNode& operator=(const StudentListNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StudentListNode& default_instance();

  void Swap(StudentListNode* other);

  // implements Message ----------------------------------------------

  StudentListNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StudentListNode& from);
  void MergeFrom(const StudentListNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string res_path = 3;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 3;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:StudentListNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static StudentListNode* default_instance_;
};
// -------------------------------------------------------------------

class sGetStudentList : public ::google::protobuf::Message {
 public:
  sGetStudentList();
  virtual ~sGetStudentList();

  sGetStudentList(const sGetStudentList& from);

  inline sGetStudentList& operator=(const sGetStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetStudentList& default_instance();

  void Swap(sGetStudentList* other);

  // implements Message ----------------------------------------------

  sGetStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetStudentList& from);
  void MergeFrom(const sGetStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .StudentListNode student_list = 1;
  inline int student_list_size() const;
  inline void clear_student_list();
  static const int kStudentListFieldNumber = 1;
  inline const ::StudentListNode& student_list(int index) const;
  inline ::StudentListNode* mutable_student_list(int index);
  inline ::StudentListNode* add_student_list();
  inline const ::google::protobuf::RepeatedPtrField< ::StudentListNode >&
      student_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::StudentListNode >*
      mutable_student_list();

  // @@protoc_insertion_point(class_scope:sGetStudentList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::StudentListNode > student_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetStudentList* default_instance_;
};
// -------------------------------------------------------------------

class cGetActiveStudentList : public ::google::protobuf::Message {
 public:
  cGetActiveStudentList();
  virtual ~cGetActiveStudentList();

  cGetActiveStudentList(const cGetActiveStudentList& from);

  inline cGetActiveStudentList& operator=(const cGetActiveStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetActiveStudentList& default_instance();

  void Swap(cGetActiveStudentList* other);

  // implements Message ----------------------------------------------

  cGetActiveStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetActiveStudentList& from);
  void MergeFrom(const cGetActiveStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetActiveStudentList)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetActiveStudentList* default_instance_;
};
// -------------------------------------------------------------------

class sGetActiveStudentList : public ::google::protobuf::Message {
 public:
  sGetActiveStudentList();
  virtual ~sGetActiveStudentList();

  sGetActiveStudentList(const sGetActiveStudentList& from);

  inline sGetActiveStudentList& operator=(const sGetActiveStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetActiveStudentList& default_instance();

  void Swap(sGetActiveStudentList* other);

  // implements Message ----------------------------------------------

  sGetActiveStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetActiveStudentList& from);
  void MergeFrom(const sGetActiveStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 student_list = 1;
  inline int student_list_size() const;
  inline void clear_student_list();
  static const int kStudentListFieldNumber = 1;
  inline ::google::protobuf::int32 student_list(int index) const;
  inline void set_student_list(int index, ::google::protobuf::int32 value);
  inline void add_student_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      student_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_student_list();

  // @@protoc_insertion_point(class_scope:sGetActiveStudentList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > student_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetActiveStudentList* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateStudentStatus : public ::google::protobuf::Message {
 public:
  sUpdateStudentStatus();
  virtual ~sUpdateStudentStatus();

  sUpdateStudentStatus(const sUpdateStudentStatus& from);

  inline sUpdateStudentStatus& operator=(const sUpdateStudentStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateStudentStatus& default_instance();

  void Swap(sUpdateStudentStatus* other);

  // implements Message ----------------------------------------------

  sUpdateStudentStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateStudentStatus& from);
  void MergeFrom(const sUpdateStudentStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateStudentStatus)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateStudentStatus* default_instance_;
};
// -------------------------------------------------------------------

class cGetStudentInfo : public ::google::protobuf::Message {
 public:
  cGetStudentInfo();
  virtual ~cGetStudentInfo();

  cGetStudentInfo(const cGetStudentInfo& from);

  inline cGetStudentInfo& operator=(const cGetStudentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetStudentInfo& default_instance();

  void Swap(cGetStudentInfo* other);

  // implements Message ----------------------------------------------

  cGetStudentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetStudentInfo& from);
  void MergeFrom(const cGetStudentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetStudentInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetStudentInfo* default_instance_;
};
// -------------------------------------------------------------------

class sGetStudentInfo : public ::google::protobuf::Message {
 public:
  sGetStudentInfo();
  virtual ~sGetStudentInfo();

  sGetStudentInfo(const sGetStudentInfo& from);

  inline sGetStudentInfo& operator=(const sGetStudentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetStudentInfo& default_instance();

  void Swap(sGetStudentInfo* other);

  // implements Message ----------------------------------------------

  sGetStudentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetStudentInfo& from);
  void MergeFrom(const sGetStudentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // required string race = 5;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 5;
  inline const ::std::string& race() const;
  inline void set_race(const ::std::string& value);
  inline void set_race(const char* value);
  inline void set_race(const char* value, size_t size);
  inline ::std::string* mutable_race();
  inline ::std::string* release_race();
  inline void set_allocated_race(::std::string* race);

  // required string native = 6;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 6;
  inline const ::std::string& native() const;
  inline void set_native(const ::std::string& value);
  inline void set_native(const char* value);
  inline void set_native(const char* value, size_t size);
  inline ::std::string* mutable_native();
  inline ::std::string* release_native();
  inline void set_allocated_native(::std::string* native);

  // required int32 class_id = 7;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 7;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required string class_name = 8;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 8;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const char* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // @@protoc_insertion_point(class_scope:sGetStudentInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_class_name();
  inline void clear_has_class_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* number_;
  ::std::string* name_;
  ::std::string* sex_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 class_id_;
  ::std::string* race_;
  ::std::string* native_;
  ::std::string* class_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetStudentInfo* default_instance_;
};
// -------------------------------------------------------------------

class cGetTeacherInfo : public ::google::protobuf::Message {
 public:
  cGetTeacherInfo();
  virtual ~cGetTeacherInfo();

  cGetTeacherInfo(const cGetTeacherInfo& from);

  inline cGetTeacherInfo& operator=(const cGetTeacherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetTeacherInfo& default_instance();

  void Swap(cGetTeacherInfo* other);

  // implements Message ----------------------------------------------

  cGetTeacherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetTeacherInfo& from);
  void MergeFrom(const cGetTeacherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetTeacherInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetTeacherInfo* default_instance_;
};
// -------------------------------------------------------------------

class sGetTeacherInfo : public ::google::protobuf::Message {
 public:
  sGetTeacherInfo();
  virtual ~sGetTeacherInfo();

  sGetTeacherInfo(const sGetTeacherInfo& from);

  inline sGetTeacherInfo& operator=(const sGetTeacherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetTeacherInfo& default_instance();

  void Swap(sGetTeacherInfo* other);

  // implements Message ----------------------------------------------

  sGetTeacherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetTeacherInfo& from);
  void MergeFrom(const sGetTeacherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // required string race = 5;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 5;
  inline const ::std::string& race() const;
  inline void set_race(const ::std::string& value);
  inline void set_race(const char* value);
  inline void set_race(const char* value, size_t size);
  inline ::std::string* mutable_race();
  inline ::std::string* release_race();
  inline void set_allocated_race(::std::string* race);

  // required string birthday = 6;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 6;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // required string native = 7;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 7;
  inline const ::std::string& native() const;
  inline void set_native(const ::std::string& value);
  inline void set_native(const char* value);
  inline void set_native(const char* value, size_t size);
  inline ::std::string* mutable_native();
  inline ::std::string* release_native();
  inline void set_allocated_native(::std::string* native);

  // required string school_name = 8;
  inline bool has_school_name() const;
  inline void clear_school_name();
  static const int kSchoolNameFieldNumber = 8;
  inline const ::std::string& school_name() const;
  inline void set_school_name(const ::std::string& value);
  inline void set_school_name(const char* value);
  inline void set_school_name(const char* value, size_t size);
  inline ::std::string* mutable_school_name();
  inline ::std::string* release_school_name();
  inline void set_allocated_school_name(::std::string* school_name);

  // @@protoc_insertion_point(class_scope:sGetTeacherInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_school_name();
  inline void clear_has_school_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* number_;
  ::std::string* name_;
  ::std::string* sex_;
  ::std::string* race_;
  ::std::string* birthday_;
  ::std::string* native_;
  ::std::string* school_name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetTeacherInfo* default_instance_;
};
// -------------------------------------------------------------------

class PeerGroup : public ::google::protobuf::Message {
 public:
  PeerGroup();
  virtual ~PeerGroup();

  PeerGroup(const PeerGroup& from);

  inline PeerGroup& operator=(const PeerGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerGroup& default_instance();

  void Swap(PeerGroup* other);

  // implements Message ----------------------------------------------

  PeerGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerGroup& from);
  void MergeFrom(const PeerGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PeerGroup)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PeerGroup* default_instance_;
};
// -------------------------------------------------------------------

class cSetGroup : public ::google::protobuf::Message {
 public:
  cSetGroup();
  virtual ~cSetGroup();

  cSetGroup(const cSetGroup& from);

  inline cSetGroup& operator=(const cSetGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSetGroup& default_instance();

  void Swap(cSetGroup* other);

  // implements Message ----------------------------------------------

  cSetGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSetGroup& from);
  void MergeFrom(const cSetGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);

  // required string group_name = 2;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // repeated .PeerGroup student_list = 3;
  inline int student_list_size() const;
  inline void clear_student_list();
  static const int kStudentListFieldNumber = 3;
  inline const ::PeerGroup& student_list(int index) const;
  inline ::PeerGroup* mutable_student_list(int index);
  inline ::PeerGroup* add_student_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PeerGroup >&
      student_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PeerGroup >*
      mutable_student_list();

  // @@protoc_insertion_point(class_scope:cSetGroup)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* group_name_;
  ::google::protobuf::RepeatedPtrField< ::PeerGroup > student_list_;
  ::google::protobuf::int32 group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSetGroup* default_instance_;
};
// -------------------------------------------------------------------

class sSetGroup : public ::google::protobuf::Message {
 public:
  sSetGroup();
  virtual ~sSetGroup();

  sSetGroup(const sSetGroup& from);

  inline sSetGroup& operator=(const sSetGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sSetGroup& default_instance();

  void Swap(sSetGroup* other);

  // implements Message ----------------------------------------------

  sSetGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sSetGroup& from);
  void MergeFrom(const sSetGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sSetGroup)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sSetGroup* default_instance_;
};
// -------------------------------------------------------------------

class cRelay : public ::google::protobuf::Message {
 public:
  cRelay();
  virtual ~cRelay();

  cRelay(const cRelay& from);

  inline cRelay& operator=(const cRelay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cRelay& default_instance();

  void Swap(cRelay* other);

  // implements Message ----------------------------------------------

  cRelay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cRelay& from);
  void MergeFrom(const cRelay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cRelay)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cRelay* default_instance_;
};
// -------------------------------------------------------------------

class sRelay : public ::google::protobuf::Message {
 public:
  sRelay();
  virtual ~sRelay();

  sRelay(const sRelay& from);

  inline sRelay& operator=(const sRelay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sRelay& default_instance();

  void Swap(sRelay* other);

  // implements Message ----------------------------------------------

  sRelay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sRelay& from);
  void MergeFrom(const sRelay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::int32 student_id() const;
  inline void set_student_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sRelay)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 student_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sRelay* default_instance_;
};
// -------------------------------------------------------------------

class bookNode : public ::google::protobuf::Message {
 public:
  bookNode();
  virtual ~bookNode();

  bookNode(const bookNode& from);

  inline bookNode& operator=(const bookNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bookNode& default_instance();

  void Swap(bookNode* other);

  // implements Message ----------------------------------------------

  bookNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bookNode& from);
  void MergeFrom(const bookNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::int32 book_id() const;
  inline void set_book_id(::google::protobuf::int32 value);

  // required string book_name = 2;
  inline bool has_book_name() const;
  inline void clear_book_name();
  static const int kBookNameFieldNumber = 2;
  inline const ::std::string& book_name() const;
  inline void set_book_name(const ::std::string& value);
  inline void set_book_name(const char* value);
  inline void set_book_name(const char* value, size_t size);
  inline ::std::string* mutable_book_name();
  inline ::std::string* release_book_name();
  inline void set_allocated_book_name(::std::string* book_name);

  // required int32 book_type = 4;
  inline bool has_book_type() const;
  inline void clear_book_type();
  static const int kBookTypeFieldNumber = 4;
  inline ::google::protobuf::int32 book_type() const;
  inline void set_book_type(::google::protobuf::int32 value);

  // required string res_path = 3;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 3;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:bookNode)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();
  inline void set_has_book_name();
  inline void clear_has_book_name();
  inline void set_has_book_type();
  inline void clear_has_book_type();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* book_name_;
  ::google::protobuf::int32 book_id_;
  ::google::protobuf::int32 book_type_;
  ::std::string* res_path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static bookNode* default_instance_;
};
// -------------------------------------------------------------------

class cGetPersonalBooksList : public ::google::protobuf::Message {
 public:
  cGetPersonalBooksList();
  virtual ~cGetPersonalBooksList();

  cGetPersonalBooksList(const cGetPersonalBooksList& from);

  inline cGetPersonalBooksList& operator=(const cGetPersonalBooksList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetPersonalBooksList& default_instance();

  void Swap(cGetPersonalBooksList* other);

  // implements Message ----------------------------------------------

  cGetPersonalBooksList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetPersonalBooksList& from);
  void MergeFrom(const cGetPersonalBooksList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetPersonalBooksList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetPersonalBooksList* default_instance_;
};
// -------------------------------------------------------------------

class sGetPersonalBooksList : public ::google::protobuf::Message {
 public:
  sGetPersonalBooksList();
  virtual ~sGetPersonalBooksList();

  sGetPersonalBooksList(const sGetPersonalBooksList& from);

  inline sGetPersonalBooksList& operator=(const sGetPersonalBooksList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetPersonalBooksList& default_instance();

  void Swap(sGetPersonalBooksList* other);

  // implements Message ----------------------------------------------

  sGetPersonalBooksList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetPersonalBooksList& from);
  void MergeFrom(const sGetPersonalBooksList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bookNode book_list = 1;
  inline int book_list_size() const;
  inline void clear_book_list();
  static const int kBookListFieldNumber = 1;
  inline const ::bookNode& book_list(int index) const;
  inline ::bookNode* mutable_book_list(int index);
  inline ::bookNode* add_book_list();
  inline const ::google::protobuf::RepeatedPtrField< ::bookNode >&
      book_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::bookNode >*
      mutable_book_list();

  // @@protoc_insertion_point(class_scope:sGetPersonalBooksList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bookNode > book_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetPersonalBooksList* default_instance_;
};
// -------------------------------------------------------------------

class cGetServerAddr : public ::google::protobuf::Message {
 public:
  cGetServerAddr();
  virtual ~cGetServerAddr();

  cGetServerAddr(const cGetServerAddr& from);

  inline cGetServerAddr& operator=(const cGetServerAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetServerAddr& default_instance();

  void Swap(cGetServerAddr* other);

  // implements Message ----------------------------------------------

  cGetServerAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetServerAddr& from);
  void MergeFrom(const cGetServerAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetServerAddr)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetServerAddr* default_instance_;
};
// -------------------------------------------------------------------

class sGetServerAddr : public ::google::protobuf::Message {
 public:
  sGetServerAddr();
  virtual ~sGetServerAddr();

  sGetServerAddr(const sGetServerAddr& from);

  inline sGetServerAddr& operator=(const sGetServerAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetServerAddr& default_instance();

  void Swap(sGetServerAddr* other);

  // implements Message ----------------------------------------------

  sGetServerAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetServerAddr& from);
  void MergeFrom(const sGetServerAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serv_addr = 1;
  inline bool has_serv_addr() const;
  inline void clear_serv_addr();
  static const int kServAddrFieldNumber = 1;
  inline const ::std::string& serv_addr() const;
  inline void set_serv_addr(const ::std::string& value);
  inline void set_serv_addr(const char* value);
  inline void set_serv_addr(const char* value, size_t size);
  inline ::std::string* mutable_serv_addr();
  inline ::std::string* release_serv_addr();
  inline void set_allocated_serv_addr(::std::string* serv_addr);

  // @@protoc_insertion_point(class_scope:sGetServerAddr)
 private:
  inline void set_has_serv_addr();
  inline void clear_has_serv_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* serv_addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetServerAddr* default_instance_;
};
// -------------------------------------------------------------------

class cGetPublicBooksList : public ::google::protobuf::Message {
 public:
  cGetPublicBooksList();
  virtual ~cGetPublicBooksList();

  cGetPublicBooksList(const cGetPublicBooksList& from);

  inline cGetPublicBooksList& operator=(const cGetPublicBooksList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetPublicBooksList& default_instance();

  void Swap(cGetPublicBooksList* other);

  // implements Message ----------------------------------------------

  cGetPublicBooksList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetPublicBooksList& from);
  void MergeFrom(const cGetPublicBooksList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cGetPublicBooksList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetPublicBooksList* default_instance_;
};
// -------------------------------------------------------------------

class sGetPublicBooksList : public ::google::protobuf::Message {
 public:
  sGetPublicBooksList();
  virtual ~sGetPublicBooksList();

  sGetPublicBooksList(const sGetPublicBooksList& from);

  inline sGetPublicBooksList& operator=(const sGetPublicBooksList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetPublicBooksList& default_instance();

  void Swap(sGetPublicBooksList* other);

  // implements Message ----------------------------------------------

  sGetPublicBooksList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetPublicBooksList& from);
  void MergeFrom(const sGetPublicBooksList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bookNode book_list = 1;
  inline int book_list_size() const;
  inline void clear_book_list();
  static const int kBookListFieldNumber = 1;
  inline const ::bookNode& book_list(int index) const;
  inline ::bookNode* mutable_book_list(int index);
  inline ::bookNode* add_book_list();
  inline const ::google::protobuf::RepeatedPtrField< ::bookNode >&
      book_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::bookNode >*
      mutable_book_list();

  // @@protoc_insertion_point(class_scope:sGetPublicBooksList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bookNode > book_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetPublicBooksList* default_instance_;
};
// -------------------------------------------------------------------

class cUploadBook : public ::google::protobuf::Message {
 public:
  cUploadBook();
  virtual ~cUploadBook();

  cUploadBook(const cUploadBook& from);

  inline cUploadBook& operator=(const cUploadBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUploadBook& default_instance();

  void Swap(cUploadBook* other);

  // implements Message ----------------------------------------------

  cUploadBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUploadBook& from);
  void MergeFrom(const cUploadBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string book_name = 1;
  inline bool has_book_name() const;
  inline void clear_book_name();
  static const int kBookNameFieldNumber = 1;
  inline const ::std::string& book_name() const;
  inline void set_book_name(const ::std::string& value);
  inline void set_book_name(const char* value);
  inline void set_book_name(const char* value, size_t size);
  inline ::std::string* mutable_book_name();
  inline ::std::string* release_book_name();
  inline void set_allocated_book_name(::std::string* book_name);

  // required int32 book_type = 2;
  inline bool has_book_type() const;
  inline void clear_book_type();
  static const int kBookTypeFieldNumber = 2;
  inline ::google::protobuf::int32 book_type() const;
  inline void set_book_type(::google::protobuf::int32 value);

  // required string time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // required int32 belongs = 4;
  inline bool has_belongs() const;
  inline void clear_belongs();
  static const int kBelongsFieldNumber = 4;
  inline ::google::protobuf::int32 belongs() const;
  inline void set_belongs(::google::protobuf::int32 value);

  // required int32 art = 5;
  inline bool has_art() const;
  inline void clear_art();
  static const int kArtFieldNumber = 5;
  inline ::google::protobuf::int32 art() const;
  inline void set_art(::google::protobuf::int32 value);

  // required int32 language = 6;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 6;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);

  // required int32 community = 7;
  inline bool has_community() const;
  inline void clear_community();
  static const int kCommunityFieldNumber = 7;
  inline ::google::protobuf::int32 community() const;
  inline void set_community(::google::protobuf::int32 value);

  // required int32 health = 8;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 8;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required int32 science = 9;
  inline bool has_science() const;
  inline void clear_science();
  static const int kScienceFieldNumber = 9;
  inline ::google::protobuf::int32 science() const;
  inline void set_science(::google::protobuf::int32 value);

  // required string res_path = 10;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 10;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:cUploadBook)
 private:
  inline void set_has_book_name();
  inline void clear_has_book_name();
  inline void set_has_book_type();
  inline void clear_has_book_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_belongs();
  inline void clear_has_belongs();
  inline void set_has_art();
  inline void clear_has_art();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_community();
  inline void clear_has_community();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_science();
  inline void clear_has_science();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* book_name_;
  ::std::string* time_;
  ::google::protobuf::int32 book_type_;
  ::google::protobuf::int32 belongs_;
  ::google::protobuf::int32 art_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 community_;
  ::google::protobuf::int32 health_;
  ::std::string* res_path_;
  ::google::protobuf::int32 science_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUploadBook* default_instance_;
};
// -------------------------------------------------------------------

class sUploadBook : public ::google::protobuf::Message {
 public:
  sUploadBook();
  virtual ~sUploadBook();

  sUploadBook(const sUploadBook& from);

  inline sUploadBook& operator=(const sUploadBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUploadBook& default_instance();

  void Swap(sUploadBook* other);

  // implements Message ----------------------------------------------

  sUploadBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUploadBook& from);
  void MergeFrom(const sUploadBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sUploadBook)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUploadBook* default_instance_;
};
// -------------------------------------------------------------------

class cDownloadFromPersonal : public ::google::protobuf::Message {
 public:
  cDownloadFromPersonal();
  virtual ~cDownloadFromPersonal();

  cDownloadFromPersonal(const cDownloadFromPersonal& from);

  inline cDownloadFromPersonal& operator=(const cDownloadFromPersonal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cDownloadFromPersonal& default_instance();

  void Swap(cDownloadFromPersonal* other);

  // implements Message ----------------------------------------------

  cDownloadFromPersonal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cDownloadFromPersonal& from);
  void MergeFrom(const cDownloadFromPersonal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::int32 book_id() const;
  inline void set_book_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cDownloadFromPersonal)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 book_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cDownloadFromPersonal* default_instance_;
};
// -------------------------------------------------------------------

class sDownloadFromPersonal : public ::google::protobuf::Message {
 public:
  sDownloadFromPersonal();
  virtual ~sDownloadFromPersonal();

  sDownloadFromPersonal(const sDownloadFromPersonal& from);

  inline sDownloadFromPersonal& operator=(const sDownloadFromPersonal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sDownloadFromPersonal& default_instance();

  void Swap(sDownloadFromPersonal* other);

  // implements Message ----------------------------------------------

  sDownloadFromPersonal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sDownloadFromPersonal& from);
  void MergeFrom(const sDownloadFromPersonal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // required string down_addr = 2;
  inline bool has_down_addr() const;
  inline void clear_down_addr();
  static const int kDownAddrFieldNumber = 2;
  inline const ::std::string& down_addr() const;
  inline void set_down_addr(const ::std::string& value);
  inline void set_down_addr(const char* value);
  inline void set_down_addr(const char* value, size_t size);
  inline ::std::string* mutable_down_addr();
  inline ::std::string* release_down_addr();
  inline void set_allocated_down_addr(::std::string* down_addr);

  // @@protoc_insertion_point(class_scope:sDownloadFromPersonal)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_down_addr();
  inline void clear_has_down_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* down_addr_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sDownloadFromPersonal* default_instance_;
};
// -------------------------------------------------------------------

class cDownloadFromPublic : public ::google::protobuf::Message {
 public:
  cDownloadFromPublic();
  virtual ~cDownloadFromPublic();

  cDownloadFromPublic(const cDownloadFromPublic& from);

  inline cDownloadFromPublic& operator=(const cDownloadFromPublic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cDownloadFromPublic& default_instance();

  void Swap(cDownloadFromPublic* other);

  // implements Message ----------------------------------------------

  cDownloadFromPublic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cDownloadFromPublic& from);
  void MergeFrom(const cDownloadFromPublic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::int32 book_id() const;
  inline void set_book_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cDownloadFromPublic)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 book_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cDownloadFromPublic* default_instance_;
};
// -------------------------------------------------------------------

class sDownloadFromPublic : public ::google::protobuf::Message {
 public:
  sDownloadFromPublic();
  virtual ~sDownloadFromPublic();

  sDownloadFromPublic(const sDownloadFromPublic& from);

  inline sDownloadFromPublic& operator=(const sDownloadFromPublic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sDownloadFromPublic& default_instance();

  void Swap(sDownloadFromPublic* other);

  // implements Message ----------------------------------------------

  sDownloadFromPublic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sDownloadFromPublic& from);
  void MergeFrom(const sDownloadFromPublic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // required string down_addr = 1;
  inline bool has_down_addr() const;
  inline void clear_down_addr();
  static const int kDownAddrFieldNumber = 1;
  inline const ::std::string& down_addr() const;
  inline void set_down_addr(const ::std::string& value);
  inline void set_down_addr(const char* value);
  inline void set_down_addr(const char* value, size_t size);
  inline ::std::string* mutable_down_addr();
  inline ::std::string* release_down_addr();
  inline void set_allocated_down_addr(::std::string* down_addr);

  // @@protoc_insertion_point(class_scope:sDownloadFromPublic)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_down_addr();
  inline void clear_has_down_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* down_addr_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sDownloadFromPublic* default_instance_;
};
// -------------------------------------------------------------------

class cTransferBook : public ::google::protobuf::Message {
 public:
  cTransferBook();
  virtual ~cTransferBook();

  cTransferBook(const cTransferBook& from);

  inline cTransferBook& operator=(const cTransferBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cTransferBook& default_instance();

  void Swap(cTransferBook* other);

  // implements Message ----------------------------------------------

  cTransferBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cTransferBook& from);
  void MergeFrom(const cTransferBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::int32 book_id() const;
  inline void set_book_id(::google::protobuf::int32 value);

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:cTransferBook)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::int32 book_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cTransferBook* default_instance_;
};
// -------------------------------------------------------------------

class sTransferBook : public ::google::protobuf::Message {
 public:
  sTransferBook();
  virtual ~sTransferBook();

  sTransferBook(const sTransferBook& from);

  inline sTransferBook& operator=(const sTransferBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sTransferBook& default_instance();

  void Swap(sTransferBook* other);

  // implements Message ----------------------------------------------

  sTransferBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sTransferBook& from);
  void MergeFrom(const sTransferBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sTransferBook)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sTransferBook* default_instance_;
};
// -------------------------------------------------------------------

class cPublish : public ::google::protobuf::Message {
 public:
  cPublish();
  virtual ~cPublish();

  cPublish(const cPublish& from);

  inline cPublish& operator=(const cPublish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cPublish& default_instance();

  void Swap(cPublish* other);

  // implements Message ----------------------------------------------

  cPublish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cPublish& from);
  void MergeFrom(const cPublish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::int32 book_id() const;
  inline void set_book_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cPublish)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 book_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cPublish* default_instance_;
};
// -------------------------------------------------------------------

class sPublish : public ::google::protobuf::Message {
 public:
  sPublish();
  virtual ~sPublish();

  sPublish(const sPublish& from);

  inline sPublish& operator=(const sPublish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sPublish& default_instance();

  void Swap(sPublish* other);

  // implements Message ----------------------------------------------

  sPublish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sPublish& from);
  void MergeFrom(const sPublish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sPublish)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sPublish* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateDrawSet : public ::google::protobuf::Message {
 public:
  cUpdateDrawSet();
  virtual ~cUpdateDrawSet();

  cUpdateDrawSet(const cUpdateDrawSet& from);

  inline cUpdateDrawSet& operator=(const cUpdateDrawSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateDrawSet& default_instance();

  void Swap(cUpdateDrawSet* other);

  // implements Message ----------------------------------------------

  cUpdateDrawSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateDrawSet& from);
  void MergeFrom(const cUpdateDrawSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool facsimile = 1;
  inline bool has_facsimile() const;
  inline void clear_facsimile();
  static const int kFacsimileFieldNumber = 1;
  inline bool facsimile() const;
  inline void set_facsimile(bool value);

  // optional bool puzzle = 2;
  inline bool has_puzzle() const;
  inline void clear_puzzle();
  static const int kPuzzleFieldNumber = 2;
  inline bool puzzle() const;
  inline void set_puzzle(bool value);

  // optional bool frame = 3;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 3;
  inline bool frame() const;
  inline void set_frame(bool value);

  // optional bool record = 4;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 4;
  inline bool record() const;
  inline void set_record(bool value);

  // optional bool world = 5;
  inline bool has_world() const;
  inline void clear_world();
  static const int kWorldFieldNumber = 5;
  inline bool world() const;
  inline void set_world(bool value);

  // repeated string paper_name = 6;
  inline int paper_name_size() const;
  inline void clear_paper_name();
  static const int kPaperNameFieldNumber = 6;
  inline const ::std::string& paper_name(int index) const;
  inline ::std::string* mutable_paper_name(int index);
  inline void set_paper_name(int index, const ::std::string& value);
  inline void set_paper_name(int index, const char* value);
  inline void set_paper_name(int index, const char* value, size_t size);
  inline ::std::string* add_paper_name();
  inline void add_paper_name(const ::std::string& value);
  inline void add_paper_name(const char* value);
  inline void add_paper_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paper_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paper_name();

  // repeated int32 pen_id = 7;
  inline int pen_id_size() const;
  inline void clear_pen_id();
  static const int kPenIdFieldNumber = 7;
  inline ::google::protobuf::int32 pen_id(int index) const;
  inline void set_pen_id(int index, ::google::protobuf::int32 value);
  inline void add_pen_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pen_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pen_id();

  // @@protoc_insertion_point(class_scope:cUpdateDrawSet)
 private:
  inline void set_has_facsimile();
  inline void clear_has_facsimile();
  inline void set_has_puzzle();
  inline void clear_has_puzzle();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_world();
  inline void clear_has_world();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool facsimile_;
  bool puzzle_;
  bool frame_;
  bool record_;
  bool world_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paper_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pen_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateDrawSet* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateDrawInfo : public ::google::protobuf::Message {
 public:
  cUpdateDrawInfo();
  virtual ~cUpdateDrawInfo();

  cUpdateDrawInfo(const cUpdateDrawInfo& from);

  inline cUpdateDrawInfo& operator=(const cUpdateDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateDrawInfo& default_instance();

  void Swap(cUpdateDrawInfo* other);

  // implements Message ----------------------------------------------

  cUpdateDrawInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateDrawInfo& from);
  void MergeFrom(const cUpdateDrawInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cUpdateDrawInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateDrawInfo* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateDrawInfo : public ::google::protobuf::Message {
 public:
  sUpdateDrawInfo();
  virtual ~sUpdateDrawInfo();

  sUpdateDrawInfo(const sUpdateDrawInfo& from);

  inline sUpdateDrawInfo& operator=(const sUpdateDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateDrawInfo& default_instance();

  void Swap(sUpdateDrawInfo* other);

  // implements Message ----------------------------------------------

  sUpdateDrawInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateDrawInfo& from);
  void MergeFrom(const sUpdateDrawInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sUpdateDrawInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateDrawInfo* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateBackground : public ::google::protobuf::Message {
 public:
  cUpdateBackground();
  virtual ~cUpdateBackground();

  cUpdateBackground(const cUpdateBackground& from);

  inline cUpdateBackground& operator=(const cUpdateBackground& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateBackground& default_instance();

  void Swap(cUpdateBackground* other);

  // implements Message ----------------------------------------------

  cUpdateBackground* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateBackground& from);
  void MergeFrom(const cUpdateBackground& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 paper_id = 1;
  inline bool has_paper_id() const;
  inline void clear_paper_id();
  static const int kPaperIdFieldNumber = 1;
  inline ::google::protobuf::int32 paper_id() const;
  inline void set_paper_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateBackground)
 private:
  inline void set_has_paper_id();
  inline void clear_has_paper_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 paper_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateBackground* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateBackground : public ::google::protobuf::Message {
 public:
  sUpdateBackground();
  virtual ~sUpdateBackground();

  sUpdateBackground(const sUpdateBackground& from);

  inline sUpdateBackground& operator=(const sUpdateBackground& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateBackground& default_instance();

  void Swap(sUpdateBackground* other);

  // implements Message ----------------------------------------------

  sUpdateBackground* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateBackground& from);
  void MergeFrom(const sUpdateBackground& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 paper_id = 1;
  inline bool has_paper_id() const;
  inline void clear_paper_id();
  static const int kPaperIdFieldNumber = 1;
  inline ::google::protobuf::int32 paper_id() const;
  inline void set_paper_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateBackground)
 private:
  inline void set_has_paper_id();
  inline void clear_has_paper_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 paper_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateBackground* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateCopyIntoPaint : public ::google::protobuf::Message {
 public:
  cUpdateCopyIntoPaint();
  virtual ~cUpdateCopyIntoPaint();

  cUpdateCopyIntoPaint(const cUpdateCopyIntoPaint& from);

  inline cUpdateCopyIntoPaint& operator=(const cUpdateCopyIntoPaint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateCopyIntoPaint& default_instance();

  void Swap(cUpdateCopyIntoPaint* other);

  // implements Message ----------------------------------------------

  cUpdateCopyIntoPaint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateCopyIntoPaint& from);
  void MergeFrom(const cUpdateCopyIntoPaint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pic_id = 1;
  inline bool has_pic_id() const;
  inline void clear_pic_id();
  static const int kPicIdFieldNumber = 1;
  inline ::google::protobuf::int32 pic_id() const;
  inline void set_pic_id(::google::protobuf::int32 value);

  // required string pic_res = 2;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 2;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pic_scale = 3;
  inline bool has_pic_scale() const;
  inline void clear_pic_scale();
  static const int kPicScaleFieldNumber = 3;
  inline const ::std::string& pic_scale() const;
  inline void set_pic_scale(const ::std::string& value);
  inline void set_pic_scale(const char* value);
  inline void set_pic_scale(const char* value, size_t size);
  inline ::std::string* mutable_pic_scale();
  inline ::std::string* release_pic_scale();
  inline void set_allocated_pic_scale(::std::string* pic_scale);

  // required string pic_rotation = 4;
  inline bool has_pic_rotation() const;
  inline void clear_pic_rotation();
  static const int kPicRotationFieldNumber = 4;
  inline const ::std::string& pic_rotation() const;
  inline void set_pic_rotation(const ::std::string& value);
  inline void set_pic_rotation(const char* value);
  inline void set_pic_rotation(const char* value, size_t size);
  inline ::std::string* mutable_pic_rotation();
  inline ::std::string* release_pic_rotation();
  inline void set_allocated_pic_rotation(::std::string* pic_rotation);

  // required string pt_x = 5;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 5;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 6;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 6;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required int32 op_type = 7;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 7;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateCopyIntoPaint)
 private:
  inline void set_has_pic_id();
  inline void clear_has_pic_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pic_scale();
  inline void clear_has_pic_scale();
  inline void set_has_pic_rotation();
  inline void clear_has_pic_rotation();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_op_type();
  inline void clear_has_op_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pic_scale_;
  ::std::string* pic_rotation_;
  ::google::protobuf::int32 pic_id_;
  ::google::protobuf::int32 op_type_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateCopyIntoPaint* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateCopyIntoPaint : public ::google::protobuf::Message {
 public:
  sUpdateCopyIntoPaint();
  virtual ~sUpdateCopyIntoPaint();

  sUpdateCopyIntoPaint(const sUpdateCopyIntoPaint& from);

  inline sUpdateCopyIntoPaint& operator=(const sUpdateCopyIntoPaint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateCopyIntoPaint& default_instance();

  void Swap(sUpdateCopyIntoPaint* other);

  // implements Message ----------------------------------------------

  sUpdateCopyIntoPaint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateCopyIntoPaint& from);
  void MergeFrom(const sUpdateCopyIntoPaint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pic_id = 1;
  inline bool has_pic_id() const;
  inline void clear_pic_id();
  static const int kPicIdFieldNumber = 1;
  inline ::google::protobuf::int32 pic_id() const;
  inline void set_pic_id(::google::protobuf::int32 value);

  // required string pic_res = 2;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 2;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pic_scale = 3;
  inline bool has_pic_scale() const;
  inline void clear_pic_scale();
  static const int kPicScaleFieldNumber = 3;
  inline const ::std::string& pic_scale() const;
  inline void set_pic_scale(const ::std::string& value);
  inline void set_pic_scale(const char* value);
  inline void set_pic_scale(const char* value, size_t size);
  inline ::std::string* mutable_pic_scale();
  inline ::std::string* release_pic_scale();
  inline void set_allocated_pic_scale(::std::string* pic_scale);

  // required string pic_rotation = 4;
  inline bool has_pic_rotation() const;
  inline void clear_pic_rotation();
  static const int kPicRotationFieldNumber = 4;
  inline const ::std::string& pic_rotation() const;
  inline void set_pic_rotation(const ::std::string& value);
  inline void set_pic_rotation(const char* value);
  inline void set_pic_rotation(const char* value, size_t size);
  inline ::std::string* mutable_pic_rotation();
  inline ::std::string* release_pic_rotation();
  inline void set_allocated_pic_rotation(::std::string* pic_rotation);

  // required string pt_x = 5;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 5;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 6;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 6;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required int32 op_type = 7;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 7;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateCopyIntoPaint)
 private:
  inline void set_has_pic_id();
  inline void clear_has_pic_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pic_scale();
  inline void clear_has_pic_scale();
  inline void set_has_pic_rotation();
  inline void clear_has_pic_rotation();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_op_type();
  inline void clear_has_op_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pic_scale_;
  ::std::string* pic_rotation_;
  ::google::protobuf::int32 pic_id_;
  ::google::protobuf::int32 op_type_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateCopyIntoPaint* default_instance_;
};
// -------------------------------------------------------------------

class cUpdatePenAnderaser : public ::google::protobuf::Message {
 public:
  cUpdatePenAnderaser();
  virtual ~cUpdatePenAnderaser();

  cUpdatePenAnderaser(const cUpdatePenAnderaser& from);

  inline cUpdatePenAnderaser& operator=(const cUpdatePenAnderaser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdatePenAnderaser& default_instance();

  void Swap(cUpdatePenAnderaser* other);

  // implements Message ----------------------------------------------

  cUpdatePenAnderaser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdatePenAnderaser& from);
  void MergeFrom(const cUpdatePenAnderaser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pen_type = 1;
  inline bool has_pen_type() const;
  inline void clear_pen_type();
  static const int kPenTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pen_type() const;
  inline void set_pen_type(::google::protobuf::int32 value);

  // required int32 pen_color = 2;
  inline bool has_pen_color() const;
  inline void clear_pen_color();
  static const int kPenColorFieldNumber = 2;
  inline ::google::protobuf::int32 pen_color() const;
  inline void set_pen_color(::google::protobuf::int32 value);

  // required string pen_size = 3;
  inline bool has_pen_size() const;
  inline void clear_pen_size();
  static const int kPenSizeFieldNumber = 3;
  inline const ::std::string& pen_size() const;
  inline void set_pen_size(const ::std::string& value);
  inline void set_pen_size(const char* value);
  inline void set_pen_size(const char* value, size_t size);
  inline ::std::string* mutable_pen_size();
  inline ::std::string* release_pen_size();
  inline void set_allocated_pen_size(::std::string* pen_size);

  // required int32 pen_trans = 4;
  inline bool has_pen_trans() const;
  inline void clear_pen_trans();
  static const int kPenTransFieldNumber = 4;
  inline ::google::protobuf::int32 pen_trans() const;
  inline void set_pen_trans(::google::protobuf::int32 value);

  // required int32 paint_type = 5;
  inline bool has_paint_type() const;
  inline void clear_paint_type();
  static const int kPaintTypeFieldNumber = 5;
  inline ::google::protobuf::int32 paint_type() const;
  inline void set_paint_type(::google::protobuf::int32 value);

  // required string pt_x = 6;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 6;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 7;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 7;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required string prept_x = 8;
  inline bool has_prept_x() const;
  inline void clear_prept_x();
  static const int kPreptXFieldNumber = 8;
  inline const ::std::string& prept_x() const;
  inline void set_prept_x(const ::std::string& value);
  inline void set_prept_x(const char* value);
  inline void set_prept_x(const char* value, size_t size);
  inline ::std::string* mutable_prept_x();
  inline ::std::string* release_prept_x();
  inline void set_allocated_prept_x(::std::string* prept_x);

  // required string prept_y = 9;
  inline bool has_prept_y() const;
  inline void clear_prept_y();
  static const int kPreptYFieldNumber = 9;
  inline const ::std::string& prept_y() const;
  inline void set_prept_y(const ::std::string& value);
  inline void set_prept_y(const char* value);
  inline void set_prept_y(const char* value, size_t size);
  inline ::std::string* mutable_prept_y();
  inline ::std::string* release_prept_y();
  inline void set_allocated_prept_y(::std::string* prept_y);

  // @@protoc_insertion_point(class_scope:cUpdatePenAnderaser)
 private:
  inline void set_has_pen_type();
  inline void clear_has_pen_type();
  inline void set_has_pen_color();
  inline void clear_has_pen_color();
  inline void set_has_pen_size();
  inline void clear_has_pen_size();
  inline void set_has_pen_trans();
  inline void clear_has_pen_trans();
  inline void set_has_paint_type();
  inline void clear_has_paint_type();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_prept_x();
  inline void clear_has_prept_x();
  inline void set_has_prept_y();
  inline void clear_has_prept_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pen_type_;
  ::google::protobuf::int32 pen_color_;
  ::std::string* pen_size_;
  ::google::protobuf::int32 pen_trans_;
  ::google::protobuf::int32 paint_type_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::std::string* prept_x_;
  ::std::string* prept_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdatePenAnderaser* default_instance_;
};
// -------------------------------------------------------------------

class sUpdatePenAnderaser : public ::google::protobuf::Message {
 public:
  sUpdatePenAnderaser();
  virtual ~sUpdatePenAnderaser();

  sUpdatePenAnderaser(const sUpdatePenAnderaser& from);

  inline sUpdatePenAnderaser& operator=(const sUpdatePenAnderaser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdatePenAnderaser& default_instance();

  void Swap(sUpdatePenAnderaser* other);

  // implements Message ----------------------------------------------

  sUpdatePenAnderaser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdatePenAnderaser& from);
  void MergeFrom(const sUpdatePenAnderaser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pen_type = 1;
  inline bool has_pen_type() const;
  inline void clear_pen_type();
  static const int kPenTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pen_type() const;
  inline void set_pen_type(::google::protobuf::int32 value);

  // required int32 pen_color = 2;
  inline bool has_pen_color() const;
  inline void clear_pen_color();
  static const int kPenColorFieldNumber = 2;
  inline ::google::protobuf::int32 pen_color() const;
  inline void set_pen_color(::google::protobuf::int32 value);

  // required string pen_size = 3;
  inline bool has_pen_size() const;
  inline void clear_pen_size();
  static const int kPenSizeFieldNumber = 3;
  inline const ::std::string& pen_size() const;
  inline void set_pen_size(const ::std::string& value);
  inline void set_pen_size(const char* value);
  inline void set_pen_size(const char* value, size_t size);
  inline ::std::string* mutable_pen_size();
  inline ::std::string* release_pen_size();
  inline void set_allocated_pen_size(::std::string* pen_size);

  // required int32 pen_trans = 4;
  inline bool has_pen_trans() const;
  inline void clear_pen_trans();
  static const int kPenTransFieldNumber = 4;
  inline ::google::protobuf::int32 pen_trans() const;
  inline void set_pen_trans(::google::protobuf::int32 value);

  // required int32 paint_type = 5;
  inline bool has_paint_type() const;
  inline void clear_paint_type();
  static const int kPaintTypeFieldNumber = 5;
  inline ::google::protobuf::int32 paint_type() const;
  inline void set_paint_type(::google::protobuf::int32 value);

  // required string pt_x = 6;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 6;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 7;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 7;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required string prept_x = 8;
  inline bool has_prept_x() const;
  inline void clear_prept_x();
  static const int kPreptXFieldNumber = 8;
  inline const ::std::string& prept_x() const;
  inline void set_prept_x(const ::std::string& value);
  inline void set_prept_x(const char* value);
  inline void set_prept_x(const char* value, size_t size);
  inline ::std::string* mutable_prept_x();
  inline ::std::string* release_prept_x();
  inline void set_allocated_prept_x(::std::string* prept_x);

  // required string prept_y = 9;
  inline bool has_prept_y() const;
  inline void clear_prept_y();
  static const int kPreptYFieldNumber = 9;
  inline const ::std::string& prept_y() const;
  inline void set_prept_y(const ::std::string& value);
  inline void set_prept_y(const char* value);
  inline void set_prept_y(const char* value, size_t size);
  inline ::std::string* mutable_prept_y();
  inline ::std::string* release_prept_y();
  inline void set_allocated_prept_y(::std::string* prept_y);

  // @@protoc_insertion_point(class_scope:sUpdatePenAnderaser)
 private:
  inline void set_has_pen_type();
  inline void clear_has_pen_type();
  inline void set_has_pen_color();
  inline void clear_has_pen_color();
  inline void set_has_pen_size();
  inline void clear_has_pen_size();
  inline void set_has_pen_trans();
  inline void clear_has_pen_trans();
  inline void set_has_paint_type();
  inline void clear_has_paint_type();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_prept_x();
  inline void clear_has_prept_x();
  inline void set_has_prept_y();
  inline void clear_has_prept_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pen_type_;
  ::google::protobuf::int32 pen_color_;
  ::std::string* pen_size_;
  ::google::protobuf::int32 pen_trans_;
  ::google::protobuf::int32 paint_type_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::std::string* prept_x_;
  ::std::string* prept_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdatePenAnderaser* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateFilling : public ::google::protobuf::Message {
 public:
  cUpdateFilling();
  virtual ~cUpdateFilling();

  cUpdateFilling(const cUpdateFilling& from);

  inline cUpdateFilling& operator=(const cUpdateFilling& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateFilling& default_instance();

  void Swap(cUpdateFilling* other);

  // implements Message ----------------------------------------------

  cUpdateFilling* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateFilling& from);
  void MergeFrom(const cUpdateFilling& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pt_list = 1;
  inline bool has_pt_list() const;
  inline void clear_pt_list();
  static const int kPtListFieldNumber = 1;
  inline const ::std::string& pt_list() const;
  inline void set_pt_list(const ::std::string& value);
  inline void set_pt_list(const char* value);
  inline void set_pt_list(const char* value, size_t size);
  inline ::std::string* mutable_pt_list();
  inline ::std::string* release_pt_list();
  inline void set_allocated_pt_list(::std::string* pt_list);

  // required int32 trans = 3;
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 3;
  inline ::google::protobuf::int32 trans() const;
  inline void set_trans(::google::protobuf::int32 value);

  // required int32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateFilling)
 private:
  inline void set_has_pt_list();
  inline void clear_has_pt_list();
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pt_list_;
  ::google::protobuf::int32 trans_;
  ::google::protobuf::int32 color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateFilling* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateFilling : public ::google::protobuf::Message {
 public:
  sUpdateFilling();
  virtual ~sUpdateFilling();

  sUpdateFilling(const sUpdateFilling& from);

  inline sUpdateFilling& operator=(const sUpdateFilling& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateFilling& default_instance();

  void Swap(sUpdateFilling* other);

  // implements Message ----------------------------------------------

  sUpdateFilling* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateFilling& from);
  void MergeFrom(const sUpdateFilling& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pt_list = 1;
  inline bool has_pt_list() const;
  inline void clear_pt_list();
  static const int kPtListFieldNumber = 1;
  inline const ::std::string& pt_list() const;
  inline void set_pt_list(const ::std::string& value);
  inline void set_pt_list(const char* value);
  inline void set_pt_list(const char* value, size_t size);
  inline ::std::string* mutable_pt_list();
  inline ::std::string* release_pt_list();
  inline void set_allocated_pt_list(::std::string* pt_list);

  // required int32 trans = 3;
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 3;
  inline ::google::protobuf::int32 trans() const;
  inline void set_trans(::google::protobuf::int32 value);

  // required int32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateFilling)
 private:
  inline void set_has_pt_list();
  inline void clear_has_pt_list();
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pt_list_;
  ::google::protobuf::int32 trans_;
  ::google::protobuf::int32 color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateFilling* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateStamp : public ::google::protobuf::Message {
 public:
  cUpdateStamp();
  virtual ~cUpdateStamp();

  cUpdateStamp(const cUpdateStamp& from);

  inline cUpdateStamp& operator=(const cUpdateStamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateStamp& default_instance();

  void Swap(cUpdateStamp* other);

  // implements Message ----------------------------------------------

  cUpdateStamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateStamp& from);
  void MergeFrom(const cUpdateStamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pt_x = 2;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 2;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 3;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 3;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:cUpdateStamp)
 private:
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateStamp* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateStamp : public ::google::protobuf::Message {
 public:
  sUpdateStamp();
  virtual ~sUpdateStamp();

  sUpdateStamp(const sUpdateStamp& from);

  inline sUpdateStamp& operator=(const sUpdateStamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateStamp& default_instance();

  void Swap(sUpdateStamp* other);

  // implements Message ----------------------------------------------

  sUpdateStamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateStamp& from);
  void MergeFrom(const sUpdateStamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pt_x = 2;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 2;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 3;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 3;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:sUpdateStamp)
 private:
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateStamp* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateFillPic : public ::google::protobuf::Message {
 public:
  cUpdateFillPic();
  virtual ~cUpdateFillPic();

  cUpdateFillPic(const cUpdateFillPic& from);

  inline cUpdateFillPic& operator=(const cUpdateFillPic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateFillPic& default_instance();

  void Swap(cUpdateFillPic* other);

  // implements Message ----------------------------------------------

  cUpdateFillPic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateFillPic& from);
  void MergeFrom(const cUpdateFillPic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pt_x = 2;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 2;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 3;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 3;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:cUpdateFillPic)
 private:
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateFillPic* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateFillPic : public ::google::protobuf::Message {
 public:
  sUpdateFillPic();
  virtual ~sUpdateFillPic();

  sUpdateFillPic(const sUpdateFillPic& from);

  inline sUpdateFillPic& operator=(const sUpdateFillPic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateFillPic& default_instance();

  void Swap(sUpdateFillPic* other);

  // implements Message ----------------------------------------------

  sUpdateFillPic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateFillPic& from);
  void MergeFrom(const sUpdateFillPic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required string pt_x = 2;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 2;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 3;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 3;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // @@protoc_insertion_point(class_scope:sUpdateFillPic)
 private:
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateFillPic* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateMutex : public ::google::protobuf::Message {
 public:
  cUpdateMutex();
  virtual ~cUpdateMutex();

  cUpdateMutex(const cUpdateMutex& from);

  inline cUpdateMutex& operator=(const cUpdateMutex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateMutex& default_instance();

  void Swap(cUpdateMutex* other);

  // implements Message ----------------------------------------------

  cUpdateMutex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateMutex& from);
  void MergeFrom(const cUpdateMutex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lock = 1;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 1;
  inline ::google::protobuf::int32 lock() const;
  inline void set_lock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateMutex)
 private:
  inline void set_has_lock();
  inline void clear_has_lock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateMutex* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateMutex : public ::google::protobuf::Message {
 public:
  sUpdateMutex();
  virtual ~sUpdateMutex();

  sUpdateMutex(const sUpdateMutex& from);

  inline sUpdateMutex& operator=(const sUpdateMutex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateMutex& default_instance();

  void Swap(sUpdateMutex* other);

  // implements Message ----------------------------------------------

  sUpdateMutex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateMutex& from);
  void MergeFrom(const sUpdateMutex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateMutex)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateMutex* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateCollage : public ::google::protobuf::Message {
 public:
  cUpdateCollage();
  virtual ~cUpdateCollage();

  cUpdateCollage(const cUpdateCollage& from);

  inline cUpdateCollage& operator=(const cUpdateCollage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateCollage& default_instance();

  void Swap(cUpdateCollage* other);

  // implements Message ----------------------------------------------

  cUpdateCollage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateCollage& from);
  void MergeFrom(const cUpdateCollage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 9;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 9;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required int32 pic_type = 2;
  inline bool has_pic_type() const;
  inline void clear_pic_type();
  static const int kPicTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pic_type() const;
  inline void set_pic_type(::google::protobuf::int32 value);

  // required string pic_scale = 3;
  inline bool has_pic_scale() const;
  inline void clear_pic_scale();
  static const int kPicScaleFieldNumber = 3;
  inline const ::std::string& pic_scale() const;
  inline void set_pic_scale(const ::std::string& value);
  inline void set_pic_scale(const char* value);
  inline void set_pic_scale(const char* value, size_t size);
  inline ::std::string* mutable_pic_scale();
  inline ::std::string* release_pic_scale();
  inline void set_allocated_pic_scale(::std::string* pic_scale);

  // required string pic_rotation = 4;
  inline bool has_pic_rotation() const;
  inline void clear_pic_rotation();
  static const int kPicRotationFieldNumber = 4;
  inline const ::std::string& pic_rotation() const;
  inline void set_pic_rotation(const ::std::string& value);
  inline void set_pic_rotation(const char* value);
  inline void set_pic_rotation(const char* value, size_t size);
  inline ::std::string* mutable_pic_rotation();
  inline ::std::string* release_pic_rotation();
  inline void set_allocated_pic_rotation(::std::string* pic_rotation);

  // required string pt_x = 5;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 5;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 6;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 6;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required int32 layer = 7;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 7;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // required int32 op_type = 8;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 8;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateCollage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pic_type();
  inline void clear_has_pic_type();
  inline void set_has_pic_scale();
  inline void clear_has_pic_scale();
  inline void set_has_pic_rotation();
  inline void clear_has_pic_rotation();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_op_type();
  inline void clear_has_op_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pic_type_;
  ::std::string* pic_scale_;
  ::std::string* pic_rotation_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 op_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateCollage* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateCollage : public ::google::protobuf::Message {
 public:
  sUpdateCollage();
  virtual ~sUpdateCollage();

  sUpdateCollage(const sUpdateCollage& from);

  inline sUpdateCollage& operator=(const sUpdateCollage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateCollage& default_instance();

  void Swap(sUpdateCollage* other);

  // implements Message ----------------------------------------------

  sUpdateCollage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateCollage& from);
  void MergeFrom(const sUpdateCollage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 9;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 9;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string pic_res = 1;
  inline bool has_pic_res() const;
  inline void clear_pic_res();
  static const int kPicResFieldNumber = 1;
  inline const ::std::string& pic_res() const;
  inline void set_pic_res(const ::std::string& value);
  inline void set_pic_res(const char* value);
  inline void set_pic_res(const char* value, size_t size);
  inline ::std::string* mutable_pic_res();
  inline ::std::string* release_pic_res();
  inline void set_allocated_pic_res(::std::string* pic_res);

  // required int32 pic_type = 2;
  inline bool has_pic_type() const;
  inline void clear_pic_type();
  static const int kPicTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pic_type() const;
  inline void set_pic_type(::google::protobuf::int32 value);

  // required string pic_scale = 3;
  inline bool has_pic_scale() const;
  inline void clear_pic_scale();
  static const int kPicScaleFieldNumber = 3;
  inline const ::std::string& pic_scale() const;
  inline void set_pic_scale(const ::std::string& value);
  inline void set_pic_scale(const char* value);
  inline void set_pic_scale(const char* value, size_t size);
  inline ::std::string* mutable_pic_scale();
  inline ::std::string* release_pic_scale();
  inline void set_allocated_pic_scale(::std::string* pic_scale);

  // required string pic_rotation = 4;
  inline bool has_pic_rotation() const;
  inline void clear_pic_rotation();
  static const int kPicRotationFieldNumber = 4;
  inline const ::std::string& pic_rotation() const;
  inline void set_pic_rotation(const ::std::string& value);
  inline void set_pic_rotation(const char* value);
  inline void set_pic_rotation(const char* value, size_t size);
  inline ::std::string* mutable_pic_rotation();
  inline ::std::string* release_pic_rotation();
  inline void set_allocated_pic_rotation(::std::string* pic_rotation);

  // required string pt_x = 5;
  inline bool has_pt_x() const;
  inline void clear_pt_x();
  static const int kPtXFieldNumber = 5;
  inline const ::std::string& pt_x() const;
  inline void set_pt_x(const ::std::string& value);
  inline void set_pt_x(const char* value);
  inline void set_pt_x(const char* value, size_t size);
  inline ::std::string* mutable_pt_x();
  inline ::std::string* release_pt_x();
  inline void set_allocated_pt_x(::std::string* pt_x);

  // required string pt_y = 6;
  inline bool has_pt_y() const;
  inline void clear_pt_y();
  static const int kPtYFieldNumber = 6;
  inline const ::std::string& pt_y() const;
  inline void set_pt_y(const ::std::string& value);
  inline void set_pt_y(const char* value);
  inline void set_pt_y(const char* value, size_t size);
  inline ::std::string* mutable_pt_y();
  inline ::std::string* release_pt_y();
  inline void set_allocated_pt_y(::std::string* pt_y);

  // required int32 layer = 7;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 7;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // required int32 op_type = 8;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 8;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateCollage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pic_res();
  inline void clear_has_pic_res();
  inline void set_has_pic_type();
  inline void clear_has_pic_type();
  inline void set_has_pic_scale();
  inline void clear_has_pic_scale();
  inline void set_has_pic_rotation();
  inline void clear_has_pic_rotation();
  inline void set_has_pt_x();
  inline void clear_has_pt_x();
  inline void set_has_pt_y();
  inline void clear_has_pt_y();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_op_type();
  inline void clear_has_op_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pic_res_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pic_type_;
  ::std::string* pic_scale_;
  ::std::string* pic_rotation_;
  ::std::string* pt_x_;
  ::std::string* pt_y_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 op_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateCollage* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateWord : public ::google::protobuf::Message {
 public:
  cUpdateWord();
  virtual ~cUpdateWord();

  cUpdateWord(const cUpdateWord& from);

  inline cUpdateWord& operator=(const cUpdateWord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateWord& default_instance();

  void Swap(cUpdateWord* other);

  // implements Message ----------------------------------------------

  cUpdateWord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateWord& from);
  void MergeFrom(const cUpdateWord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 9;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 9;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required int32 front = 3;
  inline bool has_front() const;
  inline void clear_front();
  static const int kFrontFieldNumber = 3;
  inline ::google::protobuf::int32 front() const;
  inline void set_front(::google::protobuf::int32 value);

  // required int32 color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // required int32 size = 5;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required int32 effect_id = 6;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 6;
  inline ::google::protobuf::int32 effect_id() const;
  inline void set_effect_id(::google::protobuf::int32 value);

  // required string frame_x = 7;
  inline bool has_frame_x() const;
  inline void clear_frame_x();
  static const int kFrameXFieldNumber = 7;
  inline const ::std::string& frame_x() const;
  inline void set_frame_x(const ::std::string& value);
  inline void set_frame_x(const char* value);
  inline void set_frame_x(const char* value, size_t size);
  inline ::std::string* mutable_frame_x();
  inline ::std::string* release_frame_x();
  inline void set_allocated_frame_x(::std::string* frame_x);

  // required string frame_y = 8;
  inline bool has_frame_y() const;
  inline void clear_frame_y();
  static const int kFrameYFieldNumber = 8;
  inline const ::std::string& frame_y() const;
  inline void set_frame_y(const ::std::string& value);
  inline void set_frame_y(const char* value);
  inline void set_frame_y(const char* value, size_t size);
  inline ::std::string* mutable_frame_y();
  inline ::std::string* release_frame_y();
  inline void set_allocated_frame_y(::std::string* frame_y);

  // @@protoc_insertion_point(class_scope:cUpdateWord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_front();
  inline void clear_has_front();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_effect_id();
  inline void clear_has_effect_id();
  inline void set_has_frame_x();
  inline void clear_has_frame_x();
  inline void set_has_frame_y();
  inline void clear_has_frame_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 frame_id_;
  ::std::string* msg_;
  ::google::protobuf::int32 front_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 effect_id_;
  ::std::string* frame_x_;
  ::std::string* frame_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateWord* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateWord : public ::google::protobuf::Message {
 public:
  sUpdateWord();
  virtual ~sUpdateWord();

  sUpdateWord(const sUpdateWord& from);

  inline sUpdateWord& operator=(const sUpdateWord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateWord& default_instance();

  void Swap(sUpdateWord* other);

  // implements Message ----------------------------------------------

  sUpdateWord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateWord& from);
  void MergeFrom(const sUpdateWord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sUpdateWord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateWord* default_instance_;
};
// -------------------------------------------------------------------

class cUpdateFrame : public ::google::protobuf::Message {
 public:
  cUpdateFrame();
  virtual ~cUpdateFrame();

  cUpdateFrame(const cUpdateFrame& from);

  inline cUpdateFrame& operator=(const cUpdateFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cUpdateFrame& default_instance();

  void Swap(cUpdateFrame* other);

  // implements Message ----------------------------------------------

  cUpdateFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cUpdateFrame& from);
  void MergeFrom(const cUpdateFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cUpdateFrame)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 frame_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cUpdateFrame* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateFrame : public ::google::protobuf::Message {
 public:
  sUpdateFrame();
  virtual ~sUpdateFrame();

  sUpdateFrame(const sUpdateFrame& from);

  inline sUpdateFrame& operator=(const sUpdateFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateFrame& default_instance();

  void Swap(sUpdateFrame* other);

  // implements Message ----------------------------------------------

  sUpdateFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateFrame& from);
  void MergeFrom(const sUpdateFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateFrame)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 frame_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// cLogin

// required int32 type = 1;
inline bool cLogin::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cLogin::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cLogin::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cLogin::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 cLogin::type() const {
  return type_;
}
inline void cLogin::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string account = 2;
inline bool cLogin::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cLogin::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& cLogin::account() const {
  return *account_;
}
inline void cLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void cLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void cLogin::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* cLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cLogin::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passwd = 3;
inline bool cLogin::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cLogin::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cLogin::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cLogin::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& cLogin::passwd() const {
  return *passwd_;
}
inline void cLogin::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void cLogin::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void cLogin::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cLogin::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* cLogin::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cLogin::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sLogin

// optional bool result = 2;
inline bool sLogin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sLogin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sLogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sLogin::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sLogin::result() const {
  return result_;
}
inline void sLogin::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional bool enter_classroom = 3;
inline bool sLogin::has_enter_classroom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sLogin::set_has_enter_classroom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sLogin::clear_has_enter_classroom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sLogin::clear_enter_classroom() {
  enter_classroom_ = false;
  clear_has_enter_classroom();
}
inline bool sLogin::enter_classroom() const {
  return enter_classroom_;
}
inline void sLogin::set_enter_classroom(bool value) {
  set_has_enter_classroom();
  enter_classroom_ = value;
}

// optional int32 student_id = 1;
inline bool sLogin::has_student_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sLogin::set_has_student_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sLogin::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sLogin::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sLogin::student_id() const {
  return student_id_;
}
inline void sLogin::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// cLogout

// -------------------------------------------------------------------

// sLogout

// required int32 login_type = 1;
inline bool sLogout::has_login_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sLogout::set_has_login_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sLogout::clear_has_login_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sLogout::clear_login_type() {
  login_type_ = 0;
  clear_has_login_type();
}
inline ::google::protobuf::int32 sLogout::login_type() const {
  return login_type_;
}
inline void sLogout::set_login_type(::google::protobuf::int32 value) {
  set_has_login_type();
  login_type_ = value;
}

// required int32 id = 2;
inline bool sLogout::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sLogout::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sLogout::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sLogout::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sLogout::id() const {
  return id_;
}
inline void sLogout::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// cGetFuncList

// -------------------------------------------------------------------

// FuncNode

// required int32 id = 1;
inline bool FuncNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FuncNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FuncNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FuncNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FuncNode::id() const {
  return id_;
}
inline void FuncNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool FuncNode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FuncNode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FuncNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FuncNode::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FuncNode::name() const {
  return *name_;
}
inline void FuncNode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FuncNode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FuncNode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FuncNode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FuncNode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FuncNode::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string res_path = 3;
inline bool FuncNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FuncNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FuncNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FuncNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& FuncNode::res_path() const {
  return *res_path_;
}
inline void FuncNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void FuncNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void FuncNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FuncNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* FuncNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FuncNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetFuncList

// repeated .FuncNode func_list = 1;
inline int sGetFuncList::func_list_size() const {
  return func_list_.size();
}
inline void sGetFuncList::clear_func_list() {
  func_list_.Clear();
}
inline const ::FuncNode& sGetFuncList::func_list(int index) const {
  return func_list_.Get(index);
}
inline ::FuncNode* sGetFuncList::mutable_func_list(int index) {
  return func_list_.Mutable(index);
}
inline ::FuncNode* sGetFuncList::add_func_list() {
  return func_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FuncNode >&
sGetFuncList::func_list() const {
  return func_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::FuncNode >*
sGetFuncList::mutable_func_list() {
  return &func_list_;
}

// -------------------------------------------------------------------

// cSetFunc

// required int32 func_type = 1;
inline bool cSetFunc::has_func_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSetFunc::set_has_func_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSetFunc::clear_has_func_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSetFunc::clear_func_type() {
  func_type_ = 0;
  clear_has_func_type();
}
inline ::google::protobuf::int32 cSetFunc::func_type() const {
  return func_type_;
}
inline void cSetFunc::set_func_type(::google::protobuf::int32 value) {
  set_has_func_type();
  func_type_ = value;
}

// -------------------------------------------------------------------

// sSetFunc

// optional bool result = 1;
inline bool sSetFunc::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSetFunc::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSetFunc::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSetFunc::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sSetFunc::result() const {
  return result_;
}
inline void sSetFunc::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// cGetGradeList

// required int32 content = 1;
inline bool cGetGradeList::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetGradeList::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetGradeList::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetGradeList::clear_content() {
  content_ = 0;
  clear_has_content();
}
inline ::google::protobuf::int32 cGetGradeList::content() const {
  return content_;
}
inline void cGetGradeList::set_content(::google::protobuf::int32 value) {
  set_has_content();
  content_ = value;
}

// -------------------------------------------------------------------

// sGetGradeList

// repeated .ClassListNode grade_list = 1;
inline int sGetGradeList::grade_list_size() const {
  return grade_list_.size();
}
inline void sGetGradeList::clear_grade_list() {
  grade_list_.Clear();
}
inline const ::ClassListNode& sGetGradeList::grade_list(int index) const {
  return grade_list_.Get(index);
}
inline ::ClassListNode* sGetGradeList::mutable_grade_list(int index) {
  return grade_list_.Mutable(index);
}
inline ::ClassListNode* sGetGradeList::add_grade_list() {
  return grade_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
sGetGradeList::grade_list() const {
  return grade_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
sGetGradeList::mutable_grade_list() {
  return &grade_list_;
}

// -------------------------------------------------------------------

// cGetCourseList

// required int32 grade_id = 1;
inline bool cGetCourseList::has_grade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetCourseList::set_has_grade_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetCourseList::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetCourseList::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 cGetCourseList::grade_id() const {
  return grade_id_;
}
inline void cGetCourseList::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// -------------------------------------------------------------------

// CourseNode

// required int32 course_id = 1;
inline bool CourseNode::has_course_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CourseNode::set_has_course_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CourseNode::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CourseNode::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 CourseNode::course_id() const {
  return course_id_;
}
inline void CourseNode::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// required string course_name = 2;
inline bool CourseNode::has_course_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CourseNode::set_has_course_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CourseNode::clear_has_course_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CourseNode::clear_course_name() {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    course_name_->clear();
  }
  clear_has_course_name();
}
inline const ::std::string& CourseNode::course_name() const {
  return *course_name_;
}
inline void CourseNode::set_course_name(const ::std::string& value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void CourseNode::set_course_name(const char* value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void CourseNode::set_course_name(const char* value, size_t size) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CourseNode::mutable_course_name() {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  return course_name_;
}
inline ::std::string* CourseNode::release_course_name() {
  clear_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_name_;
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CourseNode::set_allocated_course_name(::std::string* course_name) {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    delete course_name_;
  }
  if (course_name) {
    set_has_course_name();
    course_name_ = course_name;
  } else {
    clear_has_course_name();
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 grade_id = 3;
inline bool CourseNode::has_grade_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CourseNode::set_has_grade_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CourseNode::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CourseNode::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 CourseNode::grade_id() const {
  return grade_id_;
}
inline void CourseNode::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// optional int32 language = 4;
inline bool CourseNode::has_language() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CourseNode::set_has_language() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CourseNode::clear_has_language() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CourseNode::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 CourseNode::language() const {
  return language_;
}
inline void CourseNode::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// optional int32 art = 5;
inline bool CourseNode::has_art() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CourseNode::set_has_art() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CourseNode::clear_has_art() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CourseNode::clear_art() {
  art_ = 0;
  clear_has_art();
}
inline ::google::protobuf::int32 CourseNode::art() const {
  return art_;
}
inline void CourseNode::set_art(::google::protobuf::int32 value) {
  set_has_art();
  art_ = value;
}

// optional int32 community = 6;
inline bool CourseNode::has_community() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CourseNode::set_has_community() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CourseNode::clear_has_community() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CourseNode::clear_community() {
  community_ = 0;
  clear_has_community();
}
inline ::google::protobuf::int32 CourseNode::community() const {
  return community_;
}
inline void CourseNode::set_community(::google::protobuf::int32 value) {
  set_has_community();
  community_ = value;
}

// optional int32 health = 7;
inline bool CourseNode::has_health() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CourseNode::set_has_health() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CourseNode::clear_has_health() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CourseNode::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 CourseNode::health() const {
  return health_;
}
inline void CourseNode::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// optional int32 science = 8;
inline bool CourseNode::has_science() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CourseNode::set_has_science() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CourseNode::clear_has_science() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CourseNode::clear_science() {
  science_ = 0;
  clear_has_science();
}
inline ::google::protobuf::int32 CourseNode::science() const {
  return science_;
}
inline void CourseNode::set_science(::google::protobuf::int32 value) {
  set_has_science();
  science_ = value;
}

// required string res_path = 9;
inline bool CourseNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CourseNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CourseNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CourseNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& CourseNode::res_path() const {
  return *res_path_;
}
inline void CourseNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void CourseNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void CourseNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CourseNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* CourseNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CourseNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .CourseNode.CourseType course_type = 10 [default = CT_INVALID];
inline bool CourseNode::has_course_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CourseNode::set_has_course_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CourseNode::clear_has_course_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CourseNode::clear_course_type() {
  course_type_ = 1;
  clear_has_course_type();
}
inline ::CourseNode_CourseType CourseNode::course_type() const {
  return static_cast< ::CourseNode_CourseType >(course_type_);
}
inline void CourseNode::set_course_type(::CourseNode_CourseType value) {
  assert(::CourseNode_CourseType_IsValid(value));
  set_has_course_type();
  course_type_ = value;
}

// optional string xml_path = 11;
inline bool CourseNode::has_xml_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CourseNode::set_has_xml_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CourseNode::clear_has_xml_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CourseNode::clear_xml_path() {
  if (xml_path_ != &::google::protobuf::internal::kEmptyString) {
    xml_path_->clear();
  }
  clear_has_xml_path();
}
inline const ::std::string& CourseNode::xml_path() const {
  return *xml_path_;
}
inline void CourseNode::set_xml_path(const ::std::string& value) {
  set_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    xml_path_ = new ::std::string;
  }
  xml_path_->assign(value);
}
inline void CourseNode::set_xml_path(const char* value) {
  set_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    xml_path_ = new ::std::string;
  }
  xml_path_->assign(value);
}
inline void CourseNode::set_xml_path(const char* value, size_t size) {
  set_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    xml_path_ = new ::std::string;
  }
  xml_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CourseNode::mutable_xml_path() {
  set_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    xml_path_ = new ::std::string;
  }
  return xml_path_;
}
inline ::std::string* CourseNode::release_xml_path() {
  clear_has_xml_path();
  if (xml_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xml_path_;
    xml_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CourseNode::set_allocated_xml_path(::std::string* xml_path) {
  if (xml_path_ != &::google::protobuf::internal::kEmptyString) {
    delete xml_path_;
  }
  if (xml_path) {
    set_has_xml_path();
    xml_path_ = xml_path;
  } else {
    clear_has_xml_path();
    xml_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetCourseList

// repeated .CourseNode course_list = 1;
inline int sGetCourseList::course_list_size() const {
  return course_list_.size();
}
inline void sGetCourseList::clear_course_list() {
  course_list_.Clear();
}
inline const ::CourseNode& sGetCourseList::course_list(int index) const {
  return course_list_.Get(index);
}
inline ::CourseNode* sGetCourseList::mutable_course_list(int index) {
  return course_list_.Mutable(index);
}
inline ::CourseNode* sGetCourseList::add_course_list() {
  return course_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CourseNode >&
sGetCourseList::course_list() const {
  return course_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CourseNode >*
sGetCourseList::mutable_course_list() {
  return &course_list_;
}

// -------------------------------------------------------------------

// cGetContent

// -------------------------------------------------------------------

// sGetContent

// required int32 class_id = 1;
inline bool sGetContent::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetContent::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetContent::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetContent::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 sGetContent::class_id() const {
  return class_id_;
}
inline void sGetContent::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required int32 classroom_id = 2;
inline bool sGetContent::has_classroom_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetContent::set_has_classroom_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetContent::clear_has_classroom_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetContent::clear_classroom_id() {
  classroom_id_ = 0;
  clear_has_classroom_id();
}
inline ::google::protobuf::int32 sGetContent::classroom_id() const {
  return classroom_id_;
}
inline void sGetContent::set_classroom_id(::google::protobuf::int32 value) {
  set_has_classroom_id();
  classroom_id_ = value;
}

// repeated .ContentNode course_list = 3;
inline int sGetContent::course_list_size() const {
  return course_list_.size();
}
inline void sGetContent::clear_course_list() {
  course_list_.Clear();
}
inline const ::ContentNode& sGetContent::course_list(int index) const {
  return course_list_.Get(index);
}
inline ::ContentNode* sGetContent::mutable_course_list(int index) {
  return course_list_.Mutable(index);
}
inline ::ContentNode* sGetContent::add_course_list() {
  return course_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContentNode >&
sGetContent::course_list() const {
  return course_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContentNode >*
sGetContent::mutable_course_list() {
  return &course_list_;
}

// -------------------------------------------------------------------

// cGetClassList

// required int32 grade_id = 1;
inline bool cGetClassList::has_grade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetClassList::set_has_grade_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetClassList::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetClassList::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 cGetClassList::grade_id() const {
  return grade_id_;
}
inline void cGetClassList::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// -------------------------------------------------------------------

// ClassListNode

// required int32 id = 1;
inline bool ClassListNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassListNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassListNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassListNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClassListNode::id() const {
  return id_;
}
inline void ClassListNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool ClassListNode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassListNode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassListNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassListNode::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClassListNode::name() const {
  return *name_;
}
inline void ClassListNode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClassListNode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClassListNode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassListNode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ClassListNode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClassListNode::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string res_path = 3;
inline bool ClassListNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassListNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassListNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassListNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& ClassListNode::res_path() const {
  return *res_path_;
}
inline void ClassListNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void ClassListNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void ClassListNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassListNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* ClassListNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClassListNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetClassList

// repeated .ClassListNode class_list = 1;
inline int sGetClassList::class_list_size() const {
  return class_list_.size();
}
inline void sGetClassList::clear_class_list() {
  class_list_.Clear();
}
inline const ::ClassListNode& sGetClassList::class_list(int index) const {
  return class_list_.Get(index);
}
inline ::ClassListNode* sGetClassList::mutable_class_list(int index) {
  return class_list_.Mutable(index);
}
inline ::ClassListNode* sGetClassList::add_class_list() {
  return class_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
sGetClassList::class_list() const {
  return class_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
sGetClassList::mutable_class_list() {
  return &class_list_;
}

// -------------------------------------------------------------------

// cGetClassRoomList

// -------------------------------------------------------------------

// sGetClassRoomList

// repeated .ClassListNode classroom_list = 1;
inline int sGetClassRoomList::classroom_list_size() const {
  return classroom_list_.size();
}
inline void sGetClassRoomList::clear_classroom_list() {
  classroom_list_.Clear();
}
inline const ::ClassListNode& sGetClassRoomList::classroom_list(int index) const {
  return classroom_list_.Get(index);
}
inline ::ClassListNode* sGetClassRoomList::mutable_classroom_list(int index) {
  return classroom_list_.Mutable(index);
}
inline ::ClassListNode* sGetClassRoomList::add_classroom_list() {
  return classroom_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClassListNode >&
sGetClassRoomList::classroom_list() const {
  return classroom_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClassListNode >*
sGetClassRoomList::mutable_classroom_list() {
  return &classroom_list_;
}

// -------------------------------------------------------------------

// ContentNode

// required int32 course_id = 1;
inline bool ContentNode::has_course_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentNode::set_has_course_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentNode::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentNode::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 ContentNode::course_id() const {
  return course_id_;
}
inline void ContentNode::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// optional string course_xml = 2;
inline bool ContentNode::has_course_xml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentNode::set_has_course_xml() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentNode::clear_has_course_xml() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentNode::clear_course_xml() {
  if (course_xml_ != &::google::protobuf::internal::kEmptyString) {
    course_xml_->clear();
  }
  clear_has_course_xml();
}
inline const ::std::string& ContentNode::course_xml() const {
  return *course_xml_;
}
inline void ContentNode::set_course_xml(const ::std::string& value) {
  set_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    course_xml_ = new ::std::string;
  }
  course_xml_->assign(value);
}
inline void ContentNode::set_course_xml(const char* value) {
  set_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    course_xml_ = new ::std::string;
  }
  course_xml_->assign(value);
}
inline void ContentNode::set_course_xml(const char* value, size_t size) {
  set_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    course_xml_ = new ::std::string;
  }
  course_xml_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentNode::mutable_course_xml() {
  set_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    course_xml_ = new ::std::string;
  }
  return course_xml_;
}
inline ::std::string* ContentNode::release_course_xml() {
  clear_has_course_xml();
  if (course_xml_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_xml_;
    course_xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentNode::set_allocated_course_xml(::std::string* course_xml) {
  if (course_xml_ != &::google::protobuf::internal::kEmptyString) {
    delete course_xml_;
  }
  if (course_xml) {
    set_has_course_xml();
    course_xml_ = course_xml;
  } else {
    clear_has_course_xml();
    course_xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cSetContent

// required int32 class_id = 1;
inline bool cSetContent::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSetContent::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSetContent::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSetContent::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 cSetContent::class_id() const {
  return class_id_;
}
inline void cSetContent::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required int32 classroom_id = 2;
inline bool cSetContent::has_classroom_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cSetContent::set_has_classroom_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cSetContent::clear_has_classroom_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cSetContent::clear_classroom_id() {
  classroom_id_ = 0;
  clear_has_classroom_id();
}
inline ::google::protobuf::int32 cSetContent::classroom_id() const {
  return classroom_id_;
}
inline void cSetContent::set_classroom_id(::google::protobuf::int32 value) {
  set_has_classroom_id();
  classroom_id_ = value;
}

// repeated .ContentNode course_list = 3;
inline int cSetContent::course_list_size() const {
  return course_list_.size();
}
inline void cSetContent::clear_course_list() {
  course_list_.Clear();
}
inline const ::ContentNode& cSetContent::course_list(int index) const {
  return course_list_.Get(index);
}
inline ::ContentNode* cSetContent::mutable_course_list(int index) {
  return course_list_.Mutable(index);
}
inline ::ContentNode* cSetContent::add_course_list() {
  return course_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContentNode >&
cSetContent::course_list() const {
  return course_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContentNode >*
cSetContent::mutable_course_list() {
  return &course_list_;
}

// -------------------------------------------------------------------

// sSetContent

// optional bool result = 1;
inline bool sSetContent::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSetContent::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSetContent::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSetContent::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sSetContent::result() const {
  return result_;
}
inline void sSetContent::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// required string msg = 2;
inline bool sSetContent::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSetContent::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSetContent::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSetContent::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sSetContent::msg() const {
  return *msg_;
}
inline void sSetContent::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetContent::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetContent::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSetContent::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sSetContent::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSetContent::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sCourseware

// required int32 course_id = 1;
inline bool sCourseware::has_course_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sCourseware::set_has_course_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sCourseware::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sCourseware::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 sCourseware::course_id() const {
  return course_id_;
}
inline void sCourseware::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// -------------------------------------------------------------------

// cClassOver

// -------------------------------------------------------------------

// sClassOver

// -------------------------------------------------------------------

// cGetStudentList

// required int32 class_id = 1;
inline bool cGetStudentList::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetStudentList::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetStudentList::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetStudentList::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 cGetStudentList::class_id() const {
  return class_id_;
}
inline void cGetStudentList::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// -------------------------------------------------------------------

// StudentListNode

// required int32 id = 1;
inline bool StudentListNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StudentListNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StudentListNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StudentListNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StudentListNode::id() const {
  return id_;
}
inline void StudentListNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool StudentListNode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StudentListNode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StudentListNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StudentListNode::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StudentListNode::name() const {
  return *name_;
}
inline void StudentListNode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StudentListNode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StudentListNode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StudentListNode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StudentListNode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StudentListNode::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string res_path = 3;
inline bool StudentListNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StudentListNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StudentListNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StudentListNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& StudentListNode::res_path() const {
  return *res_path_;
}
inline void StudentListNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void StudentListNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void StudentListNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StudentListNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* StudentListNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StudentListNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetStudentList

// repeated .StudentListNode student_list = 1;
inline int sGetStudentList::student_list_size() const {
  return student_list_.size();
}
inline void sGetStudentList::clear_student_list() {
  student_list_.Clear();
}
inline const ::StudentListNode& sGetStudentList::student_list(int index) const {
  return student_list_.Get(index);
}
inline ::StudentListNode* sGetStudentList::mutable_student_list(int index) {
  return student_list_.Mutable(index);
}
inline ::StudentListNode* sGetStudentList::add_student_list() {
  return student_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StudentListNode >&
sGetStudentList::student_list() const {
  return student_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::StudentListNode >*
sGetStudentList::mutable_student_list() {
  return &student_list_;
}

// -------------------------------------------------------------------

// cGetActiveStudentList

// required int32 class_id = 1;
inline bool cGetActiveStudentList::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetActiveStudentList::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetActiveStudentList::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetActiveStudentList::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 cGetActiveStudentList::class_id() const {
  return class_id_;
}
inline void cGetActiveStudentList::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// -------------------------------------------------------------------

// sGetActiveStudentList

// repeated int32 student_list = 1;
inline int sGetActiveStudentList::student_list_size() const {
  return student_list_.size();
}
inline void sGetActiveStudentList::clear_student_list() {
  student_list_.Clear();
}
inline ::google::protobuf::int32 sGetActiveStudentList::student_list(int index) const {
  return student_list_.Get(index);
}
inline void sGetActiveStudentList::set_student_list(int index, ::google::protobuf::int32 value) {
  student_list_.Set(index, value);
}
inline void sGetActiveStudentList::add_student_list(::google::protobuf::int32 value) {
  student_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sGetActiveStudentList::student_list() const {
  return student_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sGetActiveStudentList::mutable_student_list() {
  return &student_list_;
}

// -------------------------------------------------------------------

// sUpdateStudentStatus

// required int32 student_id = 1;
inline bool sUpdateStudentStatus::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateStudentStatus::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateStudentStatus::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateStudentStatus::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sUpdateStudentStatus::student_id() const {
  return student_id_;
}
inline void sUpdateStudentStatus::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// cGetStudentInfo

// required int32 id = 1;
inline bool cGetStudentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetStudentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetStudentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetStudentInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cGetStudentInfo::id() const {
  return id_;
}
inline void cGetStudentInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// sGetStudentInfo

// required int32 id = 1;
inline bool sGetStudentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetStudentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetStudentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetStudentInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetStudentInfo::id() const {
  return id_;
}
inline void sGetStudentInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string number = 2;
inline bool sGetStudentInfo::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetStudentInfo::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetStudentInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetStudentInfo::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& sGetStudentInfo::number() const {
  return *number_;
}
inline void sGetStudentInfo::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetStudentInfo::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetStudentInfo::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* sGetStudentInfo::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool sGetStudentInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetStudentInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetStudentInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetStudentInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sGetStudentInfo::name() const {
  return *name_;
}
inline void sGetStudentInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetStudentInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetStudentInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sGetStudentInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sex = 4;
inline bool sGetStudentInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetStudentInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetStudentInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetStudentInfo::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& sGetStudentInfo::sex() const {
  return *sex_;
}
inline void sGetStudentInfo::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetStudentInfo::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetStudentInfo::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* sGetStudentInfo::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string race = 5;
inline bool sGetStudentInfo::has_race() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGetStudentInfo::set_has_race() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGetStudentInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGetStudentInfo::clear_race() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    race_->clear();
  }
  clear_has_race();
}
inline const ::std::string& sGetStudentInfo::race() const {
  return *race_;
}
inline void sGetStudentInfo::set_race(const ::std::string& value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetStudentInfo::set_race(const char* value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetStudentInfo::set_race(const char* value, size_t size) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_race() {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  return race_;
}
inline ::std::string* sGetStudentInfo::release_race() {
  clear_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = race_;
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_race(::std::string* race) {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (race) {
    set_has_race();
    race_ = race;
  } else {
    clear_has_race();
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string native = 6;
inline bool sGetStudentInfo::has_native() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGetStudentInfo::set_has_native() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGetStudentInfo::clear_has_native() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGetStudentInfo::clear_native() {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    native_->clear();
  }
  clear_has_native();
}
inline const ::std::string& sGetStudentInfo::native() const {
  return *native_;
}
inline void sGetStudentInfo::set_native(const ::std::string& value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetStudentInfo::set_native(const char* value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetStudentInfo::set_native(const char* value, size_t size) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_native() {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  return native_;
}
inline ::std::string* sGetStudentInfo::release_native() {
  clear_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = native_;
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_native(::std::string* native) {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    delete native_;
  }
  if (native) {
    set_has_native();
    native_ = native;
  } else {
    clear_has_native();
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 class_id = 7;
inline bool sGetStudentInfo::has_class_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGetStudentInfo::set_has_class_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGetStudentInfo::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGetStudentInfo::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 sGetStudentInfo::class_id() const {
  return class_id_;
}
inline void sGetStudentInfo::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required string class_name = 8;
inline bool sGetStudentInfo::has_class_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGetStudentInfo::set_has_class_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGetStudentInfo::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGetStudentInfo::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& sGetStudentInfo::class_name() const {
  return *class_name_;
}
inline void sGetStudentInfo::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void sGetStudentInfo::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void sGetStudentInfo::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* sGetStudentInfo::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetTeacherInfo

// required int32 id = 1;
inline bool cGetTeacherInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetTeacherInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetTeacherInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetTeacherInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cGetTeacherInfo::id() const {
  return id_;
}
inline void cGetTeacherInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// sGetTeacherInfo

// required int32 id = 1;
inline bool sGetTeacherInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetTeacherInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetTeacherInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetTeacherInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetTeacherInfo::id() const {
  return id_;
}
inline void sGetTeacherInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string number = 2;
inline bool sGetTeacherInfo::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetTeacherInfo::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetTeacherInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetTeacherInfo::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& sGetTeacherInfo::number() const {
  return *number_;
}
inline void sGetTeacherInfo::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetTeacherInfo::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetTeacherInfo::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* sGetTeacherInfo::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool sGetTeacherInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetTeacherInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetTeacherInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetTeacherInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sGetTeacherInfo::name() const {
  return *name_;
}
inline void sGetTeacherInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetTeacherInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetTeacherInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sGetTeacherInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sex = 4;
inline bool sGetTeacherInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetTeacherInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetTeacherInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetTeacherInfo::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& sGetTeacherInfo::sex() const {
  return *sex_;
}
inline void sGetTeacherInfo::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetTeacherInfo::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetTeacherInfo::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* sGetTeacherInfo::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string race = 5;
inline bool sGetTeacherInfo::has_race() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGetTeacherInfo::set_has_race() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGetTeacherInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGetTeacherInfo::clear_race() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    race_->clear();
  }
  clear_has_race();
}
inline const ::std::string& sGetTeacherInfo::race() const {
  return *race_;
}
inline void sGetTeacherInfo::set_race(const ::std::string& value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetTeacherInfo::set_race(const char* value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetTeacherInfo::set_race(const char* value, size_t size) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_race() {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  return race_;
}
inline ::std::string* sGetTeacherInfo::release_race() {
  clear_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = race_;
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_race(::std::string* race) {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (race) {
    set_has_race();
    race_ = race;
  } else {
    clear_has_race();
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string birthday = 6;
inline bool sGetTeacherInfo::has_birthday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGetTeacherInfo::set_has_birthday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGetTeacherInfo::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGetTeacherInfo::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& sGetTeacherInfo::birthday() const {
  return *birthday_;
}
inline void sGetTeacherInfo::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetTeacherInfo::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetTeacherInfo::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* sGetTeacherInfo::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string native = 7;
inline bool sGetTeacherInfo::has_native() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGetTeacherInfo::set_has_native() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGetTeacherInfo::clear_has_native() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGetTeacherInfo::clear_native() {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    native_->clear();
  }
  clear_has_native();
}
inline const ::std::string& sGetTeacherInfo::native() const {
  return *native_;
}
inline void sGetTeacherInfo::set_native(const ::std::string& value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetTeacherInfo::set_native(const char* value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetTeacherInfo::set_native(const char* value, size_t size) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_native() {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  return native_;
}
inline ::std::string* sGetTeacherInfo::release_native() {
  clear_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = native_;
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_native(::std::string* native) {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    delete native_;
  }
  if (native) {
    set_has_native();
    native_ = native;
  } else {
    clear_has_native();
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string school_name = 8;
inline bool sGetTeacherInfo::has_school_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGetTeacherInfo::set_has_school_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGetTeacherInfo::clear_has_school_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGetTeacherInfo::clear_school_name() {
  if (school_name_ != &::google::protobuf::internal::kEmptyString) {
    school_name_->clear();
  }
  clear_has_school_name();
}
inline const ::std::string& sGetTeacherInfo::school_name() const {
  return *school_name_;
}
inline void sGetTeacherInfo::set_school_name(const ::std::string& value) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(value);
}
inline void sGetTeacherInfo::set_school_name(const char* value) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(value);
}
inline void sGetTeacherInfo::set_school_name(const char* value, size_t size) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_school_name() {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  return school_name_;
}
inline ::std::string* sGetTeacherInfo::release_school_name() {
  clear_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = school_name_;
    school_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_school_name(::std::string* school_name) {
  if (school_name_ != &::google::protobuf::internal::kEmptyString) {
    delete school_name_;
  }
  if (school_name) {
    set_has_school_name();
    school_name_ = school_name;
  } else {
    clear_has_school_name();
    school_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PeerGroup

// required int32 student_id = 1;
inline bool PeerGroup::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerGroup::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerGroup::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerGroup::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 PeerGroup::student_id() const {
  return student_id_;
}
inline void PeerGroup::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// cSetGroup

// required int32 group_id = 1;
inline bool cSetGroup::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSetGroup::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSetGroup::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSetGroup::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 cSetGroup::group_id() const {
  return group_id_;
}
inline void cSetGroup::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required string group_name = 2;
inline bool cSetGroup::has_group_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cSetGroup::set_has_group_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cSetGroup::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cSetGroup::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& cSetGroup::group_name() const {
  return *group_name_;
}
inline void cSetGroup::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void cSetGroup::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void cSetGroup::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cSetGroup::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  return group_name_;
}
inline ::std::string* cSetGroup::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cSetGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PeerGroup student_list = 3;
inline int cSetGroup::student_list_size() const {
  return student_list_.size();
}
inline void cSetGroup::clear_student_list() {
  student_list_.Clear();
}
inline const ::PeerGroup& cSetGroup::student_list(int index) const {
  return student_list_.Get(index);
}
inline ::PeerGroup* cSetGroup::mutable_student_list(int index) {
  return student_list_.Mutable(index);
}
inline ::PeerGroup* cSetGroup::add_student_list() {
  return student_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PeerGroup >&
cSetGroup::student_list() const {
  return student_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PeerGroup >*
cSetGroup::mutable_student_list() {
  return &student_list_;
}

// -------------------------------------------------------------------

// sSetGroup

// required int32 result = 2;
inline bool sSetGroup::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSetGroup::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSetGroup::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSetGroup::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 sSetGroup::result() const {
  return result_;
}
inline void sSetGroup::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string msg = 1;
inline bool sSetGroup::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSetGroup::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSetGroup::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSetGroup::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sSetGroup::msg() const {
  return *msg_;
}
inline void sSetGroup::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetGroup::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetGroup::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSetGroup::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sSetGroup::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSetGroup::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cRelay

// -------------------------------------------------------------------

// sRelay

// required int32 student_id = 1;
inline bool sRelay::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sRelay::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sRelay::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sRelay::clear_student_id() {
  student_id_ = 0;
  clear_has_student_id();
}
inline ::google::protobuf::int32 sRelay::student_id() const {
  return student_id_;
}
inline void sRelay::set_student_id(::google::protobuf::int32 value) {
  set_has_student_id();
  student_id_ = value;
}

// -------------------------------------------------------------------

// bookNode

// required int32 book_id = 1;
inline bool bookNode::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bookNode::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bookNode::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bookNode::clear_book_id() {
  book_id_ = 0;
  clear_has_book_id();
}
inline ::google::protobuf::int32 bookNode::book_id() const {
  return book_id_;
}
inline void bookNode::set_book_id(::google::protobuf::int32 value) {
  set_has_book_id();
  book_id_ = value;
}

// required string book_name = 2;
inline bool bookNode::has_book_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bookNode::set_has_book_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bookNode::clear_has_book_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bookNode::clear_book_name() {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    book_name_->clear();
  }
  clear_has_book_name();
}
inline const ::std::string& bookNode::book_name() const {
  return *book_name_;
}
inline void bookNode::set_book_name(const ::std::string& value) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(value);
}
inline void bookNode::set_book_name(const char* value) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(value);
}
inline void bookNode::set_book_name(const char* value, size_t size) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bookNode::mutable_book_name() {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  return book_name_;
}
inline ::std::string* bookNode::release_book_name() {
  clear_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = book_name_;
    book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bookNode::set_allocated_book_name(::std::string* book_name) {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    delete book_name_;
  }
  if (book_name) {
    set_has_book_name();
    book_name_ = book_name;
  } else {
    clear_has_book_name();
    book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 book_type = 4;
inline bool bookNode::has_book_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bookNode::set_has_book_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bookNode::clear_has_book_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bookNode::clear_book_type() {
  book_type_ = 0;
  clear_has_book_type();
}
inline ::google::protobuf::int32 bookNode::book_type() const {
  return book_type_;
}
inline void bookNode::set_book_type(::google::protobuf::int32 value) {
  set_has_book_type();
  book_type_ = value;
}

// required string res_path = 3;
inline bool bookNode::has_res_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bookNode::set_has_res_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bookNode::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bookNode::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& bookNode::res_path() const {
  return *res_path_;
}
inline void bookNode::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void bookNode::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void bookNode::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bookNode::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* bookNode::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bookNode::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetPersonalBooksList

// -------------------------------------------------------------------

// sGetPersonalBooksList

// repeated .bookNode book_list = 1;
inline int sGetPersonalBooksList::book_list_size() const {
  return book_list_.size();
}
inline void sGetPersonalBooksList::clear_book_list() {
  book_list_.Clear();
}
inline const ::bookNode& sGetPersonalBooksList::book_list(int index) const {
  return book_list_.Get(index);
}
inline ::bookNode* sGetPersonalBooksList::mutable_book_list(int index) {
  return book_list_.Mutable(index);
}
inline ::bookNode* sGetPersonalBooksList::add_book_list() {
  return book_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bookNode >&
sGetPersonalBooksList::book_list() const {
  return book_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::bookNode >*
sGetPersonalBooksList::mutable_book_list() {
  return &book_list_;
}

// -------------------------------------------------------------------

// cGetServerAddr

// -------------------------------------------------------------------

// sGetServerAddr

// required string serv_addr = 1;
inline bool sGetServerAddr::has_serv_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetServerAddr::set_has_serv_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetServerAddr::clear_has_serv_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetServerAddr::clear_serv_addr() {
  if (serv_addr_ != &::google::protobuf::internal::kEmptyString) {
    serv_addr_->clear();
  }
  clear_has_serv_addr();
}
inline const ::std::string& sGetServerAddr::serv_addr() const {
  return *serv_addr_;
}
inline void sGetServerAddr::set_serv_addr(const ::std::string& value) {
  set_has_serv_addr();
  if (serv_addr_ == &::google::protobuf::internal::kEmptyString) {
    serv_addr_ = new ::std::string;
  }
  serv_addr_->assign(value);
}
inline void sGetServerAddr::set_serv_addr(const char* value) {
  set_has_serv_addr();
  if (serv_addr_ == &::google::protobuf::internal::kEmptyString) {
    serv_addr_ = new ::std::string;
  }
  serv_addr_->assign(value);
}
inline void sGetServerAddr::set_serv_addr(const char* value, size_t size) {
  set_has_serv_addr();
  if (serv_addr_ == &::google::protobuf::internal::kEmptyString) {
    serv_addr_ = new ::std::string;
  }
  serv_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetServerAddr::mutable_serv_addr() {
  set_has_serv_addr();
  if (serv_addr_ == &::google::protobuf::internal::kEmptyString) {
    serv_addr_ = new ::std::string;
  }
  return serv_addr_;
}
inline ::std::string* sGetServerAddr::release_serv_addr() {
  clear_has_serv_addr();
  if (serv_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serv_addr_;
    serv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetServerAddr::set_allocated_serv_addr(::std::string* serv_addr) {
  if (serv_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete serv_addr_;
  }
  if (serv_addr) {
    set_has_serv_addr();
    serv_addr_ = serv_addr;
  } else {
    clear_has_serv_addr();
    serv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetPublicBooksList

// -------------------------------------------------------------------

// sGetPublicBooksList

// repeated .bookNode book_list = 1;
inline int sGetPublicBooksList::book_list_size() const {
  return book_list_.size();
}
inline void sGetPublicBooksList::clear_book_list() {
  book_list_.Clear();
}
inline const ::bookNode& sGetPublicBooksList::book_list(int index) const {
  return book_list_.Get(index);
}
inline ::bookNode* sGetPublicBooksList::mutable_book_list(int index) {
  return book_list_.Mutable(index);
}
inline ::bookNode* sGetPublicBooksList::add_book_list() {
  return book_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bookNode >&
sGetPublicBooksList::book_list() const {
  return book_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::bookNode >*
sGetPublicBooksList::mutable_book_list() {
  return &book_list_;
}

// -------------------------------------------------------------------

// cUploadBook

// required string book_name = 1;
inline bool cUploadBook::has_book_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUploadBook::set_has_book_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUploadBook::clear_has_book_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUploadBook::clear_book_name() {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    book_name_->clear();
  }
  clear_has_book_name();
}
inline const ::std::string& cUploadBook::book_name() const {
  return *book_name_;
}
inline void cUploadBook::set_book_name(const ::std::string& value) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(value);
}
inline void cUploadBook::set_book_name(const char* value) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(value);
}
inline void cUploadBook::set_book_name(const char* value, size_t size) {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  book_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUploadBook::mutable_book_name() {
  set_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    book_name_ = new ::std::string;
  }
  return book_name_;
}
inline ::std::string* cUploadBook::release_book_name() {
  clear_has_book_name();
  if (book_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = book_name_;
    book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUploadBook::set_allocated_book_name(::std::string* book_name) {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    delete book_name_;
  }
  if (book_name) {
    set_has_book_name();
    book_name_ = book_name;
  } else {
    clear_has_book_name();
    book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 book_type = 2;
inline bool cUploadBook::has_book_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUploadBook::set_has_book_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUploadBook::clear_has_book_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUploadBook::clear_book_type() {
  book_type_ = 0;
  clear_has_book_type();
}
inline ::google::protobuf::int32 cUploadBook::book_type() const {
  return book_type_;
}
inline void cUploadBook::set_book_type(::google::protobuf::int32 value) {
  set_has_book_type();
  book_type_ = value;
}

// required string time = 3;
inline bool cUploadBook::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUploadBook::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUploadBook::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUploadBook::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& cUploadBook::time() const {
  return *time_;
}
inline void cUploadBook::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void cUploadBook::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void cUploadBook::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUploadBook::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* cUploadBook::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUploadBook::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 belongs = 4;
inline bool cUploadBook::has_belongs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUploadBook::set_has_belongs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUploadBook::clear_has_belongs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUploadBook::clear_belongs() {
  belongs_ = 0;
  clear_has_belongs();
}
inline ::google::protobuf::int32 cUploadBook::belongs() const {
  return belongs_;
}
inline void cUploadBook::set_belongs(::google::protobuf::int32 value) {
  set_has_belongs();
  belongs_ = value;
}

// required int32 art = 5;
inline bool cUploadBook::has_art() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUploadBook::set_has_art() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUploadBook::clear_has_art() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUploadBook::clear_art() {
  art_ = 0;
  clear_has_art();
}
inline ::google::protobuf::int32 cUploadBook::art() const {
  return art_;
}
inline void cUploadBook::set_art(::google::protobuf::int32 value) {
  set_has_art();
  art_ = value;
}

// required int32 language = 6;
inline bool cUploadBook::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cUploadBook::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cUploadBook::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cUploadBook::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 cUploadBook::language() const {
  return language_;
}
inline void cUploadBook::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// required int32 community = 7;
inline bool cUploadBook::has_community() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cUploadBook::set_has_community() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cUploadBook::clear_has_community() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cUploadBook::clear_community() {
  community_ = 0;
  clear_has_community();
}
inline ::google::protobuf::int32 cUploadBook::community() const {
  return community_;
}
inline void cUploadBook::set_community(::google::protobuf::int32 value) {
  set_has_community();
  community_ = value;
}

// required int32 health = 8;
inline bool cUploadBook::has_health() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cUploadBook::set_has_health() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cUploadBook::clear_has_health() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cUploadBook::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 cUploadBook::health() const {
  return health_;
}
inline void cUploadBook::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required int32 science = 9;
inline bool cUploadBook::has_science() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cUploadBook::set_has_science() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cUploadBook::clear_has_science() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cUploadBook::clear_science() {
  science_ = 0;
  clear_has_science();
}
inline ::google::protobuf::int32 cUploadBook::science() const {
  return science_;
}
inline void cUploadBook::set_science(::google::protobuf::int32 value) {
  set_has_science();
  science_ = value;
}

// required string res_path = 10;
inline bool cUploadBook::has_res_path() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void cUploadBook::set_has_res_path() {
  _has_bits_[0] |= 0x00000200u;
}
inline void cUploadBook::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void cUploadBook::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& cUploadBook::res_path() const {
  return *res_path_;
}
inline void cUploadBook::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void cUploadBook::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void cUploadBook::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUploadBook::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* cUploadBook::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUploadBook::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sUploadBook

// required int32 result = 2;
inline bool sUploadBook::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUploadBook::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUploadBook::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUploadBook::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 sUploadBook::result() const {
  return result_;
}
inline void sUploadBook::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string msg = 1;
inline bool sUploadBook::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUploadBook::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUploadBook::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUploadBook::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sUploadBook::msg() const {
  return *msg_;
}
inline void sUploadBook::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sUploadBook::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sUploadBook::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUploadBook::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sUploadBook::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUploadBook::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cDownloadFromPersonal

// required int32 book_id = 1;
inline bool cDownloadFromPersonal::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cDownloadFromPersonal::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cDownloadFromPersonal::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cDownloadFromPersonal::clear_book_id() {
  book_id_ = 0;
  clear_has_book_id();
}
inline ::google::protobuf::int32 cDownloadFromPersonal::book_id() const {
  return book_id_;
}
inline void cDownloadFromPersonal::set_book_id(::google::protobuf::int32 value) {
  set_has_book_id();
  book_id_ = value;
}

// -------------------------------------------------------------------

// sDownloadFromPersonal

// optional bool result = 1;
inline bool sDownloadFromPersonal::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sDownloadFromPersonal::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sDownloadFromPersonal::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sDownloadFromPersonal::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sDownloadFromPersonal::result() const {
  return result_;
}
inline void sDownloadFromPersonal::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// required string down_addr = 2;
inline bool sDownloadFromPersonal::has_down_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sDownloadFromPersonal::set_has_down_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sDownloadFromPersonal::clear_has_down_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sDownloadFromPersonal::clear_down_addr() {
  if (down_addr_ != &::google::protobuf::internal::kEmptyString) {
    down_addr_->clear();
  }
  clear_has_down_addr();
}
inline const ::std::string& sDownloadFromPersonal::down_addr() const {
  return *down_addr_;
}
inline void sDownloadFromPersonal::set_down_addr(const ::std::string& value) {
  set_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    down_addr_ = new ::std::string;
  }
  down_addr_->assign(value);
}
inline void sDownloadFromPersonal::set_down_addr(const char* value) {
  set_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    down_addr_ = new ::std::string;
  }
  down_addr_->assign(value);
}
inline void sDownloadFromPersonal::set_down_addr(const char* value, size_t size) {
  set_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    down_addr_ = new ::std::string;
  }
  down_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sDownloadFromPersonal::mutable_down_addr() {
  set_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    down_addr_ = new ::std::string;
  }
  return down_addr_;
}
inline ::std::string* sDownloadFromPersonal::release_down_addr() {
  clear_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = down_addr_;
    down_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sDownloadFromPersonal::set_allocated_down_addr(::std::string* down_addr) {
  if (down_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete down_addr_;
  }
  if (down_addr) {
    set_has_down_addr();
    down_addr_ = down_addr;
  } else {
    clear_has_down_addr();
    down_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cDownloadFromPublic

// required int32 book_id = 1;
inline bool cDownloadFromPublic::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cDownloadFromPublic::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cDownloadFromPublic::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cDownloadFromPublic::clear_book_id() {
  book_id_ = 0;
  clear_has_book_id();
}
inline ::google::protobuf::int32 cDownloadFromPublic::book_id() const {
  return book_id_;
}
inline void cDownloadFromPublic::set_book_id(::google::protobuf::int32 value) {
  set_has_book_id();
  book_id_ = value;
}

// -------------------------------------------------------------------

// sDownloadFromPublic

// optional bool result = 2;
inline bool sDownloadFromPublic::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sDownloadFromPublic::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sDownloadFromPublic::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sDownloadFromPublic::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sDownloadFromPublic::result() const {
  return result_;
}
inline void sDownloadFromPublic::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// required string down_addr = 1;
inline bool sDownloadFromPublic::has_down_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sDownloadFromPublic::set_has_down_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sDownloadFromPublic::clear_has_down_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sDownloadFromPublic::clear_down_addr() {
  if (down_addr_ != &::google::protobuf::internal::kEmptyString) {
    down_addr_->clear();
  }
  clear_has_down_addr();
}
inline const ::std::string& sDownloadFromPublic::down_addr() const {
  return *down_addr_;
}
inline void sDownloadFromPublic::set_down_addr(const ::std::string& value) {
  set_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    down_addr_ = new ::std::string;
  }
  down_addr_->assign(value);
}
inline void sDownloadFromPublic::set_down_addr(const char* value) {
  set_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    down_addr_ = new ::std::string;
  }
  down_addr_->assign(value);
}
inline void sDownloadFromPublic::set_down_addr(const char* value, size_t size) {
  set_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    down_addr_ = new ::std::string;
  }
  down_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sDownloadFromPublic::mutable_down_addr() {
  set_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    down_addr_ = new ::std::string;
  }
  return down_addr_;
}
inline ::std::string* sDownloadFromPublic::release_down_addr() {
  clear_has_down_addr();
  if (down_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = down_addr_;
    down_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sDownloadFromPublic::set_allocated_down_addr(::std::string* down_addr) {
  if (down_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete down_addr_;
  }
  if (down_addr) {
    set_has_down_addr();
    down_addr_ = down_addr;
  } else {
    clear_has_down_addr();
    down_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cTransferBook

// required int32 book_id = 1;
inline bool cTransferBook::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cTransferBook::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cTransferBook::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cTransferBook::clear_book_id() {
  book_id_ = 0;
  clear_has_book_id();
}
inline ::google::protobuf::int32 cTransferBook::book_id() const {
  return book_id_;
}
inline void cTransferBook::set_book_id(::google::protobuf::int32 value) {
  set_has_book_id();
  book_id_ = value;
}

// required string account = 2;
inline bool cTransferBook::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cTransferBook::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cTransferBook::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cTransferBook::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& cTransferBook::account() const {
  return *account_;
}
inline void cTransferBook::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void cTransferBook::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void cTransferBook::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cTransferBook::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* cTransferBook::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cTransferBook::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sTransferBook

// required int32 result = 2;
inline bool sTransferBook::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sTransferBook::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sTransferBook::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sTransferBook::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 sTransferBook::result() const {
  return result_;
}
inline void sTransferBook::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string msg = 1;
inline bool sTransferBook::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sTransferBook::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sTransferBook::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sTransferBook::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sTransferBook::msg() const {
  return *msg_;
}
inline void sTransferBook::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sTransferBook::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sTransferBook::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sTransferBook::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sTransferBook::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sTransferBook::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cPublish

// required int32 book_id = 1;
inline bool cPublish::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cPublish::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cPublish::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cPublish::clear_book_id() {
  book_id_ = 0;
  clear_has_book_id();
}
inline ::google::protobuf::int32 cPublish::book_id() const {
  return book_id_;
}
inline void cPublish::set_book_id(::google::protobuf::int32 value) {
  set_has_book_id();
  book_id_ = value;
}

// -------------------------------------------------------------------

// sPublish

// required int32 result = 2;
inline bool sPublish::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sPublish::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sPublish::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sPublish::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 sPublish::result() const {
  return result_;
}
inline void sPublish::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string msg = 1;
inline bool sPublish::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sPublish::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sPublish::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sPublish::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sPublish::msg() const {
  return *msg_;
}
inline void sPublish::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sPublish::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sPublish::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sPublish::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sPublish::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sPublish::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cUpdateDrawSet

// optional bool facsimile = 1;
inline bool cUpdateDrawSet::has_facsimile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateDrawSet::set_has_facsimile() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateDrawSet::clear_has_facsimile() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateDrawSet::clear_facsimile() {
  facsimile_ = false;
  clear_has_facsimile();
}
inline bool cUpdateDrawSet::facsimile() const {
  return facsimile_;
}
inline void cUpdateDrawSet::set_facsimile(bool value) {
  set_has_facsimile();
  facsimile_ = value;
}

// optional bool puzzle = 2;
inline bool cUpdateDrawSet::has_puzzle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateDrawSet::set_has_puzzle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateDrawSet::clear_has_puzzle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateDrawSet::clear_puzzle() {
  puzzle_ = false;
  clear_has_puzzle();
}
inline bool cUpdateDrawSet::puzzle() const {
  return puzzle_;
}
inline void cUpdateDrawSet::set_puzzle(bool value) {
  set_has_puzzle();
  puzzle_ = value;
}

// optional bool frame = 3;
inline bool cUpdateDrawSet::has_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateDrawSet::set_has_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateDrawSet::clear_has_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateDrawSet::clear_frame() {
  frame_ = false;
  clear_has_frame();
}
inline bool cUpdateDrawSet::frame() const {
  return frame_;
}
inline void cUpdateDrawSet::set_frame(bool value) {
  set_has_frame();
  frame_ = value;
}

// optional bool record = 4;
inline bool cUpdateDrawSet::has_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateDrawSet::set_has_record() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateDrawSet::clear_has_record() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateDrawSet::clear_record() {
  record_ = false;
  clear_has_record();
}
inline bool cUpdateDrawSet::record() const {
  return record_;
}
inline void cUpdateDrawSet::set_record(bool value) {
  set_has_record();
  record_ = value;
}

// optional bool world = 5;
inline bool cUpdateDrawSet::has_world() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdateDrawSet::set_has_world() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdateDrawSet::clear_has_world() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdateDrawSet::clear_world() {
  world_ = false;
  clear_has_world();
}
inline bool cUpdateDrawSet::world() const {
  return world_;
}
inline void cUpdateDrawSet::set_world(bool value) {
  set_has_world();
  world_ = value;
}

// repeated string paper_name = 6;
inline int cUpdateDrawSet::paper_name_size() const {
  return paper_name_.size();
}
inline void cUpdateDrawSet::clear_paper_name() {
  paper_name_.Clear();
}
inline const ::std::string& cUpdateDrawSet::paper_name(int index) const {
  return paper_name_.Get(index);
}
inline ::std::string* cUpdateDrawSet::mutable_paper_name(int index) {
  return paper_name_.Mutable(index);
}
inline void cUpdateDrawSet::set_paper_name(int index, const ::std::string& value) {
  paper_name_.Mutable(index)->assign(value);
}
inline void cUpdateDrawSet::set_paper_name(int index, const char* value) {
  paper_name_.Mutable(index)->assign(value);
}
inline void cUpdateDrawSet::set_paper_name(int index, const char* value, size_t size) {
  paper_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateDrawSet::add_paper_name() {
  return paper_name_.Add();
}
inline void cUpdateDrawSet::add_paper_name(const ::std::string& value) {
  paper_name_.Add()->assign(value);
}
inline void cUpdateDrawSet::add_paper_name(const char* value) {
  paper_name_.Add()->assign(value);
}
inline void cUpdateDrawSet::add_paper_name(const char* value, size_t size) {
  paper_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
cUpdateDrawSet::paper_name() const {
  return paper_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
cUpdateDrawSet::mutable_paper_name() {
  return &paper_name_;
}

// repeated int32 pen_id = 7;
inline int cUpdateDrawSet::pen_id_size() const {
  return pen_id_.size();
}
inline void cUpdateDrawSet::clear_pen_id() {
  pen_id_.Clear();
}
inline ::google::protobuf::int32 cUpdateDrawSet::pen_id(int index) const {
  return pen_id_.Get(index);
}
inline void cUpdateDrawSet::set_pen_id(int index, ::google::protobuf::int32 value) {
  pen_id_.Set(index, value);
}
inline void cUpdateDrawSet::add_pen_id(::google::protobuf::int32 value) {
  pen_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cUpdateDrawSet::pen_id() const {
  return pen_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cUpdateDrawSet::mutable_pen_id() {
  return &pen_id_;
}

// -------------------------------------------------------------------

// cUpdateDrawInfo

// -------------------------------------------------------------------

// sUpdateDrawInfo

// -------------------------------------------------------------------

// cUpdateBackground

// required int32 paper_id = 1;
inline bool cUpdateBackground::has_paper_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateBackground::set_has_paper_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateBackground::clear_has_paper_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateBackground::clear_paper_id() {
  paper_id_ = 0;
  clear_has_paper_id();
}
inline ::google::protobuf::int32 cUpdateBackground::paper_id() const {
  return paper_id_;
}
inline void cUpdateBackground::set_paper_id(::google::protobuf::int32 value) {
  set_has_paper_id();
  paper_id_ = value;
}

// -------------------------------------------------------------------

// sUpdateBackground

// required int32 paper_id = 1;
inline bool sUpdateBackground::has_paper_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateBackground::set_has_paper_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateBackground::clear_has_paper_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateBackground::clear_paper_id() {
  paper_id_ = 0;
  clear_has_paper_id();
}
inline ::google::protobuf::int32 sUpdateBackground::paper_id() const {
  return paper_id_;
}
inline void sUpdateBackground::set_paper_id(::google::protobuf::int32 value) {
  set_has_paper_id();
  paper_id_ = value;
}

// -------------------------------------------------------------------

// cUpdateCopyIntoPaint

// required int32 pic_id = 1;
inline bool cUpdateCopyIntoPaint::has_pic_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pic_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateCopyIntoPaint::clear_has_pic_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateCopyIntoPaint::clear_pic_id() {
  pic_id_ = 0;
  clear_has_pic_id();
}
inline ::google::protobuf::int32 cUpdateCopyIntoPaint::pic_id() const {
  return pic_id_;
}
inline void cUpdateCopyIntoPaint::set_pic_id(::google::protobuf::int32 value) {
  set_has_pic_id();
  pic_id_ = value;
}

// required string pic_res = 2;
inline bool cUpdateCopyIntoPaint::has_pic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateCopyIntoPaint::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateCopyIntoPaint::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& cUpdateCopyIntoPaint::pic_res() const {
  return *pic_res_;
}
inline void cUpdateCopyIntoPaint::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_scale = 3;
inline bool cUpdateCopyIntoPaint::has_pic_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pic_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateCopyIntoPaint::clear_has_pic_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateCopyIntoPaint::clear_pic_scale() {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    pic_scale_->clear();
  }
  clear_has_pic_scale();
}
inline const ::std::string& cUpdateCopyIntoPaint::pic_scale() const {
  return *pic_scale_;
}
inline void cUpdateCopyIntoPaint::set_pic_scale(const ::std::string& value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_scale(const char* value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_scale(const char* value, size_t size) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pic_scale() {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  return pic_scale_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pic_scale() {
  clear_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_scale_;
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pic_scale(::std::string* pic_scale) {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_scale_;
  }
  if (pic_scale) {
    set_has_pic_scale();
    pic_scale_ = pic_scale;
  } else {
    clear_has_pic_scale();
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_rotation = 4;
inline bool cUpdateCopyIntoPaint::has_pic_rotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pic_rotation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateCopyIntoPaint::clear_has_pic_rotation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateCopyIntoPaint::clear_pic_rotation() {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    pic_rotation_->clear();
  }
  clear_has_pic_rotation();
}
inline const ::std::string& cUpdateCopyIntoPaint::pic_rotation() const {
  return *pic_rotation_;
}
inline void cUpdateCopyIntoPaint::set_pic_rotation(const ::std::string& value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_rotation(const char* value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pic_rotation(const char* value, size_t size) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pic_rotation() {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  return pic_rotation_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pic_rotation() {
  clear_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_rotation_;
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pic_rotation(::std::string* pic_rotation) {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_rotation_;
  }
  if (pic_rotation) {
    set_has_pic_rotation();
    pic_rotation_ = pic_rotation;
  } else {
    clear_has_pic_rotation();
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 5;
inline bool cUpdateCopyIntoPaint::has_pt_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pt_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdateCopyIntoPaint::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdateCopyIntoPaint::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdateCopyIntoPaint::pt_x() const {
  return *pt_x_;
}
inline void cUpdateCopyIntoPaint::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 6;
inline bool cUpdateCopyIntoPaint::has_pt_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_pt_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cUpdateCopyIntoPaint::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cUpdateCopyIntoPaint::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdateCopyIntoPaint::pt_y() const {
  return *pt_y_;
}
inline void cUpdateCopyIntoPaint::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateCopyIntoPaint::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCopyIntoPaint::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdateCopyIntoPaint::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCopyIntoPaint::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 op_type = 7;
inline bool cUpdateCopyIntoPaint::has_op_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cUpdateCopyIntoPaint::set_has_op_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cUpdateCopyIntoPaint::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cUpdateCopyIntoPaint::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 cUpdateCopyIntoPaint::op_type() const {
  return op_type_;
}
inline void cUpdateCopyIntoPaint::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// -------------------------------------------------------------------

// sUpdateCopyIntoPaint

// required int32 pic_id = 1;
inline bool sUpdateCopyIntoPaint::has_pic_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pic_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateCopyIntoPaint::clear_has_pic_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateCopyIntoPaint::clear_pic_id() {
  pic_id_ = 0;
  clear_has_pic_id();
}
inline ::google::protobuf::int32 sUpdateCopyIntoPaint::pic_id() const {
  return pic_id_;
}
inline void sUpdateCopyIntoPaint::set_pic_id(::google::protobuf::int32 value) {
  set_has_pic_id();
  pic_id_ = value;
}

// required string pic_res = 2;
inline bool sUpdateCopyIntoPaint::has_pic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateCopyIntoPaint::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateCopyIntoPaint::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& sUpdateCopyIntoPaint::pic_res() const {
  return *pic_res_;
}
inline void sUpdateCopyIntoPaint::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_scale = 3;
inline bool sUpdateCopyIntoPaint::has_pic_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pic_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateCopyIntoPaint::clear_has_pic_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateCopyIntoPaint::clear_pic_scale() {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    pic_scale_->clear();
  }
  clear_has_pic_scale();
}
inline const ::std::string& sUpdateCopyIntoPaint::pic_scale() const {
  return *pic_scale_;
}
inline void sUpdateCopyIntoPaint::set_pic_scale(const ::std::string& value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_scale(const char* value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_scale(const char* value, size_t size) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pic_scale() {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  return pic_scale_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pic_scale() {
  clear_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_scale_;
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pic_scale(::std::string* pic_scale) {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_scale_;
  }
  if (pic_scale) {
    set_has_pic_scale();
    pic_scale_ = pic_scale;
  } else {
    clear_has_pic_scale();
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_rotation = 4;
inline bool sUpdateCopyIntoPaint::has_pic_rotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pic_rotation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdateCopyIntoPaint::clear_has_pic_rotation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdateCopyIntoPaint::clear_pic_rotation() {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    pic_rotation_->clear();
  }
  clear_has_pic_rotation();
}
inline const ::std::string& sUpdateCopyIntoPaint::pic_rotation() const {
  return *pic_rotation_;
}
inline void sUpdateCopyIntoPaint::set_pic_rotation(const ::std::string& value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_rotation(const char* value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pic_rotation(const char* value, size_t size) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pic_rotation() {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  return pic_rotation_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pic_rotation() {
  clear_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_rotation_;
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pic_rotation(::std::string* pic_rotation) {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_rotation_;
  }
  if (pic_rotation) {
    set_has_pic_rotation();
    pic_rotation_ = pic_rotation;
  } else {
    clear_has_pic_rotation();
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 5;
inline bool sUpdateCopyIntoPaint::has_pt_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pt_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sUpdateCopyIntoPaint::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sUpdateCopyIntoPaint::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdateCopyIntoPaint::pt_x() const {
  return *pt_x_;
}
inline void sUpdateCopyIntoPaint::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 6;
inline bool sUpdateCopyIntoPaint::has_pt_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_pt_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sUpdateCopyIntoPaint::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sUpdateCopyIntoPaint::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdateCopyIntoPaint::pt_y() const {
  return *pt_y_;
}
inline void sUpdateCopyIntoPaint::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateCopyIntoPaint::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCopyIntoPaint::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdateCopyIntoPaint::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCopyIntoPaint::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 op_type = 7;
inline bool sUpdateCopyIntoPaint::has_op_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sUpdateCopyIntoPaint::set_has_op_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sUpdateCopyIntoPaint::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sUpdateCopyIntoPaint::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 sUpdateCopyIntoPaint::op_type() const {
  return op_type_;
}
inline void sUpdateCopyIntoPaint::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// -------------------------------------------------------------------

// cUpdatePenAnderaser

// required int32 pen_type = 1;
inline bool cUpdatePenAnderaser::has_pen_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdatePenAnderaser::set_has_pen_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdatePenAnderaser::clear_has_pen_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdatePenAnderaser::clear_pen_type() {
  pen_type_ = 0;
  clear_has_pen_type();
}
inline ::google::protobuf::int32 cUpdatePenAnderaser::pen_type() const {
  return pen_type_;
}
inline void cUpdatePenAnderaser::set_pen_type(::google::protobuf::int32 value) {
  set_has_pen_type();
  pen_type_ = value;
}

// required int32 pen_color = 2;
inline bool cUpdatePenAnderaser::has_pen_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdatePenAnderaser::set_has_pen_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdatePenAnderaser::clear_has_pen_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdatePenAnderaser::clear_pen_color() {
  pen_color_ = 0;
  clear_has_pen_color();
}
inline ::google::protobuf::int32 cUpdatePenAnderaser::pen_color() const {
  return pen_color_;
}
inline void cUpdatePenAnderaser::set_pen_color(::google::protobuf::int32 value) {
  set_has_pen_color();
  pen_color_ = value;
}

// required string pen_size = 3;
inline bool cUpdatePenAnderaser::has_pen_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdatePenAnderaser::set_has_pen_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdatePenAnderaser::clear_has_pen_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdatePenAnderaser::clear_pen_size() {
  if (pen_size_ != &::google::protobuf::internal::kEmptyString) {
    pen_size_->clear();
  }
  clear_has_pen_size();
}
inline const ::std::string& cUpdatePenAnderaser::pen_size() const {
  return *pen_size_;
}
inline void cUpdatePenAnderaser::set_pen_size(const ::std::string& value) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(value);
}
inline void cUpdatePenAnderaser::set_pen_size(const char* value) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(value);
}
inline void cUpdatePenAnderaser::set_pen_size(const char* value, size_t size) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdatePenAnderaser::mutable_pen_size() {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  return pen_size_;
}
inline ::std::string* cUpdatePenAnderaser::release_pen_size() {
  clear_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pen_size_;
    pen_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdatePenAnderaser::set_allocated_pen_size(::std::string* pen_size) {
  if (pen_size_ != &::google::protobuf::internal::kEmptyString) {
    delete pen_size_;
  }
  if (pen_size) {
    set_has_pen_size();
    pen_size_ = pen_size;
  } else {
    clear_has_pen_size();
    pen_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pen_trans = 4;
inline bool cUpdatePenAnderaser::has_pen_trans() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdatePenAnderaser::set_has_pen_trans() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdatePenAnderaser::clear_has_pen_trans() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdatePenAnderaser::clear_pen_trans() {
  pen_trans_ = 0;
  clear_has_pen_trans();
}
inline ::google::protobuf::int32 cUpdatePenAnderaser::pen_trans() const {
  return pen_trans_;
}
inline void cUpdatePenAnderaser::set_pen_trans(::google::protobuf::int32 value) {
  set_has_pen_trans();
  pen_trans_ = value;
}

// required int32 paint_type = 5;
inline bool cUpdatePenAnderaser::has_paint_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdatePenAnderaser::set_has_paint_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdatePenAnderaser::clear_has_paint_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdatePenAnderaser::clear_paint_type() {
  paint_type_ = 0;
  clear_has_paint_type();
}
inline ::google::protobuf::int32 cUpdatePenAnderaser::paint_type() const {
  return paint_type_;
}
inline void cUpdatePenAnderaser::set_paint_type(::google::protobuf::int32 value) {
  set_has_paint_type();
  paint_type_ = value;
}

// required string pt_x = 6;
inline bool cUpdatePenAnderaser::has_pt_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cUpdatePenAnderaser::set_has_pt_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cUpdatePenAnderaser::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cUpdatePenAnderaser::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdatePenAnderaser::pt_x() const {
  return *pt_x_;
}
inline void cUpdatePenAnderaser::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdatePenAnderaser::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdatePenAnderaser::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdatePenAnderaser::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdatePenAnderaser::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdatePenAnderaser::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 7;
inline bool cUpdatePenAnderaser::has_pt_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cUpdatePenAnderaser::set_has_pt_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cUpdatePenAnderaser::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cUpdatePenAnderaser::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdatePenAnderaser::pt_y() const {
  return *pt_y_;
}
inline void cUpdatePenAnderaser::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdatePenAnderaser::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdatePenAnderaser::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdatePenAnderaser::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdatePenAnderaser::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdatePenAnderaser::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prept_x = 8;
inline bool cUpdatePenAnderaser::has_prept_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cUpdatePenAnderaser::set_has_prept_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cUpdatePenAnderaser::clear_has_prept_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cUpdatePenAnderaser::clear_prept_x() {
  if (prept_x_ != &::google::protobuf::internal::kEmptyString) {
    prept_x_->clear();
  }
  clear_has_prept_x();
}
inline const ::std::string& cUpdatePenAnderaser::prept_x() const {
  return *prept_x_;
}
inline void cUpdatePenAnderaser::set_prept_x(const ::std::string& value) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(value);
}
inline void cUpdatePenAnderaser::set_prept_x(const char* value) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(value);
}
inline void cUpdatePenAnderaser::set_prept_x(const char* value, size_t size) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdatePenAnderaser::mutable_prept_x() {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  return prept_x_;
}
inline ::std::string* cUpdatePenAnderaser::release_prept_x() {
  clear_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prept_x_;
    prept_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdatePenAnderaser::set_allocated_prept_x(::std::string* prept_x) {
  if (prept_x_ != &::google::protobuf::internal::kEmptyString) {
    delete prept_x_;
  }
  if (prept_x) {
    set_has_prept_x();
    prept_x_ = prept_x;
  } else {
    clear_has_prept_x();
    prept_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prept_y = 9;
inline bool cUpdatePenAnderaser::has_prept_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cUpdatePenAnderaser::set_has_prept_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cUpdatePenAnderaser::clear_has_prept_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cUpdatePenAnderaser::clear_prept_y() {
  if (prept_y_ != &::google::protobuf::internal::kEmptyString) {
    prept_y_->clear();
  }
  clear_has_prept_y();
}
inline const ::std::string& cUpdatePenAnderaser::prept_y() const {
  return *prept_y_;
}
inline void cUpdatePenAnderaser::set_prept_y(const ::std::string& value) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(value);
}
inline void cUpdatePenAnderaser::set_prept_y(const char* value) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(value);
}
inline void cUpdatePenAnderaser::set_prept_y(const char* value, size_t size) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdatePenAnderaser::mutable_prept_y() {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  return prept_y_;
}
inline ::std::string* cUpdatePenAnderaser::release_prept_y() {
  clear_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prept_y_;
    prept_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdatePenAnderaser::set_allocated_prept_y(::std::string* prept_y) {
  if (prept_y_ != &::google::protobuf::internal::kEmptyString) {
    delete prept_y_;
  }
  if (prept_y) {
    set_has_prept_y();
    prept_y_ = prept_y;
  } else {
    clear_has_prept_y();
    prept_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sUpdatePenAnderaser

// required int32 pen_type = 1;
inline bool sUpdatePenAnderaser::has_pen_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pen_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdatePenAnderaser::clear_has_pen_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdatePenAnderaser::clear_pen_type() {
  pen_type_ = 0;
  clear_has_pen_type();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::pen_type() const {
  return pen_type_;
}
inline void sUpdatePenAnderaser::set_pen_type(::google::protobuf::int32 value) {
  set_has_pen_type();
  pen_type_ = value;
}

// required int32 pen_color = 2;
inline bool sUpdatePenAnderaser::has_pen_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pen_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdatePenAnderaser::clear_has_pen_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdatePenAnderaser::clear_pen_color() {
  pen_color_ = 0;
  clear_has_pen_color();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::pen_color() const {
  return pen_color_;
}
inline void sUpdatePenAnderaser::set_pen_color(::google::protobuf::int32 value) {
  set_has_pen_color();
  pen_color_ = value;
}

// required string pen_size = 3;
inline bool sUpdatePenAnderaser::has_pen_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pen_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdatePenAnderaser::clear_has_pen_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdatePenAnderaser::clear_pen_size() {
  if (pen_size_ != &::google::protobuf::internal::kEmptyString) {
    pen_size_->clear();
  }
  clear_has_pen_size();
}
inline const ::std::string& sUpdatePenAnderaser::pen_size() const {
  return *pen_size_;
}
inline void sUpdatePenAnderaser::set_pen_size(const ::std::string& value) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(value);
}
inline void sUpdatePenAnderaser::set_pen_size(const char* value) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(value);
}
inline void sUpdatePenAnderaser::set_pen_size(const char* value, size_t size) {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  pen_size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_pen_size() {
  set_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    pen_size_ = new ::std::string;
  }
  return pen_size_;
}
inline ::std::string* sUpdatePenAnderaser::release_pen_size() {
  clear_has_pen_size();
  if (pen_size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pen_size_;
    pen_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_pen_size(::std::string* pen_size) {
  if (pen_size_ != &::google::protobuf::internal::kEmptyString) {
    delete pen_size_;
  }
  if (pen_size) {
    set_has_pen_size();
    pen_size_ = pen_size;
  } else {
    clear_has_pen_size();
    pen_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pen_trans = 4;
inline bool sUpdatePenAnderaser::has_pen_trans() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pen_trans() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdatePenAnderaser::clear_has_pen_trans() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdatePenAnderaser::clear_pen_trans() {
  pen_trans_ = 0;
  clear_has_pen_trans();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::pen_trans() const {
  return pen_trans_;
}
inline void sUpdatePenAnderaser::set_pen_trans(::google::protobuf::int32 value) {
  set_has_pen_trans();
  pen_trans_ = value;
}

// required int32 paint_type = 5;
inline bool sUpdatePenAnderaser::has_paint_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sUpdatePenAnderaser::set_has_paint_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sUpdatePenAnderaser::clear_has_paint_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sUpdatePenAnderaser::clear_paint_type() {
  paint_type_ = 0;
  clear_has_paint_type();
}
inline ::google::protobuf::int32 sUpdatePenAnderaser::paint_type() const {
  return paint_type_;
}
inline void sUpdatePenAnderaser::set_paint_type(::google::protobuf::int32 value) {
  set_has_paint_type();
  paint_type_ = value;
}

// required string pt_x = 6;
inline bool sUpdatePenAnderaser::has_pt_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pt_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sUpdatePenAnderaser::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sUpdatePenAnderaser::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdatePenAnderaser::pt_x() const {
  return *pt_x_;
}
inline void sUpdatePenAnderaser::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdatePenAnderaser::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdatePenAnderaser::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdatePenAnderaser::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 7;
inline bool sUpdatePenAnderaser::has_pt_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sUpdatePenAnderaser::set_has_pt_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sUpdatePenAnderaser::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sUpdatePenAnderaser::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdatePenAnderaser::pt_y() const {
  return *pt_y_;
}
inline void sUpdatePenAnderaser::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdatePenAnderaser::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdatePenAnderaser::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdatePenAnderaser::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prept_x = 8;
inline bool sUpdatePenAnderaser::has_prept_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sUpdatePenAnderaser::set_has_prept_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sUpdatePenAnderaser::clear_has_prept_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sUpdatePenAnderaser::clear_prept_x() {
  if (prept_x_ != &::google::protobuf::internal::kEmptyString) {
    prept_x_->clear();
  }
  clear_has_prept_x();
}
inline const ::std::string& sUpdatePenAnderaser::prept_x() const {
  return *prept_x_;
}
inline void sUpdatePenAnderaser::set_prept_x(const ::std::string& value) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(value);
}
inline void sUpdatePenAnderaser::set_prept_x(const char* value) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(value);
}
inline void sUpdatePenAnderaser::set_prept_x(const char* value, size_t size) {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  prept_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_prept_x() {
  set_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    prept_x_ = new ::std::string;
  }
  return prept_x_;
}
inline ::std::string* sUpdatePenAnderaser::release_prept_x() {
  clear_has_prept_x();
  if (prept_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prept_x_;
    prept_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_prept_x(::std::string* prept_x) {
  if (prept_x_ != &::google::protobuf::internal::kEmptyString) {
    delete prept_x_;
  }
  if (prept_x) {
    set_has_prept_x();
    prept_x_ = prept_x;
  } else {
    clear_has_prept_x();
    prept_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prept_y = 9;
inline bool sUpdatePenAnderaser::has_prept_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sUpdatePenAnderaser::set_has_prept_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sUpdatePenAnderaser::clear_has_prept_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sUpdatePenAnderaser::clear_prept_y() {
  if (prept_y_ != &::google::protobuf::internal::kEmptyString) {
    prept_y_->clear();
  }
  clear_has_prept_y();
}
inline const ::std::string& sUpdatePenAnderaser::prept_y() const {
  return *prept_y_;
}
inline void sUpdatePenAnderaser::set_prept_y(const ::std::string& value) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(value);
}
inline void sUpdatePenAnderaser::set_prept_y(const char* value) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(value);
}
inline void sUpdatePenAnderaser::set_prept_y(const char* value, size_t size) {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  prept_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdatePenAnderaser::mutable_prept_y() {
  set_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    prept_y_ = new ::std::string;
  }
  return prept_y_;
}
inline ::std::string* sUpdatePenAnderaser::release_prept_y() {
  clear_has_prept_y();
  if (prept_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prept_y_;
    prept_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdatePenAnderaser::set_allocated_prept_y(::std::string* prept_y) {
  if (prept_y_ != &::google::protobuf::internal::kEmptyString) {
    delete prept_y_;
  }
  if (prept_y) {
    set_has_prept_y();
    prept_y_ = prept_y;
  } else {
    clear_has_prept_y();
    prept_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cUpdateFilling

// required string pt_list = 1;
inline bool cUpdateFilling::has_pt_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateFilling::set_has_pt_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateFilling::clear_has_pt_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateFilling::clear_pt_list() {
  if (pt_list_ != &::google::protobuf::internal::kEmptyString) {
    pt_list_->clear();
  }
  clear_has_pt_list();
}
inline const ::std::string& cUpdateFilling::pt_list() const {
  return *pt_list_;
}
inline void cUpdateFilling::set_pt_list(const ::std::string& value) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(value);
}
inline void cUpdateFilling::set_pt_list(const char* value) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(value);
}
inline void cUpdateFilling::set_pt_list(const char* value, size_t size) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateFilling::mutable_pt_list() {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  return pt_list_;
}
inline ::std::string* cUpdateFilling::release_pt_list() {
  clear_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_list_;
    pt_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateFilling::set_allocated_pt_list(::std::string* pt_list) {
  if (pt_list_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_list_;
  }
  if (pt_list) {
    set_has_pt_list();
    pt_list_ = pt_list;
  } else {
    clear_has_pt_list();
    pt_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 trans = 3;
inline bool cUpdateFilling::has_trans() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateFilling::set_has_trans() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateFilling::clear_has_trans() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateFilling::clear_trans() {
  trans_ = 0;
  clear_has_trans();
}
inline ::google::protobuf::int32 cUpdateFilling::trans() const {
  return trans_;
}
inline void cUpdateFilling::set_trans(::google::protobuf::int32 value) {
  set_has_trans();
  trans_ = value;
}

// required int32 color = 2;
inline bool cUpdateFilling::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateFilling::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateFilling::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateFilling::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 cUpdateFilling::color() const {
  return color_;
}
inline void cUpdateFilling::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// sUpdateFilling

// required string pt_list = 1;
inline bool sUpdateFilling::has_pt_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateFilling::set_has_pt_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateFilling::clear_has_pt_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateFilling::clear_pt_list() {
  if (pt_list_ != &::google::protobuf::internal::kEmptyString) {
    pt_list_->clear();
  }
  clear_has_pt_list();
}
inline const ::std::string& sUpdateFilling::pt_list() const {
  return *pt_list_;
}
inline void sUpdateFilling::set_pt_list(const ::std::string& value) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(value);
}
inline void sUpdateFilling::set_pt_list(const char* value) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(value);
}
inline void sUpdateFilling::set_pt_list(const char* value, size_t size) {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  pt_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateFilling::mutable_pt_list() {
  set_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    pt_list_ = new ::std::string;
  }
  return pt_list_;
}
inline ::std::string* sUpdateFilling::release_pt_list() {
  clear_has_pt_list();
  if (pt_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_list_;
    pt_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateFilling::set_allocated_pt_list(::std::string* pt_list) {
  if (pt_list_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_list_;
  }
  if (pt_list) {
    set_has_pt_list();
    pt_list_ = pt_list;
  } else {
    clear_has_pt_list();
    pt_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 trans = 3;
inline bool sUpdateFilling::has_trans() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateFilling::set_has_trans() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateFilling::clear_has_trans() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateFilling::clear_trans() {
  trans_ = 0;
  clear_has_trans();
}
inline ::google::protobuf::int32 sUpdateFilling::trans() const {
  return trans_;
}
inline void sUpdateFilling::set_trans(::google::protobuf::int32 value) {
  set_has_trans();
  trans_ = value;
}

// required int32 color = 2;
inline bool sUpdateFilling::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateFilling::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateFilling::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateFilling::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 sUpdateFilling::color() const {
  return color_;
}
inline void sUpdateFilling::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// cUpdateStamp

// required string pic_res = 1;
inline bool cUpdateStamp::has_pic_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateStamp::set_has_pic_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateStamp::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateStamp::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& cUpdateStamp::pic_res() const {
  return *pic_res_;
}
inline void cUpdateStamp::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateStamp::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateStamp::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateStamp::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* cUpdateStamp::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateStamp::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 2;
inline bool cUpdateStamp::has_pt_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateStamp::set_has_pt_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateStamp::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateStamp::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdateStamp::pt_x() const {
  return *pt_x_;
}
inline void cUpdateStamp::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateStamp::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateStamp::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateStamp::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdateStamp::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateStamp::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 3;
inline bool cUpdateStamp::has_pt_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateStamp::set_has_pt_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateStamp::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateStamp::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdateStamp::pt_y() const {
  return *pt_y_;
}
inline void cUpdateStamp::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateStamp::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateStamp::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateStamp::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdateStamp::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateStamp::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sUpdateStamp

// required string pic_res = 1;
inline bool sUpdateStamp::has_pic_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateStamp::set_has_pic_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateStamp::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateStamp::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& sUpdateStamp::pic_res() const {
  return *pic_res_;
}
inline void sUpdateStamp::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateStamp::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateStamp::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateStamp::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* sUpdateStamp::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateStamp::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 2;
inline bool sUpdateStamp::has_pt_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateStamp::set_has_pt_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateStamp::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateStamp::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdateStamp::pt_x() const {
  return *pt_x_;
}
inline void sUpdateStamp::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateStamp::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateStamp::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateStamp::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdateStamp::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateStamp::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 3;
inline bool sUpdateStamp::has_pt_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateStamp::set_has_pt_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateStamp::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateStamp::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdateStamp::pt_y() const {
  return *pt_y_;
}
inline void sUpdateStamp::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateStamp::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateStamp::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateStamp::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdateStamp::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateStamp::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cUpdateFillPic

// required string pic_res = 1;
inline bool cUpdateFillPic::has_pic_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateFillPic::set_has_pic_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateFillPic::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateFillPic::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& cUpdateFillPic::pic_res() const {
  return *pic_res_;
}
inline void cUpdateFillPic::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateFillPic::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateFillPic::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateFillPic::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* cUpdateFillPic::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateFillPic::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 2;
inline bool cUpdateFillPic::has_pt_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateFillPic::set_has_pt_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateFillPic::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateFillPic::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdateFillPic::pt_x() const {
  return *pt_x_;
}
inline void cUpdateFillPic::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateFillPic::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateFillPic::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateFillPic::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdateFillPic::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateFillPic::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 3;
inline bool cUpdateFillPic::has_pt_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateFillPic::set_has_pt_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateFillPic::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateFillPic::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdateFillPic::pt_y() const {
  return *pt_y_;
}
inline void cUpdateFillPic::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateFillPic::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateFillPic::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateFillPic::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdateFillPic::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateFillPic::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sUpdateFillPic

// required string pic_res = 1;
inline bool sUpdateFillPic::has_pic_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateFillPic::set_has_pic_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateFillPic::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateFillPic::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& sUpdateFillPic::pic_res() const {
  return *pic_res_;
}
inline void sUpdateFillPic::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateFillPic::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateFillPic::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateFillPic::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* sUpdateFillPic::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateFillPic::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 2;
inline bool sUpdateFillPic::has_pt_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateFillPic::set_has_pt_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateFillPic::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateFillPic::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdateFillPic::pt_x() const {
  return *pt_x_;
}
inline void sUpdateFillPic::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateFillPic::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateFillPic::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateFillPic::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdateFillPic::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateFillPic::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 3;
inline bool sUpdateFillPic::has_pt_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateFillPic::set_has_pt_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateFillPic::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateFillPic::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdateFillPic::pt_y() const {
  return *pt_y_;
}
inline void sUpdateFillPic::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateFillPic::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateFillPic::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateFillPic::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdateFillPic::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateFillPic::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cUpdateMutex

// required int32 lock = 1;
inline bool cUpdateMutex::has_lock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateMutex::set_has_lock() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateMutex::clear_has_lock() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateMutex::clear_lock() {
  lock_ = 0;
  clear_has_lock();
}
inline ::google::protobuf::int32 cUpdateMutex::lock() const {
  return lock_;
}
inline void cUpdateMutex::set_lock(::google::protobuf::int32 value) {
  set_has_lock();
  lock_ = value;
}

// -------------------------------------------------------------------

// sUpdateMutex

// required int32 result = 1;
inline bool sUpdateMutex::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateMutex::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateMutex::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateMutex::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 sUpdateMutex::result() const {
  return result_;
}
inline void sUpdateMutex::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// cUpdateCollage

// required int32 id = 9;
inline bool cUpdateCollage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateCollage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateCollage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateCollage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cUpdateCollage::id() const {
  return id_;
}
inline void cUpdateCollage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string pic_res = 1;
inline bool cUpdateCollage::has_pic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateCollage::set_has_pic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateCollage::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateCollage::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& cUpdateCollage::pic_res() const {
  return *pic_res_;
}
inline void cUpdateCollage::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateCollage::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void cUpdateCollage::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* cUpdateCollage::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pic_type = 2;
inline bool cUpdateCollage::has_pic_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateCollage::set_has_pic_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateCollage::clear_has_pic_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateCollage::clear_pic_type() {
  pic_type_ = 0;
  clear_has_pic_type();
}
inline ::google::protobuf::int32 cUpdateCollage::pic_type() const {
  return pic_type_;
}
inline void cUpdateCollage::set_pic_type(::google::protobuf::int32 value) {
  set_has_pic_type();
  pic_type_ = value;
}

// required string pic_scale = 3;
inline bool cUpdateCollage::has_pic_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateCollage::set_has_pic_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateCollage::clear_has_pic_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateCollage::clear_pic_scale() {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    pic_scale_->clear();
  }
  clear_has_pic_scale();
}
inline const ::std::string& cUpdateCollage::pic_scale() const {
  return *pic_scale_;
}
inline void cUpdateCollage::set_pic_scale(const ::std::string& value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void cUpdateCollage::set_pic_scale(const char* value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void cUpdateCollage::set_pic_scale(const char* value, size_t size) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pic_scale() {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  return pic_scale_;
}
inline ::std::string* cUpdateCollage::release_pic_scale() {
  clear_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_scale_;
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pic_scale(::std::string* pic_scale) {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_scale_;
  }
  if (pic_scale) {
    set_has_pic_scale();
    pic_scale_ = pic_scale;
  } else {
    clear_has_pic_scale();
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_rotation = 4;
inline bool cUpdateCollage::has_pic_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdateCollage::set_has_pic_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdateCollage::clear_has_pic_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdateCollage::clear_pic_rotation() {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    pic_rotation_->clear();
  }
  clear_has_pic_rotation();
}
inline const ::std::string& cUpdateCollage::pic_rotation() const {
  return *pic_rotation_;
}
inline void cUpdateCollage::set_pic_rotation(const ::std::string& value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void cUpdateCollage::set_pic_rotation(const char* value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void cUpdateCollage::set_pic_rotation(const char* value, size_t size) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pic_rotation() {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  return pic_rotation_;
}
inline ::std::string* cUpdateCollage::release_pic_rotation() {
  clear_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_rotation_;
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pic_rotation(::std::string* pic_rotation) {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_rotation_;
  }
  if (pic_rotation) {
    set_has_pic_rotation();
    pic_rotation_ = pic_rotation;
  } else {
    clear_has_pic_rotation();
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 5;
inline bool cUpdateCollage::has_pt_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cUpdateCollage::set_has_pt_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cUpdateCollage::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cUpdateCollage::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& cUpdateCollage::pt_x() const {
  return *pt_x_;
}
inline void cUpdateCollage::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateCollage::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void cUpdateCollage::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* cUpdateCollage::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 6;
inline bool cUpdateCollage::has_pt_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cUpdateCollage::set_has_pt_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cUpdateCollage::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cUpdateCollage::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& cUpdateCollage::pt_y() const {
  return *pt_y_;
}
inline void cUpdateCollage::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateCollage::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void cUpdateCollage::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateCollage::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* cUpdateCollage::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateCollage::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 layer = 7;
inline bool cUpdateCollage::has_layer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cUpdateCollage::set_has_layer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cUpdateCollage::clear_has_layer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cUpdateCollage::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 cUpdateCollage::layer() const {
  return layer_;
}
inline void cUpdateCollage::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// required int32 op_type = 8;
inline bool cUpdateCollage::has_op_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cUpdateCollage::set_has_op_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cUpdateCollage::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cUpdateCollage::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 cUpdateCollage::op_type() const {
  return op_type_;
}
inline void cUpdateCollage::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// -------------------------------------------------------------------

// sUpdateCollage

// required int32 id = 9;
inline bool sUpdateCollage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateCollage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateCollage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateCollage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sUpdateCollage::id() const {
  return id_;
}
inline void sUpdateCollage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string pic_res = 1;
inline bool sUpdateCollage::has_pic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sUpdateCollage::set_has_pic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sUpdateCollage::clear_has_pic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sUpdateCollage::clear_pic_res() {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    pic_res_->clear();
  }
  clear_has_pic_res();
}
inline const ::std::string& sUpdateCollage::pic_res() const {
  return *pic_res_;
}
inline void sUpdateCollage::set_pic_res(const ::std::string& value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateCollage::set_pic_res(const char* value) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(value);
}
inline void sUpdateCollage::set_pic_res(const char* value, size_t size) {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  pic_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pic_res() {
  set_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    pic_res_ = new ::std::string;
  }
  return pic_res_;
}
inline ::std::string* sUpdateCollage::release_pic_res() {
  clear_has_pic_res();
  if (pic_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_res_;
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pic_res(::std::string* pic_res) {
  if (pic_res_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_res_;
  }
  if (pic_res) {
    set_has_pic_res();
    pic_res_ = pic_res;
  } else {
    clear_has_pic_res();
    pic_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pic_type = 2;
inline bool sUpdateCollage::has_pic_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sUpdateCollage::set_has_pic_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sUpdateCollage::clear_has_pic_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sUpdateCollage::clear_pic_type() {
  pic_type_ = 0;
  clear_has_pic_type();
}
inline ::google::protobuf::int32 sUpdateCollage::pic_type() const {
  return pic_type_;
}
inline void sUpdateCollage::set_pic_type(::google::protobuf::int32 value) {
  set_has_pic_type();
  pic_type_ = value;
}

// required string pic_scale = 3;
inline bool sUpdateCollage::has_pic_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sUpdateCollage::set_has_pic_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sUpdateCollage::clear_has_pic_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sUpdateCollage::clear_pic_scale() {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    pic_scale_->clear();
  }
  clear_has_pic_scale();
}
inline const ::std::string& sUpdateCollage::pic_scale() const {
  return *pic_scale_;
}
inline void sUpdateCollage::set_pic_scale(const ::std::string& value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void sUpdateCollage::set_pic_scale(const char* value) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(value);
}
inline void sUpdateCollage::set_pic_scale(const char* value, size_t size) {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  pic_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pic_scale() {
  set_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    pic_scale_ = new ::std::string;
  }
  return pic_scale_;
}
inline ::std::string* sUpdateCollage::release_pic_scale() {
  clear_has_pic_scale();
  if (pic_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_scale_;
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pic_scale(::std::string* pic_scale) {
  if (pic_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_scale_;
  }
  if (pic_scale) {
    set_has_pic_scale();
    pic_scale_ = pic_scale;
  } else {
    clear_has_pic_scale();
    pic_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_rotation = 4;
inline bool sUpdateCollage::has_pic_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sUpdateCollage::set_has_pic_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sUpdateCollage::clear_has_pic_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sUpdateCollage::clear_pic_rotation() {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    pic_rotation_->clear();
  }
  clear_has_pic_rotation();
}
inline const ::std::string& sUpdateCollage::pic_rotation() const {
  return *pic_rotation_;
}
inline void sUpdateCollage::set_pic_rotation(const ::std::string& value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void sUpdateCollage::set_pic_rotation(const char* value) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(value);
}
inline void sUpdateCollage::set_pic_rotation(const char* value, size_t size) {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  pic_rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pic_rotation() {
  set_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    pic_rotation_ = new ::std::string;
  }
  return pic_rotation_;
}
inline ::std::string* sUpdateCollage::release_pic_rotation() {
  clear_has_pic_rotation();
  if (pic_rotation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_rotation_;
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pic_rotation(::std::string* pic_rotation) {
  if (pic_rotation_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_rotation_;
  }
  if (pic_rotation) {
    set_has_pic_rotation();
    pic_rotation_ = pic_rotation;
  } else {
    clear_has_pic_rotation();
    pic_rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_x = 5;
inline bool sUpdateCollage::has_pt_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sUpdateCollage::set_has_pt_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sUpdateCollage::clear_has_pt_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sUpdateCollage::clear_pt_x() {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    pt_x_->clear();
  }
  clear_has_pt_x();
}
inline const ::std::string& sUpdateCollage::pt_x() const {
  return *pt_x_;
}
inline void sUpdateCollage::set_pt_x(const ::std::string& value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateCollage::set_pt_x(const char* value) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(value);
}
inline void sUpdateCollage::set_pt_x(const char* value, size_t size) {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  pt_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pt_x() {
  set_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    pt_x_ = new ::std::string;
  }
  return pt_x_;
}
inline ::std::string* sUpdateCollage::release_pt_x() {
  clear_has_pt_x();
  if (pt_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_x_;
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pt_x(::std::string* pt_x) {
  if (pt_x_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_x_;
  }
  if (pt_x) {
    set_has_pt_x();
    pt_x_ = pt_x;
  } else {
    clear_has_pt_x();
    pt_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pt_y = 6;
inline bool sUpdateCollage::has_pt_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sUpdateCollage::set_has_pt_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sUpdateCollage::clear_has_pt_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sUpdateCollage::clear_pt_y() {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    pt_y_->clear();
  }
  clear_has_pt_y();
}
inline const ::std::string& sUpdateCollage::pt_y() const {
  return *pt_y_;
}
inline void sUpdateCollage::set_pt_y(const ::std::string& value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateCollage::set_pt_y(const char* value) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(value);
}
inline void sUpdateCollage::set_pt_y(const char* value, size_t size) {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  pt_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sUpdateCollage::mutable_pt_y() {
  set_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    pt_y_ = new ::std::string;
  }
  return pt_y_;
}
inline ::std::string* sUpdateCollage::release_pt_y() {
  clear_has_pt_y();
  if (pt_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pt_y_;
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sUpdateCollage::set_allocated_pt_y(::std::string* pt_y) {
  if (pt_y_ != &::google::protobuf::internal::kEmptyString) {
    delete pt_y_;
  }
  if (pt_y) {
    set_has_pt_y();
    pt_y_ = pt_y;
  } else {
    clear_has_pt_y();
    pt_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 layer = 7;
inline bool sUpdateCollage::has_layer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sUpdateCollage::set_has_layer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sUpdateCollage::clear_has_layer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sUpdateCollage::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 sUpdateCollage::layer() const {
  return layer_;
}
inline void sUpdateCollage::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// required int32 op_type = 8;
inline bool sUpdateCollage::has_op_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sUpdateCollage::set_has_op_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sUpdateCollage::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sUpdateCollage::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 sUpdateCollage::op_type() const {
  return op_type_;
}
inline void sUpdateCollage::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// -------------------------------------------------------------------

// cUpdateWord

// required int32 id = 9;
inline bool cUpdateWord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateWord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateWord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateWord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cUpdateWord::id() const {
  return id_;
}
inline void cUpdateWord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 frame_id = 1;
inline bool cUpdateWord::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cUpdateWord::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cUpdateWord::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cUpdateWord::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 cUpdateWord::frame_id() const {
  return frame_id_;
}
inline void cUpdateWord::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
}

// required string msg = 2;
inline bool cUpdateWord::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cUpdateWord::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cUpdateWord::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cUpdateWord::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& cUpdateWord::msg() const {
  return *msg_;
}
inline void cUpdateWord::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void cUpdateWord::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void cUpdateWord::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateWord::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* cUpdateWord::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateWord::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 front = 3;
inline bool cUpdateWord::has_front() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cUpdateWord::set_has_front() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cUpdateWord::clear_has_front() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cUpdateWord::clear_front() {
  front_ = 0;
  clear_has_front();
}
inline ::google::protobuf::int32 cUpdateWord::front() const {
  return front_;
}
inline void cUpdateWord::set_front(::google::protobuf::int32 value) {
  set_has_front();
  front_ = value;
}

// required int32 color = 4;
inline bool cUpdateWord::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cUpdateWord::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cUpdateWord::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cUpdateWord::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 cUpdateWord::color() const {
  return color_;
}
inline void cUpdateWord::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// required int32 size = 5;
inline bool cUpdateWord::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cUpdateWord::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cUpdateWord::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cUpdateWord::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 cUpdateWord::size() const {
  return size_;
}
inline void cUpdateWord::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required int32 effect_id = 6;
inline bool cUpdateWord::has_effect_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cUpdateWord::set_has_effect_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cUpdateWord::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cUpdateWord::clear_effect_id() {
  effect_id_ = 0;
  clear_has_effect_id();
}
inline ::google::protobuf::int32 cUpdateWord::effect_id() const {
  return effect_id_;
}
inline void cUpdateWord::set_effect_id(::google::protobuf::int32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// required string frame_x = 7;
inline bool cUpdateWord::has_frame_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cUpdateWord::set_has_frame_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cUpdateWord::clear_has_frame_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cUpdateWord::clear_frame_x() {
  if (frame_x_ != &::google::protobuf::internal::kEmptyString) {
    frame_x_->clear();
  }
  clear_has_frame_x();
}
inline const ::std::string& cUpdateWord::frame_x() const {
  return *frame_x_;
}
inline void cUpdateWord::set_frame_x(const ::std::string& value) {
  set_has_frame_x();
  if (frame_x_ == &::google::protobuf::internal::kEmptyString) {
    frame_x_ = new ::std::string;
  }
  frame_x_->assign(value);
}
inline void cUpdateWord::set_frame_x(const char* value) {
  set_has_frame_x();
  if (frame_x_ == &::google::protobuf::internal::kEmptyString) {
    frame_x_ = new ::std::string;
  }
  frame_x_->assign(value);
}
inline void cUpdateWord::set_frame_x(const char* value, size_t size) {
  set_has_frame_x();
  if (frame_x_ == &::google::protobuf::internal::kEmptyString) {
    frame_x_ = new ::std::string;
  }
  frame_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateWord::mutable_frame_x() {
  set_has_frame_x();
  if (frame_x_ == &::google::protobuf::internal::kEmptyString) {
    frame_x_ = new ::std::string;
  }
  return frame_x_;
}
inline ::std::string* cUpdateWord::release_frame_x() {
  clear_has_frame_x();
  if (frame_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frame_x_;
    frame_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateWord::set_allocated_frame_x(::std::string* frame_x) {
  if (frame_x_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_x_;
  }
  if (frame_x) {
    set_has_frame_x();
    frame_x_ = frame_x;
  } else {
    clear_has_frame_x();
    frame_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string frame_y = 8;
inline bool cUpdateWord::has_frame_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cUpdateWord::set_has_frame_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cUpdateWord::clear_has_frame_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cUpdateWord::clear_frame_y() {
  if (frame_y_ != &::google::protobuf::internal::kEmptyString) {
    frame_y_->clear();
  }
  clear_has_frame_y();
}
inline const ::std::string& cUpdateWord::frame_y() const {
  return *frame_y_;
}
inline void cUpdateWord::set_frame_y(const ::std::string& value) {
  set_has_frame_y();
  if (frame_y_ == &::google::protobuf::internal::kEmptyString) {
    frame_y_ = new ::std::string;
  }
  frame_y_->assign(value);
}
inline void cUpdateWord::set_frame_y(const char* value) {
  set_has_frame_y();
  if (frame_y_ == &::google::protobuf::internal::kEmptyString) {
    frame_y_ = new ::std::string;
  }
  frame_y_->assign(value);
}
inline void cUpdateWord::set_frame_y(const char* value, size_t size) {
  set_has_frame_y();
  if (frame_y_ == &::google::protobuf::internal::kEmptyString) {
    frame_y_ = new ::std::string;
  }
  frame_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cUpdateWord::mutable_frame_y() {
  set_has_frame_y();
  if (frame_y_ == &::google::protobuf::internal::kEmptyString) {
    frame_y_ = new ::std::string;
  }
  return frame_y_;
}
inline ::std::string* cUpdateWord::release_frame_y() {
  clear_has_frame_y();
  if (frame_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frame_y_;
    frame_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cUpdateWord::set_allocated_frame_y(::std::string* frame_y) {
  if (frame_y_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_y_;
  }
  if (frame_y) {
    set_has_frame_y();
    frame_y_ = frame_y;
  } else {
    clear_has_frame_y();
    frame_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sUpdateWord

// -------------------------------------------------------------------

// cUpdateFrame

// required int32 frame_id = 1;
inline bool cUpdateFrame::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cUpdateFrame::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cUpdateFrame::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cUpdateFrame::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 cUpdateFrame::frame_id() const {
  return frame_id_;
}
inline void cUpdateFrame::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
}

// -------------------------------------------------------------------

// sUpdateFrame

// required int32 frame_id = 1;
inline bool sUpdateFrame::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateFrame::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateFrame::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateFrame::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 sUpdateFrame::frame_id() const {
  return frame_id_;
}
inline void sUpdateFrame::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CourseNode_CourseType>() {
  return ::CourseNode_CourseType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fprotocol_2eproto__INCLUDED
