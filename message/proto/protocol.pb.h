// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/protocol.proto

#ifndef PROTOBUF_proto_2fprotocol_2eproto__INCLUDED
#define PROTOBUF_proto_2fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fprotocol_2eproto();
void protobuf_AssignDesc_proto_2fprotocol_2eproto();
void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

class cLogin;
class sLogin;
class cLogout;
class sLogout;
class cGetFuncList;
class sGetFuncList;
class cSetFunc;
class sSetFunc;
class cGetGradeList;
class sGetGradeList;
class cGetCourseList;
class sGetCourseList;
class cGetContent;
class sGetContent;
class cGetClassList;
class sGetClassList;
class cGetClassRoomList;
class sGetClassRoomList;
class cSetContent;
class sSetContent;
class cGetStudentList;
class sGetStudentList;
class cGetActiveStudentList;
class sGetActiveStudentList;
class sUpdateStudentStatus;
class cGetStudentInfo;
class sGetStudentInfo;
class cGetTeacherInfo;
class sGetTeacherInfo;

// ===================================================================

class cLogin : public ::google::protobuf::Message {
 public:
  cLogin();
  virtual ~cLogin();

  cLogin(const cLogin& from);

  inline cLogin& operator=(const cLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cLogin& default_instance();

  void Swap(cLogin* other);

  // implements Message ----------------------------------------------

  cLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cLogin& from);
  void MergeFrom(const cLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:cLogin)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* passwd_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cLogin* default_instance_;
};
// -------------------------------------------------------------------

class sLogin : public ::google::protobuf::Message {
 public:
  sLogin();
  virtual ~sLogin();

  sLogin(const sLogin& from);

  inline sLogin& operator=(const sLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sLogin& default_instance();

  void Swap(sLogin* other);

  // implements Message ----------------------------------------------

  sLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sLogin& from);
  void MergeFrom(const sLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:sLogin)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sLogin* default_instance_;
};
// -------------------------------------------------------------------

class cLogout : public ::google::protobuf::Message {
 public:
  cLogout();
  virtual ~cLogout();

  cLogout(const cLogout& from);

  inline cLogout& operator=(const cLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cLogout& default_instance();

  void Swap(cLogout* other);

  // implements Message ----------------------------------------------

  cLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cLogout& from);
  void MergeFrom(const cLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline ::google::protobuf::int32 common() const;
  inline void set_common(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cLogout)
 private:
  inline void set_has_common();
  inline void clear_has_common();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 common_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cLogout* default_instance_;
};
// -------------------------------------------------------------------

class sLogout : public ::google::protobuf::Message {
 public:
  sLogout();
  virtual ~sLogout();

  sLogout(const sLogout& from);

  inline sLogout& operator=(const sLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sLogout& default_instance();

  void Swap(sLogout* other);

  // implements Message ----------------------------------------------

  sLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sLogout& from);
  void MergeFrom(const sLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline ::google::protobuf::int32 common() const;
  inline void set_common(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sLogout)
 private:
  inline void set_has_common();
  inline void clear_has_common();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 common_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sLogout* default_instance_;
};
// -------------------------------------------------------------------

class cGetFuncList : public ::google::protobuf::Message {
 public:
  cGetFuncList();
  virtual ~cGetFuncList();

  cGetFuncList(const cGetFuncList& from);

  inline cGetFuncList& operator=(const cGetFuncList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetFuncList& default_instance();

  void Swap(cGetFuncList* other);

  // implements Message ----------------------------------------------

  cGetFuncList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetFuncList& from);
  void MergeFrom(const cGetFuncList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:cGetFuncList)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetFuncList* default_instance_;
};
// -------------------------------------------------------------------

class sGetFuncList : public ::google::protobuf::Message {
 public:
  sGetFuncList();
  virtual ~sGetFuncList();

  sGetFuncList(const sGetFuncList& from);

  inline sGetFuncList& operator=(const sGetFuncList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetFuncList& default_instance();

  void Swap(sGetFuncList* other);

  // implements Message ----------------------------------------------

  sGetFuncList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetFuncList& from);
  void MergeFrom(const sGetFuncList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string res_path = 2;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 2;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:sGetFuncList)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetFuncList* default_instance_;
};
// -------------------------------------------------------------------

class cSetFunc : public ::google::protobuf::Message {
 public:
  cSetFunc();
  virtual ~cSetFunc();

  cSetFunc(const cSetFunc& from);

  inline cSetFunc& operator=(const cSetFunc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSetFunc& default_instance();

  void Swap(cSetFunc* other);

  // implements Message ----------------------------------------------

  cSetFunc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSetFunc& from);
  void MergeFrom(const cSetFunc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 func_type = 1;
  inline bool has_func_type() const;
  inline void clear_func_type();
  static const int kFuncTypeFieldNumber = 1;
  inline ::google::protobuf::int32 func_type() const;
  inline void set_func_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cSetFunc)
 private:
  inline void set_has_func_type();
  inline void clear_has_func_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 func_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSetFunc* default_instance_;
};
// -------------------------------------------------------------------

class sSetFunc : public ::google::protobuf::Message {
 public:
  sSetFunc();
  virtual ~sSetFunc();

  sSetFunc(const sSetFunc& from);

  inline sSetFunc& operator=(const sSetFunc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sSetFunc& default_instance();

  void Swap(sSetFunc* other);

  // implements Message ----------------------------------------------

  sSetFunc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sSetFunc& from);
  void MergeFrom(const sSetFunc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:sSetFunc)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sSetFunc* default_instance_;
};
// -------------------------------------------------------------------

class cGetGradeList : public ::google::protobuf::Message {
 public:
  cGetGradeList();
  virtual ~cGetGradeList();

  cGetGradeList(const cGetGradeList& from);

  inline cGetGradeList& operator=(const cGetGradeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetGradeList& default_instance();

  void Swap(cGetGradeList* other);

  // implements Message ----------------------------------------------

  cGetGradeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetGradeList& from);
  void MergeFrom(const cGetGradeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline ::google::protobuf::int32 content() const;
  inline void set_content(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetGradeList)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetGradeList* default_instance_;
};
// -------------------------------------------------------------------

class sGetGradeList : public ::google::protobuf::Message {
 public:
  sGetGradeList();
  virtual ~sGetGradeList();

  sGetGradeList(const sGetGradeList& from);

  inline sGetGradeList& operator=(const sGetGradeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetGradeList& default_instance();

  void Swap(sGetGradeList* other);

  // implements Message ----------------------------------------------

  sGetGradeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetGradeList& from);
  void MergeFrom(const sGetGradeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grade_id = 1;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 1;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // required string grade_name = 2;
  inline bool has_grade_name() const;
  inline void clear_grade_name();
  static const int kGradeNameFieldNumber = 2;
  inline const ::std::string& grade_name() const;
  inline void set_grade_name(const ::std::string& value);
  inline void set_grade_name(const char* value);
  inline void set_grade_name(const char* value, size_t size);
  inline ::std::string* mutable_grade_name();
  inline ::std::string* release_grade_name();
  inline void set_allocated_grade_name(::std::string* grade_name);

  // @@protoc_insertion_point(class_scope:sGetGradeList)
 private:
  inline void set_has_grade_id();
  inline void clear_has_grade_id();
  inline void set_has_grade_name();
  inline void clear_has_grade_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* grade_name_;
  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetGradeList* default_instance_;
};
// -------------------------------------------------------------------

class cGetCourseList : public ::google::protobuf::Message {
 public:
  cGetCourseList();
  virtual ~cGetCourseList();

  cGetCourseList(const cGetCourseList& from);

  inline cGetCourseList& operator=(const cGetCourseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetCourseList& default_instance();

  void Swap(cGetCourseList* other);

  // implements Message ----------------------------------------------

  cGetCourseList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetCourseList& from);
  void MergeFrom(const cGetCourseList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grade_id = 1;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 1;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetCourseList)
 private:
  inline void set_has_grade_id();
  inline void clear_has_grade_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetCourseList* default_instance_;
};
// -------------------------------------------------------------------

class sGetCourseList : public ::google::protobuf::Message {
 public:
  sGetCourseList();
  virtual ~sGetCourseList();

  sGetCourseList(const sGetCourseList& from);

  inline sGetCourseList& operator=(const sGetCourseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetCourseList& default_instance();

  void Swap(sGetCourseList* other);

  // implements Message ----------------------------------------------

  sGetCourseList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetCourseList& from);
  void MergeFrom(const sGetCourseList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 course_id = 1;
  inline bool has_course_id() const;
  inline void clear_course_id();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::int32 course_id() const;
  inline void set_course_id(::google::protobuf::int32 value);

  // required string course_name = 2;
  inline bool has_course_name() const;
  inline void clear_course_name();
  static const int kCourseNameFieldNumber = 2;
  inline const ::std::string& course_name() const;
  inline void set_course_name(const ::std::string& value);
  inline void set_course_name(const char* value);
  inline void set_course_name(const char* value, size_t size);
  inline ::std::string* mutable_course_name();
  inline ::std::string* release_course_name();
  inline void set_allocated_course_name(::std::string* course_name);

  // required int32 language = 3;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 3;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);

  // required int32 art = 4;
  inline bool has_art() const;
  inline void clear_art();
  static const int kArtFieldNumber = 4;
  inline ::google::protobuf::int32 art() const;
  inline void set_art(::google::protobuf::int32 value);

  // required int32 community = 5;
  inline bool has_community() const;
  inline void clear_community();
  static const int kCommunityFieldNumber = 5;
  inline ::google::protobuf::int32 community() const;
  inline void set_community(::google::protobuf::int32 value);

  // required int32 health = 6;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 6;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required int32 science = 7;
  inline bool has_science() const;
  inline void clear_science();
  static const int kScienceFieldNumber = 7;
  inline ::google::protobuf::int32 science() const;
  inline void set_science(::google::protobuf::int32 value);

  // required string res_path = 8;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 8;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:sGetCourseList)
 private:
  inline void set_has_course_id();
  inline void clear_has_course_id();
  inline void set_has_course_name();
  inline void clear_has_course_name();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_art();
  inline void clear_has_art();
  inline void set_has_community();
  inline void clear_has_community();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_science();
  inline void clear_has_science();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* course_name_;
  ::google::protobuf::int32 course_id_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::int32 art_;
  ::google::protobuf::int32 community_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 science_;
  ::std::string* res_path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetCourseList* default_instance_;
};
// -------------------------------------------------------------------

class cGetContent : public ::google::protobuf::Message {
 public:
  cGetContent();
  virtual ~cGetContent();

  cGetContent(const cGetContent& from);

  inline cGetContent& operator=(const cGetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetContent& default_instance();

  void Swap(cGetContent* other);

  // implements Message ----------------------------------------------

  cGetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetContent& from);
  void MergeFrom(const cGetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline ::google::protobuf::int32 common() const;
  inline void set_common(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetContent)
 private:
  inline void set_has_common();
  inline void clear_has_common();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 common_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetContent* default_instance_;
};
// -------------------------------------------------------------------

class sGetContent : public ::google::protobuf::Message {
 public:
  sGetContent();
  virtual ~sGetContent();

  sGetContent(const sGetContent& from);

  inline sGetContent& operator=(const sGetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetContent& default_instance();

  void Swap(sGetContent* other);

  // implements Message ----------------------------------------------

  sGetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetContent& from);
  void MergeFrom(const sGetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string course_list = 1;
  inline bool has_course_list() const;
  inline void clear_course_list();
  static const int kCourseListFieldNumber = 1;
  inline const ::std::string& course_list() const;
  inline void set_course_list(const ::std::string& value);
  inline void set_course_list(const char* value);
  inline void set_course_list(const char* value, size_t size);
  inline ::std::string* mutable_course_list();
  inline ::std::string* release_course_list();
  inline void set_allocated_course_list(::std::string* course_list);

  // @@protoc_insertion_point(class_scope:sGetContent)
 private:
  inline void set_has_course_list();
  inline void clear_has_course_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* course_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetContent* default_instance_;
};
// -------------------------------------------------------------------

class cGetClassList : public ::google::protobuf::Message {
 public:
  cGetClassList();
  virtual ~cGetClassList();

  cGetClassList(const cGetClassList& from);

  inline cGetClassList& operator=(const cGetClassList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetClassList& default_instance();

  void Swap(cGetClassList* other);

  // implements Message ----------------------------------------------

  cGetClassList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetClassList& from);
  void MergeFrom(const cGetClassList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 grade_id = 1;
  inline bool has_grade_id() const;
  inline void clear_grade_id();
  static const int kGradeIdFieldNumber = 1;
  inline ::google::protobuf::int32 grade_id() const;
  inline void set_grade_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetClassList)
 private:
  inline void set_has_grade_id();
  inline void clear_has_grade_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grade_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetClassList* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassList : public ::google::protobuf::Message {
 public:
  sGetClassList();
  virtual ~sGetClassList();

  sGetClassList(const sGetClassList& from);

  inline sGetClassList& operator=(const sGetClassList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassList& default_instance();

  void Swap(sGetClassList* other);

  // implements Message ----------------------------------------------

  sGetClassList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassList& from);
  void MergeFrom(const sGetClassList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required string class_name = 2;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 2;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const char* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // @@protoc_insertion_point(class_scope:sGetClassList)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_class_name();
  inline void clear_has_class_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_name_;
  ::google::protobuf::int32 class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassList* default_instance_;
};
// -------------------------------------------------------------------

class cGetClassRoomList : public ::google::protobuf::Message {
 public:
  cGetClassRoomList();
  virtual ~cGetClassRoomList();

  cGetClassRoomList(const cGetClassRoomList& from);

  inline cGetClassRoomList& operator=(const cGetClassRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetClassRoomList& default_instance();

  void Swap(cGetClassRoomList* other);

  // implements Message ----------------------------------------------

  cGetClassRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetClassRoomList& from);
  void MergeFrom(const cGetClassRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:cGetClassRoomList)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetClassRoomList* default_instance_;
};
// -------------------------------------------------------------------

class sGetClassRoomList : public ::google::protobuf::Message {
 public:
  sGetClassRoomList();
  virtual ~sGetClassRoomList();

  sGetClassRoomList(const sGetClassRoomList& from);

  inline sGetClassRoomList& operator=(const sGetClassRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetClassRoomList& default_instance();

  void Swap(sGetClassRoomList* other);

  // implements Message ----------------------------------------------

  sGetClassRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetClassRoomList& from);
  void MergeFrom(const sGetClassRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 classroom_id = 1;
  inline bool has_classroom_id() const;
  inline void clear_classroom_id();
  static const int kClassroomIdFieldNumber = 1;
  inline ::google::protobuf::int32 classroom_id() const;
  inline void set_classroom_id(::google::protobuf::int32 value);

  // required string classroom_name = 2;
  inline bool has_classroom_name() const;
  inline void clear_classroom_name();
  static const int kClassroomNameFieldNumber = 2;
  inline const ::std::string& classroom_name() const;
  inline void set_classroom_name(const ::std::string& value);
  inline void set_classroom_name(const char* value);
  inline void set_classroom_name(const char* value, size_t size);
  inline ::std::string* mutable_classroom_name();
  inline ::std::string* release_classroom_name();
  inline void set_allocated_classroom_name(::std::string* classroom_name);

  // @@protoc_insertion_point(class_scope:sGetClassRoomList)
 private:
  inline void set_has_classroom_id();
  inline void clear_has_classroom_id();
  inline void set_has_classroom_name();
  inline void clear_has_classroom_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* classroom_name_;
  ::google::protobuf::int32 classroom_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetClassRoomList* default_instance_;
};
// -------------------------------------------------------------------

class cSetContent : public ::google::protobuf::Message {
 public:
  cSetContent();
  virtual ~cSetContent();

  cSetContent(const cSetContent& from);

  inline cSetContent& operator=(const cSetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cSetContent& default_instance();

  void Swap(cSetContent* other);

  // implements Message ----------------------------------------------

  cSetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cSetContent& from);
  void MergeFrom(const cSetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // required int32 classroom_id = 2;
  inline bool has_classroom_id() const;
  inline void clear_classroom_id();
  static const int kClassroomIdFieldNumber = 2;
  inline ::google::protobuf::int32 classroom_id() const;
  inline void set_classroom_id(::google::protobuf::int32 value);

  // required string course_list = 3;
  inline bool has_course_list() const;
  inline void clear_course_list();
  static const int kCourseListFieldNumber = 3;
  inline const ::std::string& course_list() const;
  inline void set_course_list(const ::std::string& value);
  inline void set_course_list(const char* value);
  inline void set_course_list(const char* value, size_t size);
  inline ::std::string* mutable_course_list();
  inline ::std::string* release_course_list();
  inline void set_allocated_course_list(::std::string* course_list);

  // @@protoc_insertion_point(class_scope:cSetContent)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_classroom_id();
  inline void clear_has_classroom_id();
  inline void set_has_course_list();
  inline void clear_has_course_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;
  ::google::protobuf::int32 classroom_id_;
  ::std::string* course_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cSetContent* default_instance_;
};
// -------------------------------------------------------------------

class sSetContent : public ::google::protobuf::Message {
 public:
  sSetContent();
  virtual ~sSetContent();

  sSetContent(const sSetContent& from);

  inline sSetContent& operator=(const sSetContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sSetContent& default_instance();

  void Swap(sSetContent* other);

  // implements Message ----------------------------------------------

  sSetContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sSetContent& from);
  void MergeFrom(const sSetContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sSetContent)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sSetContent* default_instance_;
};
// -------------------------------------------------------------------

class cGetStudentList : public ::google::protobuf::Message {
 public:
  cGetStudentList();
  virtual ~cGetStudentList();

  cGetStudentList(const cGetStudentList& from);

  inline cGetStudentList& operator=(const cGetStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetStudentList& default_instance();

  void Swap(cGetStudentList* other);

  // implements Message ----------------------------------------------

  cGetStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetStudentList& from);
  void MergeFrom(const cGetStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetStudentList)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetStudentList* default_instance_;
};
// -------------------------------------------------------------------

class sGetStudentList : public ::google::protobuf::Message {
 public:
  sGetStudentList();
  virtual ~sGetStudentList();

  sGetStudentList(const sGetStudentList& from);

  inline sGetStudentList& operator=(const sGetStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetStudentList& default_instance();

  void Swap(sGetStudentList* other);

  // implements Message ----------------------------------------------

  sGetStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetStudentList& from);
  void MergeFrom(const sGetStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string res_path = 3;
  inline bool has_res_path() const;
  inline void clear_res_path();
  static const int kResPathFieldNumber = 3;
  inline const ::std::string& res_path() const;
  inline void set_res_path(const ::std::string& value);
  inline void set_res_path(const char* value);
  inline void set_res_path(const char* value, size_t size);
  inline ::std::string* mutable_res_path();
  inline ::std::string* release_res_path();
  inline void set_allocated_res_path(::std::string* res_path);

  // @@protoc_insertion_point(class_scope:sGetStudentList)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_res_path();
  inline void clear_has_res_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* res_path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetStudentList* default_instance_;
};
// -------------------------------------------------------------------

class cGetActiveStudentList : public ::google::protobuf::Message {
 public:
  cGetActiveStudentList();
  virtual ~cGetActiveStudentList();

  cGetActiveStudentList(const cGetActiveStudentList& from);

  inline cGetActiveStudentList& operator=(const cGetActiveStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetActiveStudentList& default_instance();

  void Swap(cGetActiveStudentList* other);

  // implements Message ----------------------------------------------

  cGetActiveStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetActiveStudentList& from);
  void MergeFrom(const cGetActiveStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetActiveStudentList)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetActiveStudentList* default_instance_;
};
// -------------------------------------------------------------------

class sGetActiveStudentList : public ::google::protobuf::Message {
 public:
  sGetActiveStudentList();
  virtual ~sGetActiveStudentList();

  sGetActiveStudentList(const sGetActiveStudentList& from);

  inline sGetActiveStudentList& operator=(const sGetActiveStudentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetActiveStudentList& default_instance();

  void Swap(sGetActiveStudentList* other);

  // implements Message ----------------------------------------------

  sGetActiveStudentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetActiveStudentList& from);
  void MergeFrom(const sGetActiveStudentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sGetActiveStudentList)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetActiveStudentList* default_instance_;
};
// -------------------------------------------------------------------

class sUpdateStudentStatus : public ::google::protobuf::Message {
 public:
  sUpdateStudentStatus();
  virtual ~sUpdateStudentStatus();

  sUpdateStudentStatus(const sUpdateStudentStatus& from);

  inline sUpdateStudentStatus& operator=(const sUpdateStudentStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sUpdateStudentStatus& default_instance();

  void Swap(sUpdateStudentStatus* other);

  // implements Message ----------------------------------------------

  sUpdateStudentStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sUpdateStudentStatus& from);
  void MergeFrom(const sUpdateStudentStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sUpdateStudentStatus)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sUpdateStudentStatus* default_instance_;
};
// -------------------------------------------------------------------

class cGetStudentInfo : public ::google::protobuf::Message {
 public:
  cGetStudentInfo();
  virtual ~cGetStudentInfo();

  cGetStudentInfo(const cGetStudentInfo& from);

  inline cGetStudentInfo& operator=(const cGetStudentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetStudentInfo& default_instance();

  void Swap(cGetStudentInfo* other);

  // implements Message ----------------------------------------------

  cGetStudentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetStudentInfo& from);
  void MergeFrom(const cGetStudentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetStudentInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetStudentInfo* default_instance_;
};
// -------------------------------------------------------------------

class sGetStudentInfo : public ::google::protobuf::Message {
 public:
  sGetStudentInfo();
  virtual ~sGetStudentInfo();

  sGetStudentInfo(const sGetStudentInfo& from);

  inline sGetStudentInfo& operator=(const sGetStudentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetStudentInfo& default_instance();

  void Swap(sGetStudentInfo* other);

  // implements Message ----------------------------------------------

  sGetStudentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetStudentInfo& from);
  void MergeFrom(const sGetStudentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // required string race = 5;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 5;
  inline const ::std::string& race() const;
  inline void set_race(const ::std::string& value);
  inline void set_race(const char* value);
  inline void set_race(const char* value, size_t size);
  inline ::std::string* mutable_race();
  inline ::std::string* release_race();
  inline void set_allocated_race(::std::string* race);

  // required string birthday = 6;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 6;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // required string native = 7;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 7;
  inline const ::std::string& native() const;
  inline void set_native(const ::std::string& value);
  inline void set_native(const char* value);
  inline void set_native(const char* value, size_t size);
  inline ::std::string* mutable_native();
  inline ::std::string* release_native();
  inline void set_allocated_native(::std::string* native);

  // required string class_name = 8;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 8;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const char* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // @@protoc_insertion_point(class_scope:sGetStudentInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_class_name();
  inline void clear_has_class_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* number_;
  ::std::string* name_;
  ::std::string* sex_;
  ::std::string* race_;
  ::std::string* birthday_;
  ::std::string* native_;
  ::std::string* class_name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetStudentInfo* default_instance_;
};
// -------------------------------------------------------------------

class cGetTeacherInfo : public ::google::protobuf::Message {
 public:
  cGetTeacherInfo();
  virtual ~cGetTeacherInfo();

  cGetTeacherInfo(const cGetTeacherInfo& from);

  inline cGetTeacherInfo& operator=(const cGetTeacherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cGetTeacherInfo& default_instance();

  void Swap(cGetTeacherInfo* other);

  // implements Message ----------------------------------------------

  cGetTeacherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cGetTeacherInfo& from);
  void MergeFrom(const cGetTeacherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cGetTeacherInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static cGetTeacherInfo* default_instance_;
};
// -------------------------------------------------------------------

class sGetTeacherInfo : public ::google::protobuf::Message {
 public:
  sGetTeacherInfo();
  virtual ~sGetTeacherInfo();

  sGetTeacherInfo(const sGetTeacherInfo& from);

  inline sGetTeacherInfo& operator=(const sGetTeacherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sGetTeacherInfo& default_instance();

  void Swap(sGetTeacherInfo* other);

  // implements Message ----------------------------------------------

  sGetTeacherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sGetTeacherInfo& from);
  void MergeFrom(const sGetTeacherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // required string race = 5;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 5;
  inline const ::std::string& race() const;
  inline void set_race(const ::std::string& value);
  inline void set_race(const char* value);
  inline void set_race(const char* value, size_t size);
  inline ::std::string* mutable_race();
  inline ::std::string* release_race();
  inline void set_allocated_race(::std::string* race);

  // required string birthday = 6;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 6;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // required string native = 7;
  inline bool has_native() const;
  inline void clear_native();
  static const int kNativeFieldNumber = 7;
  inline const ::std::string& native() const;
  inline void set_native(const ::std::string& value);
  inline void set_native(const char* value);
  inline void set_native(const char* value, size_t size);
  inline ::std::string* mutable_native();
  inline ::std::string* release_native();
  inline void set_allocated_native(::std::string* native);

  // required string school_name = 8;
  inline bool has_school_name() const;
  inline void clear_school_name();
  static const int kSchoolNameFieldNumber = 8;
  inline const ::std::string& school_name() const;
  inline void set_school_name(const ::std::string& value);
  inline void set_school_name(const char* value);
  inline void set_school_name(const char* value, size_t size);
  inline ::std::string* mutable_school_name();
  inline ::std::string* release_school_name();
  inline void set_allocated_school_name(::std::string* school_name);

  // @@protoc_insertion_point(class_scope:sGetTeacherInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_school_name();
  inline void clear_has_school_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* number_;
  ::std::string* name_;
  ::std::string* sex_;
  ::std::string* race_;
  ::std::string* birthday_;
  ::std::string* native_;
  ::std::string* school_name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fprotocol_2eproto();
  friend void protobuf_AssignDesc_proto_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprotocol_2eproto();

  void InitAsDefaultInstance();
  static sGetTeacherInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// cLogin

// required int32 type = 1;
inline bool cLogin::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cLogin::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cLogin::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cLogin::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 cLogin::type() const {
  return type_;
}
inline void cLogin::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string account = 2;
inline bool cLogin::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cLogin::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& cLogin::account() const {
  return *account_;
}
inline void cLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void cLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void cLogin::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* cLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cLogin::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passwd = 3;
inline bool cLogin::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cLogin::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cLogin::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cLogin::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& cLogin::passwd() const {
  return *passwd_;
}
inline void cLogin::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void cLogin::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void cLogin::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cLogin::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* cLogin::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cLogin::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sLogin

// required bool result = 1;
inline bool sLogin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sLogin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sLogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sLogin::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sLogin::result() const {
  return result_;
}
inline void sLogin::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// cLogout

// required int32 common = 1;
inline bool cLogout::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cLogout::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cLogout::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cLogout::clear_common() {
  common_ = 0;
  clear_has_common();
}
inline ::google::protobuf::int32 cLogout::common() const {
  return common_;
}
inline void cLogout::set_common(::google::protobuf::int32 value) {
  set_has_common();
  common_ = value;
}

// -------------------------------------------------------------------

// sLogout

// required int32 common = 1;
inline bool sLogout::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sLogout::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sLogout::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sLogout::clear_common() {
  common_ = 0;
  clear_has_common();
}
inline ::google::protobuf::int32 sLogout::common() const {
  return common_;
}
inline void sLogout::set_common(::google::protobuf::int32 value) {
  set_has_common();
  common_ = value;
}

// -------------------------------------------------------------------

// cGetFuncList

// required string content = 1;
inline bool cGetFuncList::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetFuncList::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetFuncList::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetFuncList::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& cGetFuncList::content() const {
  return *content_;
}
inline void cGetFuncList::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void cGetFuncList::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void cGetFuncList::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cGetFuncList::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* cGetFuncList::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cGetFuncList::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetFuncList

// required int32 id = 3;
inline bool sGetFuncList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetFuncList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetFuncList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetFuncList::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetFuncList::id() const {
  return id_;
}
inline void sGetFuncList::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 1;
inline bool sGetFuncList::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetFuncList::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetFuncList::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetFuncList::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sGetFuncList::name() const {
  return *name_;
}
inline void sGetFuncList::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetFuncList::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetFuncList::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetFuncList::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sGetFuncList::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetFuncList::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string res_path = 2;
inline bool sGetFuncList::has_res_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetFuncList::set_has_res_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetFuncList::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetFuncList::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& sGetFuncList::res_path() const {
  return *res_path_;
}
inline void sGetFuncList::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void sGetFuncList::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void sGetFuncList::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetFuncList::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* sGetFuncList::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetFuncList::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cSetFunc

// required int32 func_type = 1;
inline bool cSetFunc::has_func_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSetFunc::set_has_func_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSetFunc::clear_has_func_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSetFunc::clear_func_type() {
  func_type_ = 0;
  clear_has_func_type();
}
inline ::google::protobuf::int32 cSetFunc::func_type() const {
  return func_type_;
}
inline void cSetFunc::set_func_type(::google::protobuf::int32 value) {
  set_has_func_type();
  func_type_ = value;
}

// -------------------------------------------------------------------

// sSetFunc

// required bool result = 1;
inline bool sSetFunc::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSetFunc::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSetFunc::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSetFunc::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sSetFunc::result() const {
  return result_;
}
inline void sSetFunc::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// cGetGradeList

// required int32 content = 1;
inline bool cGetGradeList::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetGradeList::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetGradeList::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetGradeList::clear_content() {
  content_ = 0;
  clear_has_content();
}
inline ::google::protobuf::int32 cGetGradeList::content() const {
  return content_;
}
inline void cGetGradeList::set_content(::google::protobuf::int32 value) {
  set_has_content();
  content_ = value;
}

// -------------------------------------------------------------------

// sGetGradeList

// required int32 grade_id = 1;
inline bool sGetGradeList::has_grade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetGradeList::set_has_grade_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetGradeList::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetGradeList::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 sGetGradeList::grade_id() const {
  return grade_id_;
}
inline void sGetGradeList::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// required string grade_name = 2;
inline bool sGetGradeList::has_grade_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetGradeList::set_has_grade_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetGradeList::clear_has_grade_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetGradeList::clear_grade_name() {
  if (grade_name_ != &::google::protobuf::internal::kEmptyString) {
    grade_name_->clear();
  }
  clear_has_grade_name();
}
inline const ::std::string& sGetGradeList::grade_name() const {
  return *grade_name_;
}
inline void sGetGradeList::set_grade_name(const ::std::string& value) {
  set_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    grade_name_ = new ::std::string;
  }
  grade_name_->assign(value);
}
inline void sGetGradeList::set_grade_name(const char* value) {
  set_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    grade_name_ = new ::std::string;
  }
  grade_name_->assign(value);
}
inline void sGetGradeList::set_grade_name(const char* value, size_t size) {
  set_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    grade_name_ = new ::std::string;
  }
  grade_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetGradeList::mutable_grade_name() {
  set_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    grade_name_ = new ::std::string;
  }
  return grade_name_;
}
inline ::std::string* sGetGradeList::release_grade_name() {
  clear_has_grade_name();
  if (grade_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grade_name_;
    grade_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetGradeList::set_allocated_grade_name(::std::string* grade_name) {
  if (grade_name_ != &::google::protobuf::internal::kEmptyString) {
    delete grade_name_;
  }
  if (grade_name) {
    set_has_grade_name();
    grade_name_ = grade_name;
  } else {
    clear_has_grade_name();
    grade_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetCourseList

// required int32 grade_id = 1;
inline bool cGetCourseList::has_grade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetCourseList::set_has_grade_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetCourseList::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetCourseList::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 cGetCourseList::grade_id() const {
  return grade_id_;
}
inline void cGetCourseList::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// -------------------------------------------------------------------

// sGetCourseList

// required int32 course_id = 1;
inline bool sGetCourseList::has_course_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetCourseList::set_has_course_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetCourseList::clear_has_course_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetCourseList::clear_course_id() {
  course_id_ = 0;
  clear_has_course_id();
}
inline ::google::protobuf::int32 sGetCourseList::course_id() const {
  return course_id_;
}
inline void sGetCourseList::set_course_id(::google::protobuf::int32 value) {
  set_has_course_id();
  course_id_ = value;
}

// required string course_name = 2;
inline bool sGetCourseList::has_course_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetCourseList::set_has_course_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetCourseList::clear_has_course_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetCourseList::clear_course_name() {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    course_name_->clear();
  }
  clear_has_course_name();
}
inline const ::std::string& sGetCourseList::course_name() const {
  return *course_name_;
}
inline void sGetCourseList::set_course_name(const ::std::string& value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void sGetCourseList::set_course_name(const char* value) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(value);
}
inline void sGetCourseList::set_course_name(const char* value, size_t size) {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  course_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetCourseList::mutable_course_name() {
  set_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    course_name_ = new ::std::string;
  }
  return course_name_;
}
inline ::std::string* sGetCourseList::release_course_name() {
  clear_has_course_name();
  if (course_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_name_;
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetCourseList::set_allocated_course_name(::std::string* course_name) {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    delete course_name_;
  }
  if (course_name) {
    set_has_course_name();
    course_name_ = course_name;
  } else {
    clear_has_course_name();
    course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 language = 3;
inline bool sGetCourseList::has_language() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetCourseList::set_has_language() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetCourseList::clear_has_language() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetCourseList::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 sGetCourseList::language() const {
  return language_;
}
inline void sGetCourseList::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// required int32 art = 4;
inline bool sGetCourseList::has_art() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetCourseList::set_has_art() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetCourseList::clear_has_art() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetCourseList::clear_art() {
  art_ = 0;
  clear_has_art();
}
inline ::google::protobuf::int32 sGetCourseList::art() const {
  return art_;
}
inline void sGetCourseList::set_art(::google::protobuf::int32 value) {
  set_has_art();
  art_ = value;
}

// required int32 community = 5;
inline bool sGetCourseList::has_community() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGetCourseList::set_has_community() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGetCourseList::clear_has_community() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGetCourseList::clear_community() {
  community_ = 0;
  clear_has_community();
}
inline ::google::protobuf::int32 sGetCourseList::community() const {
  return community_;
}
inline void sGetCourseList::set_community(::google::protobuf::int32 value) {
  set_has_community();
  community_ = value;
}

// required int32 health = 6;
inline bool sGetCourseList::has_health() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGetCourseList::set_has_health() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGetCourseList::clear_has_health() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGetCourseList::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 sGetCourseList::health() const {
  return health_;
}
inline void sGetCourseList::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required int32 science = 7;
inline bool sGetCourseList::has_science() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGetCourseList::set_has_science() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGetCourseList::clear_has_science() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGetCourseList::clear_science() {
  science_ = 0;
  clear_has_science();
}
inline ::google::protobuf::int32 sGetCourseList::science() const {
  return science_;
}
inline void sGetCourseList::set_science(::google::protobuf::int32 value) {
  set_has_science();
  science_ = value;
}

// required string res_path = 8;
inline bool sGetCourseList::has_res_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGetCourseList::set_has_res_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGetCourseList::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGetCourseList::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& sGetCourseList::res_path() const {
  return *res_path_;
}
inline void sGetCourseList::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void sGetCourseList::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void sGetCourseList::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetCourseList::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* sGetCourseList::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetCourseList::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetContent

// required int32 common = 1;
inline bool cGetContent::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetContent::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetContent::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetContent::clear_common() {
  common_ = 0;
  clear_has_common();
}
inline ::google::protobuf::int32 cGetContent::common() const {
  return common_;
}
inline void cGetContent::set_common(::google::protobuf::int32 value) {
  set_has_common();
  common_ = value;
}

// -------------------------------------------------------------------

// sGetContent

// required string course_list = 1;
inline bool sGetContent::has_course_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetContent::set_has_course_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetContent::clear_has_course_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetContent::clear_course_list() {
  if (course_list_ != &::google::protobuf::internal::kEmptyString) {
    course_list_->clear();
  }
  clear_has_course_list();
}
inline const ::std::string& sGetContent::course_list() const {
  return *course_list_;
}
inline void sGetContent::set_course_list(const ::std::string& value) {
  set_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    course_list_ = new ::std::string;
  }
  course_list_->assign(value);
}
inline void sGetContent::set_course_list(const char* value) {
  set_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    course_list_ = new ::std::string;
  }
  course_list_->assign(value);
}
inline void sGetContent::set_course_list(const char* value, size_t size) {
  set_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    course_list_ = new ::std::string;
  }
  course_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetContent::mutable_course_list() {
  set_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    course_list_ = new ::std::string;
  }
  return course_list_;
}
inline ::std::string* sGetContent::release_course_list() {
  clear_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_list_;
    course_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetContent::set_allocated_course_list(::std::string* course_list) {
  if (course_list_ != &::google::protobuf::internal::kEmptyString) {
    delete course_list_;
  }
  if (course_list) {
    set_has_course_list();
    course_list_ = course_list;
  } else {
    clear_has_course_list();
    course_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetClassList

// required int32 grade_id = 1;
inline bool cGetClassList::has_grade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetClassList::set_has_grade_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetClassList::clear_has_grade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetClassList::clear_grade_id() {
  grade_id_ = 0;
  clear_has_grade_id();
}
inline ::google::protobuf::int32 cGetClassList::grade_id() const {
  return grade_id_;
}
inline void cGetClassList::set_grade_id(::google::protobuf::int32 value) {
  set_has_grade_id();
  grade_id_ = value;
}

// -------------------------------------------------------------------

// sGetClassList

// required int32 class_id = 1;
inline bool sGetClassList::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetClassList::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetClassList::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetClassList::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 sGetClassList::class_id() const {
  return class_id_;
}
inline void sGetClassList::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required string class_name = 2;
inline bool sGetClassList::has_class_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetClassList::set_has_class_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetClassList::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetClassList::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& sGetClassList::class_name() const {
  return *class_name_;
}
inline void sGetClassList::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void sGetClassList::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void sGetClassList::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetClassList::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* sGetClassList::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetClassList::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetClassRoomList

// required string content = 1;
inline bool cGetClassRoomList::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetClassRoomList::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetClassRoomList::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetClassRoomList::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& cGetClassRoomList::content() const {
  return *content_;
}
inline void cGetClassRoomList::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void cGetClassRoomList::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void cGetClassRoomList::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cGetClassRoomList::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* cGetClassRoomList::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cGetClassRoomList::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sGetClassRoomList

// required int32 classroom_id = 1;
inline bool sGetClassRoomList::has_classroom_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetClassRoomList::set_has_classroom_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetClassRoomList::clear_has_classroom_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetClassRoomList::clear_classroom_id() {
  classroom_id_ = 0;
  clear_has_classroom_id();
}
inline ::google::protobuf::int32 sGetClassRoomList::classroom_id() const {
  return classroom_id_;
}
inline void sGetClassRoomList::set_classroom_id(::google::protobuf::int32 value) {
  set_has_classroom_id();
  classroom_id_ = value;
}

// required string classroom_name = 2;
inline bool sGetClassRoomList::has_classroom_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetClassRoomList::set_has_classroom_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetClassRoomList::clear_has_classroom_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetClassRoomList::clear_classroom_name() {
  if (classroom_name_ != &::google::protobuf::internal::kEmptyString) {
    classroom_name_->clear();
  }
  clear_has_classroom_name();
}
inline const ::std::string& sGetClassRoomList::classroom_name() const {
  return *classroom_name_;
}
inline void sGetClassRoomList::set_classroom_name(const ::std::string& value) {
  set_has_classroom_name();
  if (classroom_name_ == &::google::protobuf::internal::kEmptyString) {
    classroom_name_ = new ::std::string;
  }
  classroom_name_->assign(value);
}
inline void sGetClassRoomList::set_classroom_name(const char* value) {
  set_has_classroom_name();
  if (classroom_name_ == &::google::protobuf::internal::kEmptyString) {
    classroom_name_ = new ::std::string;
  }
  classroom_name_->assign(value);
}
inline void sGetClassRoomList::set_classroom_name(const char* value, size_t size) {
  set_has_classroom_name();
  if (classroom_name_ == &::google::protobuf::internal::kEmptyString) {
    classroom_name_ = new ::std::string;
  }
  classroom_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetClassRoomList::mutable_classroom_name() {
  set_has_classroom_name();
  if (classroom_name_ == &::google::protobuf::internal::kEmptyString) {
    classroom_name_ = new ::std::string;
  }
  return classroom_name_;
}
inline ::std::string* sGetClassRoomList::release_classroom_name() {
  clear_has_classroom_name();
  if (classroom_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = classroom_name_;
    classroom_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetClassRoomList::set_allocated_classroom_name(::std::string* classroom_name) {
  if (classroom_name_ != &::google::protobuf::internal::kEmptyString) {
    delete classroom_name_;
  }
  if (classroom_name) {
    set_has_classroom_name();
    classroom_name_ = classroom_name;
  } else {
    clear_has_classroom_name();
    classroom_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cSetContent

// required int32 class_id = 1;
inline bool cSetContent::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cSetContent::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cSetContent::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cSetContent::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 cSetContent::class_id() const {
  return class_id_;
}
inline void cSetContent::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// required int32 classroom_id = 2;
inline bool cSetContent::has_classroom_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cSetContent::set_has_classroom_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cSetContent::clear_has_classroom_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cSetContent::clear_classroom_id() {
  classroom_id_ = 0;
  clear_has_classroom_id();
}
inline ::google::protobuf::int32 cSetContent::classroom_id() const {
  return classroom_id_;
}
inline void cSetContent::set_classroom_id(::google::protobuf::int32 value) {
  set_has_classroom_id();
  classroom_id_ = value;
}

// required string course_list = 3;
inline bool cSetContent::has_course_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cSetContent::set_has_course_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cSetContent::clear_has_course_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cSetContent::clear_course_list() {
  if (course_list_ != &::google::protobuf::internal::kEmptyString) {
    course_list_->clear();
  }
  clear_has_course_list();
}
inline const ::std::string& cSetContent::course_list() const {
  return *course_list_;
}
inline void cSetContent::set_course_list(const ::std::string& value) {
  set_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    course_list_ = new ::std::string;
  }
  course_list_->assign(value);
}
inline void cSetContent::set_course_list(const char* value) {
  set_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    course_list_ = new ::std::string;
  }
  course_list_->assign(value);
}
inline void cSetContent::set_course_list(const char* value, size_t size) {
  set_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    course_list_ = new ::std::string;
  }
  course_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cSetContent::mutable_course_list() {
  set_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    course_list_ = new ::std::string;
  }
  return course_list_;
}
inline ::std::string* cSetContent::release_course_list() {
  clear_has_course_list();
  if (course_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = course_list_;
    course_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cSetContent::set_allocated_course_list(::std::string* course_list) {
  if (course_list_ != &::google::protobuf::internal::kEmptyString) {
    delete course_list_;
  }
  if (course_list) {
    set_has_course_list();
    course_list_ = course_list;
  } else {
    clear_has_course_list();
    course_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sSetContent

// required bool result = 1;
inline bool sSetContent::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sSetContent::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sSetContent::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sSetContent::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool sSetContent::result() const {
  return result_;
}
inline void sSetContent::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// required string msg = 2;
inline bool sSetContent::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sSetContent::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sSetContent::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sSetContent::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& sSetContent::msg() const {
  return *msg_;
}
inline void sSetContent::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetContent::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void sSetContent::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sSetContent::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* sSetContent::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sSetContent::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetStudentList

// required int32 class_id = 1;
inline bool cGetStudentList::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetStudentList::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetStudentList::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetStudentList::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 cGetStudentList::class_id() const {
  return class_id_;
}
inline void cGetStudentList::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// -------------------------------------------------------------------

// sGetStudentList

// required int32 id = 1;
inline bool sGetStudentList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetStudentList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetStudentList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetStudentList::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetStudentList::id() const {
  return id_;
}
inline void sGetStudentList::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool sGetStudentList::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetStudentList::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetStudentList::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetStudentList::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sGetStudentList::name() const {
  return *name_;
}
inline void sGetStudentList::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetStudentList::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetStudentList::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentList::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sGetStudentList::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentList::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string res_path = 3;
inline bool sGetStudentList::has_res_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetStudentList::set_has_res_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetStudentList::clear_has_res_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetStudentList::clear_res_path() {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    res_path_->clear();
  }
  clear_has_res_path();
}
inline const ::std::string& sGetStudentList::res_path() const {
  return *res_path_;
}
inline void sGetStudentList::set_res_path(const ::std::string& value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void sGetStudentList::set_res_path(const char* value) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(value);
}
inline void sGetStudentList::set_res_path(const char* value, size_t size) {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  res_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentList::mutable_res_path() {
  set_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    res_path_ = new ::std::string;
  }
  return res_path_;
}
inline ::std::string* sGetStudentList::release_res_path() {
  clear_has_res_path();
  if (res_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_path_;
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentList::set_allocated_res_path(::std::string* res_path) {
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (res_path) {
    set_has_res_path();
    res_path_ = res_path;
  } else {
    clear_has_res_path();
    res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetActiveStudentList

// required int32 id = 1;
inline bool cGetActiveStudentList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetActiveStudentList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetActiveStudentList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetActiveStudentList::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cGetActiveStudentList::id() const {
  return id_;
}
inline void cGetActiveStudentList::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// sGetActiveStudentList

// required int32 id = 1;
inline bool sGetActiveStudentList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetActiveStudentList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetActiveStudentList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetActiveStudentList::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetActiveStudentList::id() const {
  return id_;
}
inline void sGetActiveStudentList::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// sUpdateStudentStatus

// required int32 id = 1;
inline bool sUpdateStudentStatus::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sUpdateStudentStatus::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sUpdateStudentStatus::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sUpdateStudentStatus::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sUpdateStudentStatus::id() const {
  return id_;
}
inline void sUpdateStudentStatus::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// cGetStudentInfo

// required int32 id = 1;
inline bool cGetStudentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetStudentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetStudentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetStudentInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cGetStudentInfo::id() const {
  return id_;
}
inline void cGetStudentInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// sGetStudentInfo

// required int32 id = 1;
inline bool sGetStudentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetStudentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetStudentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetStudentInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetStudentInfo::id() const {
  return id_;
}
inline void sGetStudentInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string number = 2;
inline bool sGetStudentInfo::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetStudentInfo::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetStudentInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetStudentInfo::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& sGetStudentInfo::number() const {
  return *number_;
}
inline void sGetStudentInfo::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetStudentInfo::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetStudentInfo::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* sGetStudentInfo::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool sGetStudentInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetStudentInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetStudentInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetStudentInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sGetStudentInfo::name() const {
  return *name_;
}
inline void sGetStudentInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetStudentInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetStudentInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sGetStudentInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sex = 4;
inline bool sGetStudentInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetStudentInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetStudentInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetStudentInfo::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& sGetStudentInfo::sex() const {
  return *sex_;
}
inline void sGetStudentInfo::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetStudentInfo::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetStudentInfo::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* sGetStudentInfo::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string race = 5;
inline bool sGetStudentInfo::has_race() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGetStudentInfo::set_has_race() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGetStudentInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGetStudentInfo::clear_race() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    race_->clear();
  }
  clear_has_race();
}
inline const ::std::string& sGetStudentInfo::race() const {
  return *race_;
}
inline void sGetStudentInfo::set_race(const ::std::string& value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetStudentInfo::set_race(const char* value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetStudentInfo::set_race(const char* value, size_t size) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_race() {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  return race_;
}
inline ::std::string* sGetStudentInfo::release_race() {
  clear_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = race_;
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_race(::std::string* race) {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (race) {
    set_has_race();
    race_ = race;
  } else {
    clear_has_race();
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string birthday = 6;
inline bool sGetStudentInfo::has_birthday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGetStudentInfo::set_has_birthday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGetStudentInfo::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGetStudentInfo::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& sGetStudentInfo::birthday() const {
  return *birthday_;
}
inline void sGetStudentInfo::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetStudentInfo::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetStudentInfo::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* sGetStudentInfo::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string native = 7;
inline bool sGetStudentInfo::has_native() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGetStudentInfo::set_has_native() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGetStudentInfo::clear_has_native() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGetStudentInfo::clear_native() {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    native_->clear();
  }
  clear_has_native();
}
inline const ::std::string& sGetStudentInfo::native() const {
  return *native_;
}
inline void sGetStudentInfo::set_native(const ::std::string& value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetStudentInfo::set_native(const char* value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetStudentInfo::set_native(const char* value, size_t size) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_native() {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  return native_;
}
inline ::std::string* sGetStudentInfo::release_native() {
  clear_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = native_;
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_native(::std::string* native) {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    delete native_;
  }
  if (native) {
    set_has_native();
    native_ = native;
  } else {
    clear_has_native();
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string class_name = 8;
inline bool sGetStudentInfo::has_class_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGetStudentInfo::set_has_class_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGetStudentInfo::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGetStudentInfo::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& sGetStudentInfo::class_name() const {
  return *class_name_;
}
inline void sGetStudentInfo::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void sGetStudentInfo::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void sGetStudentInfo::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetStudentInfo::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* sGetStudentInfo::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetStudentInfo::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cGetTeacherInfo

// required int32 id = 1;
inline bool cGetTeacherInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cGetTeacherInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cGetTeacherInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cGetTeacherInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cGetTeacherInfo::id() const {
  return id_;
}
inline void cGetTeacherInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// sGetTeacherInfo

// required int32 id = 1;
inline bool sGetTeacherInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sGetTeacherInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sGetTeacherInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sGetTeacherInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sGetTeacherInfo::id() const {
  return id_;
}
inline void sGetTeacherInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string number = 2;
inline bool sGetTeacherInfo::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sGetTeacherInfo::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sGetTeacherInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sGetTeacherInfo::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& sGetTeacherInfo::number() const {
  return *number_;
}
inline void sGetTeacherInfo::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetTeacherInfo::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void sGetTeacherInfo::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* sGetTeacherInfo::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool sGetTeacherInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sGetTeacherInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sGetTeacherInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sGetTeacherInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sGetTeacherInfo::name() const {
  return *name_;
}
inline void sGetTeacherInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetTeacherInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sGetTeacherInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sGetTeacherInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sex = 4;
inline bool sGetTeacherInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sGetTeacherInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sGetTeacherInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sGetTeacherInfo::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& sGetTeacherInfo::sex() const {
  return *sex_;
}
inline void sGetTeacherInfo::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetTeacherInfo::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sGetTeacherInfo::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* sGetTeacherInfo::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string race = 5;
inline bool sGetTeacherInfo::has_race() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sGetTeacherInfo::set_has_race() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sGetTeacherInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sGetTeacherInfo::clear_race() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    race_->clear();
  }
  clear_has_race();
}
inline const ::std::string& sGetTeacherInfo::race() const {
  return *race_;
}
inline void sGetTeacherInfo::set_race(const ::std::string& value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetTeacherInfo::set_race(const char* value) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(value);
}
inline void sGetTeacherInfo::set_race(const char* value, size_t size) {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  race_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_race() {
  set_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    race_ = new ::std::string;
  }
  return race_;
}
inline ::std::string* sGetTeacherInfo::release_race() {
  clear_has_race();
  if (race_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = race_;
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_race(::std::string* race) {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (race) {
    set_has_race();
    race_ = race;
  } else {
    clear_has_race();
    race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string birthday = 6;
inline bool sGetTeacherInfo::has_birthday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sGetTeacherInfo::set_has_birthday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sGetTeacherInfo::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sGetTeacherInfo::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& sGetTeacherInfo::birthday() const {
  return *birthday_;
}
inline void sGetTeacherInfo::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetTeacherInfo::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void sGetTeacherInfo::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* sGetTeacherInfo::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string native = 7;
inline bool sGetTeacherInfo::has_native() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sGetTeacherInfo::set_has_native() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sGetTeacherInfo::clear_has_native() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sGetTeacherInfo::clear_native() {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    native_->clear();
  }
  clear_has_native();
}
inline const ::std::string& sGetTeacherInfo::native() const {
  return *native_;
}
inline void sGetTeacherInfo::set_native(const ::std::string& value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetTeacherInfo::set_native(const char* value) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(value);
}
inline void sGetTeacherInfo::set_native(const char* value, size_t size) {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  native_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_native() {
  set_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    native_ = new ::std::string;
  }
  return native_;
}
inline ::std::string* sGetTeacherInfo::release_native() {
  clear_has_native();
  if (native_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = native_;
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_native(::std::string* native) {
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    delete native_;
  }
  if (native) {
    set_has_native();
    native_ = native;
  } else {
    clear_has_native();
    native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string school_name = 8;
inline bool sGetTeacherInfo::has_school_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sGetTeacherInfo::set_has_school_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sGetTeacherInfo::clear_has_school_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sGetTeacherInfo::clear_school_name() {
  if (school_name_ != &::google::protobuf::internal::kEmptyString) {
    school_name_->clear();
  }
  clear_has_school_name();
}
inline const ::std::string& sGetTeacherInfo::school_name() const {
  return *school_name_;
}
inline void sGetTeacherInfo::set_school_name(const ::std::string& value) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(value);
}
inline void sGetTeacherInfo::set_school_name(const char* value) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(value);
}
inline void sGetTeacherInfo::set_school_name(const char* value, size_t size) {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  school_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sGetTeacherInfo::mutable_school_name() {
  set_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    school_name_ = new ::std::string;
  }
  return school_name_;
}
inline ::std::string* sGetTeacherInfo::release_school_name() {
  clear_has_school_name();
  if (school_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = school_name_;
    school_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sGetTeacherInfo::set_allocated_school_name(::std::string* school_name) {
  if (school_name_ != &::google::protobuf::internal::kEmptyString) {
    delete school_name_;
  }
  if (school_name) {
    set_has_school_name();
    school_name_ = school_name;
  } else {
    clear_has_school_name();
    school_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fprotocol_2eproto__INCLUDED
