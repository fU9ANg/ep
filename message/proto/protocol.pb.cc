// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* cLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* sLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* cLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* sLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetFuncList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetFuncList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetFuncList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetFuncList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cSetFunc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cSetFunc_reflection_ = NULL;
const ::google::protobuf::Descriptor* sSetFunc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sSetFunc_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetGradeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetGradeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetGradeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetGradeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetCourseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetCourseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetCourseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetCourseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetClassList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetClassList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetClassList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetClassList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetClassRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetClassRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetClassRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetClassRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cSetContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cSetContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* sSetContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sSetContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetStudentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetStudentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetStudentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetStudentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetActiveStudentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetActiveStudentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetActiveStudentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetActiveStudentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sUpdateStudentStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sUpdateStudentStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetStudentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetStudentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetStudentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetStudentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetTeacherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetTeacherInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetTeacherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetTeacherInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* cSetGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cSetGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* sSetGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sSetGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetPersonalBooksList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetPersonalBooksList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetServerAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetServerAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetServerAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetServerAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetPersonalBooksList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetPersonalBooksList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetPublicBooksList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetPublicBooksList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetPublicBooksList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetPublicBooksList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cUploadBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cUploadBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* sUploadBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sUploadBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* cDownloadFromPersonal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cDownloadFromPersonal_reflection_ = NULL;
const ::google::protobuf::Descriptor* sDownloadFromPersonal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sDownloadFromPersonal_reflection_ = NULL;
const ::google::protobuf::Descriptor* cDownloadFromPublic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cDownloadFromPublic_reflection_ = NULL;
const ::google::protobuf::Descriptor* sDownloadFromPublic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sDownloadFromPublic_reflection_ = NULL;
const ::google::protobuf::Descriptor* cTransferBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cTransferBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* sTransferBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sTransferBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* cPublish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cPublish_reflection_ = NULL;
const ::google::protobuf::Descriptor* sPublish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sPublish_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fprotocol_2eproto() {
  protobuf_AddDesc_proto_2fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/protocol.proto");
  GOOGLE_CHECK(file != NULL);
  cLogin_descriptor_ = file->message_type(0);
  static const int cLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cLogin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cLogin, passwd_),
  };
  cLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cLogin_descriptor_,
      cLogin::default_instance_,
      cLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cLogin));
  sLogin_descriptor_ = file->message_type(1);
  static const int sLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogin, result_),
  };
  sLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sLogin_descriptor_,
      sLogin::default_instance_,
      sLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sLogin));
  cLogout_descriptor_ = file->message_type(2);
  static const int cLogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cLogout, common_),
  };
  cLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cLogout_descriptor_,
      cLogout::default_instance_,
      cLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cLogout));
  sLogout_descriptor_ = file->message_type(3);
  static const int sLogout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogout, login_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogout, num_),
  };
  sLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sLogout_descriptor_,
      sLogout::default_instance_,
      sLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sLogout));
  cGetFuncList_descriptor_ = file->message_type(4);
  static const int cGetFuncList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetFuncList, content_),
  };
  cGetFuncList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetFuncList_descriptor_,
      cGetFuncList::default_instance_,
      cGetFuncList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetFuncList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetFuncList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetFuncList));
  sGetFuncList_descriptor_ = file->message_type(5);
  static const int sGetFuncList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetFuncList, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetFuncList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetFuncList, res_path_),
  };
  sGetFuncList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetFuncList_descriptor_,
      sGetFuncList::default_instance_,
      sGetFuncList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetFuncList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetFuncList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetFuncList));
  cSetFunc_descriptor_ = file->message_type(6);
  static const int cSetFunc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetFunc, func_type_),
  };
  cSetFunc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cSetFunc_descriptor_,
      cSetFunc::default_instance_,
      cSetFunc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetFunc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetFunc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cSetFunc));
  sSetFunc_descriptor_ = file->message_type(7);
  static const int sSetFunc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetFunc, result_),
  };
  sSetFunc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sSetFunc_descriptor_,
      sSetFunc::default_instance_,
      sSetFunc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetFunc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetFunc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sSetFunc));
  cGetGradeList_descriptor_ = file->message_type(8);
  static const int cGetGradeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetGradeList, content_),
  };
  cGetGradeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetGradeList_descriptor_,
      cGetGradeList::default_instance_,
      cGetGradeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetGradeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetGradeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetGradeList));
  sGetGradeList_descriptor_ = file->message_type(9);
  static const int sGetGradeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetGradeList, grade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetGradeList, grade_name_),
  };
  sGetGradeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetGradeList_descriptor_,
      sGetGradeList::default_instance_,
      sGetGradeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetGradeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetGradeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetGradeList));
  cGetCourseList_descriptor_ = file->message_type(10);
  static const int cGetCourseList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetCourseList, grade_id_),
  };
  cGetCourseList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetCourseList_descriptor_,
      cGetCourseList::default_instance_,
      cGetCourseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetCourseList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetCourseList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetCourseList));
  sGetCourseList_descriptor_ = file->message_type(11);
  static const int sGetCourseList_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, course_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, course_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, art_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, community_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, science_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, res_path_),
  };
  sGetCourseList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetCourseList_descriptor_,
      sGetCourseList::default_instance_,
      sGetCourseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCourseList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetCourseList));
  cGetContent_descriptor_ = file->message_type(12);
  static const int cGetContent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetContent, common_),
  };
  cGetContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetContent_descriptor_,
      cGetContent::default_instance_,
      cGetContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetContent));
  sGetContent_descriptor_ = file->message_type(13);
  static const int sGetContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetContent, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetContent, course_list_),
  };
  sGetContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetContent_descriptor_,
      sGetContent::default_instance_,
      sGetContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetContent));
  cGetClassList_descriptor_ = file->message_type(14);
  static const int cGetClassList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetClassList, grade_id_),
  };
  cGetClassList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetClassList_descriptor_,
      cGetClassList::default_instance_,
      cGetClassList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetClassList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetClassList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetClassList));
  sGetClassList_descriptor_ = file->message_type(15);
  static const int sGetClassList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetClassList, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetClassList, class_name_),
  };
  sGetClassList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetClassList_descriptor_,
      sGetClassList::default_instance_,
      sGetClassList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetClassList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetClassList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetClassList));
  cGetClassRoomList_descriptor_ = file->message_type(16);
  static const int cGetClassRoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetClassRoomList, content_),
  };
  cGetClassRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetClassRoomList_descriptor_,
      cGetClassRoomList::default_instance_,
      cGetClassRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetClassRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetClassRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetClassRoomList));
  sGetClassRoomList_descriptor_ = file->message_type(17);
  static const int sGetClassRoomList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetClassRoomList, classroom_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetClassRoomList, classroom_name_),
  };
  sGetClassRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetClassRoomList_descriptor_,
      sGetClassRoomList::default_instance_,
      sGetClassRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetClassRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetClassRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetClassRoomList));
  cSetContent_descriptor_ = file->message_type(18);
  static const int cSetContent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetContent, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetContent, classroom_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetContent, course_list_),
  };
  cSetContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cSetContent_descriptor_,
      cSetContent::default_instance_,
      cSetContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cSetContent));
  sSetContent_descriptor_ = file->message_type(19);
  static const int sSetContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetContent, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetContent, msg_),
  };
  sSetContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sSetContent_descriptor_,
      sSetContent::default_instance_,
      sSetContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sSetContent));
  cGetStudentList_descriptor_ = file->message_type(20);
  static const int cGetStudentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetStudentList, class_id_),
  };
  cGetStudentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetStudentList_descriptor_,
      cGetStudentList::default_instance_,
      cGetStudentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetStudentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetStudentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetStudentList));
  sGetStudentList_descriptor_ = file->message_type(21);
  static const int sGetStudentList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentList, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentList, res_path_),
  };
  sGetStudentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetStudentList_descriptor_,
      sGetStudentList::default_instance_,
      sGetStudentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetStudentList));
  cGetActiveStudentList_descriptor_ = file->message_type(22);
  static const int cGetActiveStudentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetActiveStudentList, class_id_),
  };
  cGetActiveStudentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetActiveStudentList_descriptor_,
      cGetActiveStudentList::default_instance_,
      cGetActiveStudentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetActiveStudentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetActiveStudentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetActiveStudentList));
  sGetActiveStudentList_descriptor_ = file->message_type(23);
  static const int sGetActiveStudentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetActiveStudentList, id_),
  };
  sGetActiveStudentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetActiveStudentList_descriptor_,
      sGetActiveStudentList::default_instance_,
      sGetActiveStudentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetActiveStudentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetActiveStudentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetActiveStudentList));
  sUpdateStudentStatus_descriptor_ = file->message_type(24);
  static const int sUpdateStudentStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUpdateStudentStatus, student_id_),
  };
  sUpdateStudentStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sUpdateStudentStatus_descriptor_,
      sUpdateStudentStatus::default_instance_,
      sUpdateStudentStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUpdateStudentStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUpdateStudentStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sUpdateStudentStatus));
  cGetStudentInfo_descriptor_ = file->message_type(25);
  static const int cGetStudentInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetStudentInfo, id_),
  };
  cGetStudentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetStudentInfo_descriptor_,
      cGetStudentInfo::default_instance_,
      cGetStudentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetStudentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetStudentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetStudentInfo));
  sGetStudentInfo_descriptor_ = file->message_type(26);
  static const int sGetStudentInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, class_name_),
  };
  sGetStudentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetStudentInfo_descriptor_,
      sGetStudentInfo::default_instance_,
      sGetStudentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetStudentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetStudentInfo));
  cGetTeacherInfo_descriptor_ = file->message_type(27);
  static const int cGetTeacherInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetTeacherInfo, id_),
  };
  cGetTeacherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetTeacherInfo_descriptor_,
      cGetTeacherInfo::default_instance_,
      cGetTeacherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetTeacherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetTeacherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetTeacherInfo));
  sGetTeacherInfo_descriptor_ = file->message_type(28);
  static const int sGetTeacherInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, school_name_),
  };
  sGetTeacherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetTeacherInfo_descriptor_,
      sGetTeacherInfo::default_instance_,
      sGetTeacherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTeacherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetTeacherInfo));
  cSetGroup_descriptor_ = file->message_type(29);
  static const int cSetGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetGroup, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetGroup, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetGroup, student_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetGroup, student_list_),
  };
  cSetGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cSetGroup_descriptor_,
      cSetGroup::default_instance_,
      cSetGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cSetGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cSetGroup));
  sSetGroup_descriptor_ = file->message_type(30);
  static const int sSetGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetGroup, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetGroup, msg_),
  };
  sSetGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sSetGroup_descriptor_,
      sSetGroup::default_instance_,
      sSetGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sSetGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sSetGroup));
  cGetPersonalBooksList_descriptor_ = file->message_type(31);
  static const int cGetPersonalBooksList_offsets_[1] = {
  };
  cGetPersonalBooksList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetPersonalBooksList_descriptor_,
      cGetPersonalBooksList::default_instance_,
      cGetPersonalBooksList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetPersonalBooksList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetPersonalBooksList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetPersonalBooksList));
  cGetServerAddr_descriptor_ = file->message_type(32);
  static const int cGetServerAddr_offsets_[1] = {
  };
  cGetServerAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetServerAddr_descriptor_,
      cGetServerAddr::default_instance_,
      cGetServerAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetServerAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetServerAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetServerAddr));
  sGetServerAddr_descriptor_ = file->message_type(33);
  static const int sGetServerAddr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetServerAddr, serv_addr_),
  };
  sGetServerAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetServerAddr_descriptor_,
      sGetServerAddr::default_instance_,
      sGetServerAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetServerAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetServerAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetServerAddr));
  sGetPersonalBooksList_descriptor_ = file->message_type(34);
  static const int sGetPersonalBooksList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPersonalBooksList, book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPersonalBooksList, book_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPersonalBooksList, book_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPersonalBooksList, res_path_),
  };
  sGetPersonalBooksList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetPersonalBooksList_descriptor_,
      sGetPersonalBooksList::default_instance_,
      sGetPersonalBooksList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPersonalBooksList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPersonalBooksList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetPersonalBooksList));
  cGetPublicBooksList_descriptor_ = file->message_type(35);
  static const int cGetPublicBooksList_offsets_[1] = {
  };
  cGetPublicBooksList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetPublicBooksList_descriptor_,
      cGetPublicBooksList::default_instance_,
      cGetPublicBooksList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetPublicBooksList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetPublicBooksList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetPublicBooksList));
  sGetPublicBooksList_descriptor_ = file->message_type(36);
  static const int sGetPublicBooksList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPublicBooksList, book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPublicBooksList, book_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPublicBooksList, book_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPublicBooksList, res_path_),
  };
  sGetPublicBooksList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetPublicBooksList_descriptor_,
      sGetPublicBooksList::default_instance_,
      sGetPublicBooksList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPublicBooksList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetPublicBooksList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetPublicBooksList));
  cUploadBook_descriptor_ = file->message_type(37);
  static const int cUploadBook_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, book_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, book_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, belongs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, art_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, community_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, science_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, res_path_),
  };
  cUploadBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cUploadBook_descriptor_,
      cUploadBook::default_instance_,
      cUploadBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUploadBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cUploadBook));
  sUploadBook_descriptor_ = file->message_type(38);
  static const int sUploadBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUploadBook, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUploadBook, msg_),
  };
  sUploadBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sUploadBook_descriptor_,
      sUploadBook::default_instance_,
      sUploadBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUploadBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUploadBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sUploadBook));
  cDownloadFromPersonal_descriptor_ = file->message_type(39);
  static const int cDownloadFromPersonal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDownloadFromPersonal, book_id_),
  };
  cDownloadFromPersonal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cDownloadFromPersonal_descriptor_,
      cDownloadFromPersonal::default_instance_,
      cDownloadFromPersonal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDownloadFromPersonal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDownloadFromPersonal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cDownloadFromPersonal));
  sDownloadFromPersonal_descriptor_ = file->message_type(40);
  static const int sDownloadFromPersonal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDownloadFromPersonal, down_addr_),
  };
  sDownloadFromPersonal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sDownloadFromPersonal_descriptor_,
      sDownloadFromPersonal::default_instance_,
      sDownloadFromPersonal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDownloadFromPersonal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDownloadFromPersonal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sDownloadFromPersonal));
  cDownloadFromPublic_descriptor_ = file->message_type(41);
  static const int cDownloadFromPublic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDownloadFromPublic, book_id_),
  };
  cDownloadFromPublic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cDownloadFromPublic_descriptor_,
      cDownloadFromPublic::default_instance_,
      cDownloadFromPublic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDownloadFromPublic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDownloadFromPublic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cDownloadFromPublic));
  sDownloadFromPublic_descriptor_ = file->message_type(42);
  static const int sDownloadFromPublic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDownloadFromPublic, down_addr_),
  };
  sDownloadFromPublic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sDownloadFromPublic_descriptor_,
      sDownloadFromPublic::default_instance_,
      sDownloadFromPublic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDownloadFromPublic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDownloadFromPublic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sDownloadFromPublic));
  cTransferBook_descriptor_ = file->message_type(43);
  static const int cTransferBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTransferBook, book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTransferBook, account_),
  };
  cTransferBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cTransferBook_descriptor_,
      cTransferBook::default_instance_,
      cTransferBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTransferBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTransferBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cTransferBook));
  sTransferBook_descriptor_ = file->message_type(44);
  static const int sTransferBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sTransferBook, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sTransferBook, msg_),
  };
  sTransferBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sTransferBook_descriptor_,
      sTransferBook::default_instance_,
      sTransferBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sTransferBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sTransferBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sTransferBook));
  cPublish_descriptor_ = file->message_type(45);
  static const int cPublish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cPublish, book_id_),
  };
  cPublish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cPublish_descriptor_,
      cPublish::default_instance_,
      cPublish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cPublish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cPublish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cPublish));
  sPublish_descriptor_ = file->message_type(46);
  static const int sPublish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sPublish, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sPublish, msg_),
  };
  sPublish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sPublish_descriptor_,
      sPublish::default_instance_,
      sPublish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sPublish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sPublish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sPublish));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cLogin_descriptor_, &cLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sLogin_descriptor_, &sLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cLogout_descriptor_, &cLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sLogout_descriptor_, &sLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetFuncList_descriptor_, &cGetFuncList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetFuncList_descriptor_, &sGetFuncList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cSetFunc_descriptor_, &cSetFunc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sSetFunc_descriptor_, &sSetFunc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetGradeList_descriptor_, &cGetGradeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetGradeList_descriptor_, &sGetGradeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetCourseList_descriptor_, &cGetCourseList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetCourseList_descriptor_, &sGetCourseList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetContent_descriptor_, &cGetContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetContent_descriptor_, &sGetContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetClassList_descriptor_, &cGetClassList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetClassList_descriptor_, &sGetClassList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetClassRoomList_descriptor_, &cGetClassRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetClassRoomList_descriptor_, &sGetClassRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cSetContent_descriptor_, &cSetContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sSetContent_descriptor_, &sSetContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetStudentList_descriptor_, &cGetStudentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetStudentList_descriptor_, &sGetStudentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetActiveStudentList_descriptor_, &cGetActiveStudentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetActiveStudentList_descriptor_, &sGetActiveStudentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sUpdateStudentStatus_descriptor_, &sUpdateStudentStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetStudentInfo_descriptor_, &cGetStudentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetStudentInfo_descriptor_, &sGetStudentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetTeacherInfo_descriptor_, &cGetTeacherInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetTeacherInfo_descriptor_, &sGetTeacherInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cSetGroup_descriptor_, &cSetGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sSetGroup_descriptor_, &sSetGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetPersonalBooksList_descriptor_, &cGetPersonalBooksList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetServerAddr_descriptor_, &cGetServerAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetServerAddr_descriptor_, &sGetServerAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetPersonalBooksList_descriptor_, &sGetPersonalBooksList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetPublicBooksList_descriptor_, &cGetPublicBooksList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetPublicBooksList_descriptor_, &sGetPublicBooksList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cUploadBook_descriptor_, &cUploadBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sUploadBook_descriptor_, &sUploadBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cDownloadFromPersonal_descriptor_, &cDownloadFromPersonal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sDownloadFromPersonal_descriptor_, &sDownloadFromPersonal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cDownloadFromPublic_descriptor_, &cDownloadFromPublic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sDownloadFromPublic_descriptor_, &sDownloadFromPublic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cTransferBook_descriptor_, &cTransferBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sTransferBook_descriptor_, &sTransferBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cPublish_descriptor_, &cPublish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sPublish_descriptor_, &sPublish::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fprotocol_2eproto() {
  delete cLogin::default_instance_;
  delete cLogin_reflection_;
  delete sLogin::default_instance_;
  delete sLogin_reflection_;
  delete cLogout::default_instance_;
  delete cLogout_reflection_;
  delete sLogout::default_instance_;
  delete sLogout_reflection_;
  delete cGetFuncList::default_instance_;
  delete cGetFuncList_reflection_;
  delete sGetFuncList::default_instance_;
  delete sGetFuncList_reflection_;
  delete cSetFunc::default_instance_;
  delete cSetFunc_reflection_;
  delete sSetFunc::default_instance_;
  delete sSetFunc_reflection_;
  delete cGetGradeList::default_instance_;
  delete cGetGradeList_reflection_;
  delete sGetGradeList::default_instance_;
  delete sGetGradeList_reflection_;
  delete cGetCourseList::default_instance_;
  delete cGetCourseList_reflection_;
  delete sGetCourseList::default_instance_;
  delete sGetCourseList_reflection_;
  delete cGetContent::default_instance_;
  delete cGetContent_reflection_;
  delete sGetContent::default_instance_;
  delete sGetContent_reflection_;
  delete cGetClassList::default_instance_;
  delete cGetClassList_reflection_;
  delete sGetClassList::default_instance_;
  delete sGetClassList_reflection_;
  delete cGetClassRoomList::default_instance_;
  delete cGetClassRoomList_reflection_;
  delete sGetClassRoomList::default_instance_;
  delete sGetClassRoomList_reflection_;
  delete cSetContent::default_instance_;
  delete cSetContent_reflection_;
  delete sSetContent::default_instance_;
  delete sSetContent_reflection_;
  delete cGetStudentList::default_instance_;
  delete cGetStudentList_reflection_;
  delete sGetStudentList::default_instance_;
  delete sGetStudentList_reflection_;
  delete cGetActiveStudentList::default_instance_;
  delete cGetActiveStudentList_reflection_;
  delete sGetActiveStudentList::default_instance_;
  delete sGetActiveStudentList_reflection_;
  delete sUpdateStudentStatus::default_instance_;
  delete sUpdateStudentStatus_reflection_;
  delete cGetStudentInfo::default_instance_;
  delete cGetStudentInfo_reflection_;
  delete sGetStudentInfo::default_instance_;
  delete sGetStudentInfo_reflection_;
  delete cGetTeacherInfo::default_instance_;
  delete cGetTeacherInfo_reflection_;
  delete sGetTeacherInfo::default_instance_;
  delete sGetTeacherInfo_reflection_;
  delete cSetGroup::default_instance_;
  delete cSetGroup_reflection_;
  delete sSetGroup::default_instance_;
  delete sSetGroup_reflection_;
  delete cGetPersonalBooksList::default_instance_;
  delete cGetPersonalBooksList_reflection_;
  delete cGetServerAddr::default_instance_;
  delete cGetServerAddr_reflection_;
  delete sGetServerAddr::default_instance_;
  delete sGetServerAddr_reflection_;
  delete sGetPersonalBooksList::default_instance_;
  delete sGetPersonalBooksList_reflection_;
  delete cGetPublicBooksList::default_instance_;
  delete cGetPublicBooksList_reflection_;
  delete sGetPublicBooksList::default_instance_;
  delete sGetPublicBooksList_reflection_;
  delete cUploadBook::default_instance_;
  delete cUploadBook_reflection_;
  delete sUploadBook::default_instance_;
  delete sUploadBook_reflection_;
  delete cDownloadFromPersonal::default_instance_;
  delete cDownloadFromPersonal_reflection_;
  delete sDownloadFromPersonal::default_instance_;
  delete sDownloadFromPersonal_reflection_;
  delete cDownloadFromPublic::default_instance_;
  delete cDownloadFromPublic_reflection_;
  delete sDownloadFromPublic::default_instance_;
  delete sDownloadFromPublic_reflection_;
  delete cTransferBook::default_instance_;
  delete cTransferBook_reflection_;
  delete sTransferBook::default_instance_;
  delete sTransferBook_reflection_;
  delete cPublish::default_instance_;
  delete cPublish_reflection_;
  delete sPublish::default_instance_;
  delete sPublish_reflection_;
}

void protobuf_AddDesc_proto_2fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto/protocol.proto\"7\n\006cLogin\022\014\n\004type"
    "\030\001 \002(\005\022\017\n\007account\030\002 \002(\t\022\016\n\006passwd\030\003 \002(\t\""
    "\030\n\006sLogin\022\016\n\006result\030\001 \002(\010\"\031\n\007cLogout\022\016\n\006"
    "common\030\001 \002(\005\"*\n\007sLogout\022\022\n\nlogin_type\030\001 "
    "\002(\005\022\013\n\003num\030\002 \002(\t\"\037\n\014cGetFuncList\022\017\n\007cont"
    "ent\030\001 \002(\t\":\n\014sGetFuncList\022\n\n\002id\030\003 \002(\005\022\014\n"
    "\004name\030\001 \002(\t\022\020\n\010res_path\030\002 \002(\t\"\035\n\010cSetFun"
    "c\022\021\n\tfunc_type\030\001 \002(\005\"\032\n\010sSetFunc\022\016\n\006resu"
    "lt\030\001 \002(\010\" \n\rcGetGradeList\022\017\n\007content\030\001 \002"
    "(\005\"5\n\rsGetGradeList\022\020\n\010grade_id\030\001 \002(\005\022\022\n"
    "\ngrade_name\030\002 \002(\t\"\"\n\016cGetCourseList\022\020\n\010g"
    "rade_id\030\001 \002(\005\"\235\001\n\016sGetCourseList\022\021\n\tcour"
    "se_id\030\001 \002(\005\022\023\n\013course_name\030\002 \002(\t\022\020\n\010lang"
    "uage\030\003 \002(\005\022\013\n\003art\030\004 \002(\005\022\021\n\tcommunity\030\005 \002"
    "(\005\022\016\n\006health\030\006 \002(\005\022\017\n\007science\030\007 \002(\005\022\020\n\010r"
    "es_path\030\010 \002(\t\"\035\n\013cGetContent\022\016\n\006common\030\001"
    " \002(\t\"2\n\013sGetContent\022\016\n\006result\030\001 \002(\010\022\023\n\013c"
    "ourse_list\030\002 \002(\t\"!\n\rcGetClassList\022\020\n\010gra"
    "de_id\030\001 \002(\005\"5\n\rsGetClassList\022\020\n\010class_id"
    "\030\001 \002(\005\022\022\n\nclass_name\030\002 \002(\t\"$\n\021cGetClassR"
    "oomList\022\017\n\007content\030\001 \002(\t\"A\n\021sGetClassRoo"
    "mList\022\024\n\014classroom_id\030\001 \002(\005\022\026\n\016classroom"
    "_name\030\002 \002(\t\"J\n\013cSetContent\022\020\n\010class_id\030\001"
    " \002(\005\022\024\n\014classroom_id\030\002 \002(\005\022\023\n\013course_lis"
    "t\030\003 \002(\t\"*\n\013sSetContent\022\016\n\006result\030\001 \002(\010\022\013"
    "\n\003msg\030\002 \002(\t\"#\n\017cGetStudentList\022\020\n\010class_"
    "id\030\001 \002(\005\"=\n\017sGetStudentList\022\n\n\002id\030\001 \002(\005\022"
    "\014\n\004name\030\002 \002(\t\022\020\n\010res_path\030\003 \002(\t\")\n\025cGetA"
    "ctiveStudentList\022\020\n\010class_id\030\001 \002(\005\"#\n\025sG"
    "etActiveStudentList\022\n\n\002id\030\001 \002(\005\"*\n\024sUpda"
    "teStudentStatus\022\022\n\nstudent_id\030\001 \002(\005\"\035\n\017c"
    "GetStudentInfo\022\n\n\002id\030\001 \002(\005\"\214\001\n\017sGetStude"
    "ntInfo\022\n\n\002id\030\001 \002(\005\022\016\n\006number\030\002 \002(\t\022\014\n\004na"
    "me\030\003 \002(\t\022\013\n\003sex\030\004 \002(\t\022\014\n\004race\030\005 \002(\t\022\020\n\010b"
    "irthday\030\006 \002(\t\022\016\n\006native\030\007 \002(\t\022\022\n\nclass_n"
    "ame\030\010 \002(\t\"\035\n\017cGetTeacherInfo\022\n\n\002id\030\001 \002(\005"
    "\"\215\001\n\017sGetTeacherInfo\022\n\n\002id\030\001 \002(\005\022\016\n\006numb"
    "er\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\013\n\003sex\030\004 \002(\t\022\014\n\004r"
    "ace\030\005 \002(\t\022\020\n\010birthday\030\006 \002(\t\022\016\n\006native\030\007 "
    "\002(\t\022\023\n\013school_name\030\010 \002(\t\"\\\n\tcSetGroup\022\020\n"
    "\010group_id\030\001 \002(\005\022\022\n\ngroup_name\030\002 \002(\t\022\023\n\013s"
    "tudent_cnt\030\004 \002(\005\022\024\n\014student_list\030\003 \002(\t\"("
    "\n\tsSetGroup\022\016\n\006result\030\001 \002(\010\022\013\n\003msg\030\002 \002(\t"
    "\"\027\n\025cGetPersonalBooksList\"\020\n\016cGetServerA"
    "ddr\"#\n\016sGetServerAddr\022\021\n\tserv_addr\030\001 \002(\t"
    "\"`\n\025sGetPersonalBooksList\022\017\n\007book_id\030\001 \002"
    "(\005\022\021\n\tbook_name\030\002 \002(\t\022\021\n\tbook_type\030\004 \002(\005"
    "\022\020\n\010res_path\030\003 \002(\t\"\025\n\023cGetPublicBooksLis"
    "t\"^\n\023sGetPublicBooksList\022\017\n\007book_id\030\001 \002("
    "\005\022\021\n\tbook_name\030\002 \002(\t\022\021\n\tbook_type\030\004 \002(\005\022"
    "\020\n\010res_path\030\003 \002(\t\"\267\001\n\013cUploadBook\022\021\n\tboo"
    "k_name\030\001 \002(\t\022\021\n\tbook_type\030\002 \002(\005\022\014\n\004time\030"
    "\003 \002(\t\022\017\n\007belongs\030\004 \002(\005\022\013\n\003art\030\005 \002(\005\022\020\n\010l"
    "anguage\030\006 \002(\005\022\021\n\tcommunity\030\007 \002(\005\022\016\n\006heal"
    "th\030\010 \002(\005\022\017\n\007science\030\t \002(\005\022\020\n\010res_path\030\n "
    "\002(\t\"*\n\013sUploadBook\022\016\n\006result\030\001 \002(\010\022\013\n\003ms"
    "g\030\002 \002(\t\"(\n\025cDownloadFromPersonal\022\017\n\007book"
    "_id\030\001 \002(\005\"*\n\025sDownloadFromPersonal\022\021\n\tdo"
    "wn_addr\030\001 \002(\t\"&\n\023cDownloadFromPublic\022\017\n\007"
    "book_id\030\001 \002(\005\"(\n\023sDownloadFromPublic\022\021\n\t"
    "down_addr\030\001 \002(\t\"1\n\rcTransferBook\022\017\n\007book"
    "_id\030\001 \002(\005\022\017\n\007account\030\002 \002(\t\",\n\rsTransferB"
    "ook\022\016\n\006result\030\001 \002(\010\022\013\n\003msg\030\002 \002(\t\"\033\n\010cPub"
    "lish\022\017\n\007book_id\030\001 \002(\005\"\'\n\010sPublish\022\016\n\006res"
    "ult\030\001 \002(\010\022\013\n\003msg\030\002 \002(\t", 2582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/protocol.proto", &protobuf_RegisterTypes);
  cLogin::default_instance_ = new cLogin();
  sLogin::default_instance_ = new sLogin();
  cLogout::default_instance_ = new cLogout();
  sLogout::default_instance_ = new sLogout();
  cGetFuncList::default_instance_ = new cGetFuncList();
  sGetFuncList::default_instance_ = new sGetFuncList();
  cSetFunc::default_instance_ = new cSetFunc();
  sSetFunc::default_instance_ = new sSetFunc();
  cGetGradeList::default_instance_ = new cGetGradeList();
  sGetGradeList::default_instance_ = new sGetGradeList();
  cGetCourseList::default_instance_ = new cGetCourseList();
  sGetCourseList::default_instance_ = new sGetCourseList();
  cGetContent::default_instance_ = new cGetContent();
  sGetContent::default_instance_ = new sGetContent();
  cGetClassList::default_instance_ = new cGetClassList();
  sGetClassList::default_instance_ = new sGetClassList();
  cGetClassRoomList::default_instance_ = new cGetClassRoomList();
  sGetClassRoomList::default_instance_ = new sGetClassRoomList();
  cSetContent::default_instance_ = new cSetContent();
  sSetContent::default_instance_ = new sSetContent();
  cGetStudentList::default_instance_ = new cGetStudentList();
  sGetStudentList::default_instance_ = new sGetStudentList();
  cGetActiveStudentList::default_instance_ = new cGetActiveStudentList();
  sGetActiveStudentList::default_instance_ = new sGetActiveStudentList();
  sUpdateStudentStatus::default_instance_ = new sUpdateStudentStatus();
  cGetStudentInfo::default_instance_ = new cGetStudentInfo();
  sGetStudentInfo::default_instance_ = new sGetStudentInfo();
  cGetTeacherInfo::default_instance_ = new cGetTeacherInfo();
  sGetTeacherInfo::default_instance_ = new sGetTeacherInfo();
  cSetGroup::default_instance_ = new cSetGroup();
  sSetGroup::default_instance_ = new sSetGroup();
  cGetPersonalBooksList::default_instance_ = new cGetPersonalBooksList();
  cGetServerAddr::default_instance_ = new cGetServerAddr();
  sGetServerAddr::default_instance_ = new sGetServerAddr();
  sGetPersonalBooksList::default_instance_ = new sGetPersonalBooksList();
  cGetPublicBooksList::default_instance_ = new cGetPublicBooksList();
  sGetPublicBooksList::default_instance_ = new sGetPublicBooksList();
  cUploadBook::default_instance_ = new cUploadBook();
  sUploadBook::default_instance_ = new sUploadBook();
  cDownloadFromPersonal::default_instance_ = new cDownloadFromPersonal();
  sDownloadFromPersonal::default_instance_ = new sDownloadFromPersonal();
  cDownloadFromPublic::default_instance_ = new cDownloadFromPublic();
  sDownloadFromPublic::default_instance_ = new sDownloadFromPublic();
  cTransferBook::default_instance_ = new cTransferBook();
  sTransferBook::default_instance_ = new sTransferBook();
  cPublish::default_instance_ = new cPublish();
  sPublish::default_instance_ = new sPublish();
  cLogin::default_instance_->InitAsDefaultInstance();
  sLogin::default_instance_->InitAsDefaultInstance();
  cLogout::default_instance_->InitAsDefaultInstance();
  sLogout::default_instance_->InitAsDefaultInstance();
  cGetFuncList::default_instance_->InitAsDefaultInstance();
  sGetFuncList::default_instance_->InitAsDefaultInstance();
  cSetFunc::default_instance_->InitAsDefaultInstance();
  sSetFunc::default_instance_->InitAsDefaultInstance();
  cGetGradeList::default_instance_->InitAsDefaultInstance();
  sGetGradeList::default_instance_->InitAsDefaultInstance();
  cGetCourseList::default_instance_->InitAsDefaultInstance();
  sGetCourseList::default_instance_->InitAsDefaultInstance();
  cGetContent::default_instance_->InitAsDefaultInstance();
  sGetContent::default_instance_->InitAsDefaultInstance();
  cGetClassList::default_instance_->InitAsDefaultInstance();
  sGetClassList::default_instance_->InitAsDefaultInstance();
  cGetClassRoomList::default_instance_->InitAsDefaultInstance();
  sGetClassRoomList::default_instance_->InitAsDefaultInstance();
  cSetContent::default_instance_->InitAsDefaultInstance();
  sSetContent::default_instance_->InitAsDefaultInstance();
  cGetStudentList::default_instance_->InitAsDefaultInstance();
  sGetStudentList::default_instance_->InitAsDefaultInstance();
  cGetActiveStudentList::default_instance_->InitAsDefaultInstance();
  sGetActiveStudentList::default_instance_->InitAsDefaultInstance();
  sUpdateStudentStatus::default_instance_->InitAsDefaultInstance();
  cGetStudentInfo::default_instance_->InitAsDefaultInstance();
  sGetStudentInfo::default_instance_->InitAsDefaultInstance();
  cGetTeacherInfo::default_instance_->InitAsDefaultInstance();
  sGetTeacherInfo::default_instance_->InitAsDefaultInstance();
  cSetGroup::default_instance_->InitAsDefaultInstance();
  sSetGroup::default_instance_->InitAsDefaultInstance();
  cGetPersonalBooksList::default_instance_->InitAsDefaultInstance();
  cGetServerAddr::default_instance_->InitAsDefaultInstance();
  sGetServerAddr::default_instance_->InitAsDefaultInstance();
  sGetPersonalBooksList::default_instance_->InitAsDefaultInstance();
  cGetPublicBooksList::default_instance_->InitAsDefaultInstance();
  sGetPublicBooksList::default_instance_->InitAsDefaultInstance();
  cUploadBook::default_instance_->InitAsDefaultInstance();
  sUploadBook::default_instance_->InitAsDefaultInstance();
  cDownloadFromPersonal::default_instance_->InitAsDefaultInstance();
  sDownloadFromPersonal::default_instance_->InitAsDefaultInstance();
  cDownloadFromPublic::default_instance_->InitAsDefaultInstance();
  sDownloadFromPublic::default_instance_->InitAsDefaultInstance();
  cTransferBook::default_instance_->InitAsDefaultInstance();
  sTransferBook::default_instance_->InitAsDefaultInstance();
  cPublish::default_instance_->InitAsDefaultInstance();
  sPublish::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fprotocol_2eproto {
  StaticDescriptorInitializer_proto_2fprotocol_2eproto() {
    protobuf_AddDesc_proto_2fprotocol_2eproto();
  }
} static_descriptor_initializer_proto_2fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int cLogin::kTypeFieldNumber;
const int cLogin::kAccountFieldNumber;
const int cLogin::kPasswdFieldNumber;
#endif  // !_MSC_VER

cLogin::cLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cLogin::InitAsDefaultInstance() {
}

cLogin::cLogin(const cLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cLogin::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cLogin::~cLogin() {
  SharedDtor();
}

void cLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void cLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cLogin_descriptor_;
}

const cLogin& cLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cLogin* cLogin::default_instance_ = NULL;

cLogin* cLogin::New() const {
  return new cLogin;
}

void cLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // required string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cLogin::MergeFrom(const cLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cLogin::CopyFrom(const cLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void cLogin::Swap(cLogin* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cLogin_descriptor_;
  metadata.reflection = cLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sLogin::kResultFieldNumber;
#endif  // !_MSC_VER

sLogin::sLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sLogin::InitAsDefaultInstance() {
}

sLogin::sLogin(const sLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sLogin::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sLogin::~sLogin() {
  SharedDtor();
}

void sLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sLogin_descriptor_;
}

const sLogin& sLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sLogin* sLogin::default_instance_ = NULL;

sLogin* sLogin::New() const {
  return new sLogin;
}

void sLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sLogin::MergeFrom(const sLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sLogin::CopyFrom(const sLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sLogin::Swap(sLogin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sLogin_descriptor_;
  metadata.reflection = sLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cLogout::kCommonFieldNumber;
#endif  // !_MSC_VER

cLogout::cLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cLogout::InitAsDefaultInstance() {
}

cLogout::cLogout(const cLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cLogout::SharedCtor() {
  _cached_size_ = 0;
  common_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cLogout::~cLogout() {
  SharedDtor();
}

void cLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cLogout_descriptor_;
}

const cLogout& cLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cLogout* cLogout::default_instance_ = NULL;

cLogout* cLogout::New() const {
  return new cLogout;
}

void cLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    common_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &common_)));
          set_has_common();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cLogout::MergeFrom(const cLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      set_common(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cLogout::CopyFrom(const cLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cLogout::Swap(cLogout* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cLogout_descriptor_;
  metadata.reflection = cLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sLogout::kLoginTypeFieldNumber;
const int sLogout::kNumFieldNumber;
#endif  // !_MSC_VER

sLogout::sLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sLogout::InitAsDefaultInstance() {
}

sLogout::sLogout(const sLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sLogout::SharedCtor() {
  _cached_size_ = 0;
  login_type_ = 0;
  num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sLogout::~sLogout() {
  SharedDtor();
}

void sLogout::SharedDtor() {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    delete num_;
  }
  if (this != default_instance_) {
  }
}

void sLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sLogout_descriptor_;
}

const sLogout& sLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sLogout* sLogout::default_instance_ = NULL;

sLogout* sLogout::New() const {
  return new sLogout;
}

void sLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    login_type_ = 0;
    if (has_num()) {
      if (num_ != &::google::protobuf::internal::kEmptyString) {
        num_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 login_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_type_)));
          set_has_login_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_num;
        break;
      }

      // required string num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 login_type = 1;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->login_type(), output);
  }

  // required string num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 login_type = 1;
  if (has_login_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->login_type(), target);
  }

  // required string num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 login_type = 1;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_type());
    }

    // required string num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sLogout::MergeFrom(const sLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sLogout::CopyFrom(const sLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sLogout::Swap(sLogout* other) {
  if (other != this) {
    std::swap(login_type_, other->login_type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sLogout_descriptor_;
  metadata.reflection = sLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetFuncList::kContentFieldNumber;
#endif  // !_MSC_VER

cGetFuncList::cGetFuncList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetFuncList::InitAsDefaultInstance() {
}

cGetFuncList::cGetFuncList(const cGetFuncList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetFuncList::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetFuncList::~cGetFuncList() {
  SharedDtor();
}

void cGetFuncList::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void cGetFuncList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetFuncList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetFuncList_descriptor_;
}

const cGetFuncList& cGetFuncList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetFuncList* cGetFuncList::default_instance_ = NULL;

cGetFuncList* cGetFuncList::New() const {
  return new cGetFuncList;
}

void cGetFuncList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetFuncList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetFuncList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetFuncList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetFuncList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetFuncList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetFuncList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetFuncList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetFuncList::MergeFrom(const cGetFuncList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetFuncList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetFuncList::CopyFrom(const cGetFuncList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetFuncList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetFuncList::Swap(cGetFuncList* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetFuncList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetFuncList_descriptor_;
  metadata.reflection = cGetFuncList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetFuncList::kIdFieldNumber;
const int sGetFuncList::kNameFieldNumber;
const int sGetFuncList::kResPathFieldNumber;
#endif  // !_MSC_VER

sGetFuncList::sGetFuncList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetFuncList::InitAsDefaultInstance() {
}

sGetFuncList::sGetFuncList(const sGetFuncList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetFuncList::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetFuncList::~sGetFuncList() {
  SharedDtor();
}

void sGetFuncList::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (this != default_instance_) {
  }
}

void sGetFuncList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetFuncList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetFuncList_descriptor_;
}

const sGetFuncList& sGetFuncList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetFuncList* sGetFuncList::default_instance_ = NULL;

sGetFuncList* sGetFuncList::New() const {
  return new sGetFuncList;
}

void sGetFuncList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_res_path()) {
      if (res_path_ != &::google::protobuf::internal::kEmptyString) {
        res_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetFuncList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res_path;
        break;
      }

      // required string res_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res_path().data(), this->res_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetFuncList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string res_path = 2;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->res_path(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetFuncList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string res_path = 2;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->res_path(), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetFuncList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string res_path = 2;
    if (has_res_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetFuncList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetFuncList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetFuncList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetFuncList::MergeFrom(const sGetFuncList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_res_path()) {
      set_res_path(from.res_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetFuncList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetFuncList::CopyFrom(const sGetFuncList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetFuncList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void sGetFuncList::Swap(sGetFuncList* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(res_path_, other->res_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetFuncList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetFuncList_descriptor_;
  metadata.reflection = sGetFuncList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cSetFunc::kFuncTypeFieldNumber;
#endif  // !_MSC_VER

cSetFunc::cSetFunc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cSetFunc::InitAsDefaultInstance() {
}

cSetFunc::cSetFunc(const cSetFunc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cSetFunc::SharedCtor() {
  _cached_size_ = 0;
  func_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cSetFunc::~cSetFunc() {
  SharedDtor();
}

void cSetFunc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cSetFunc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cSetFunc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cSetFunc_descriptor_;
}

const cSetFunc& cSetFunc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cSetFunc* cSetFunc::default_instance_ = NULL;

cSetFunc* cSetFunc::New() const {
  return new cSetFunc;
}

void cSetFunc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    func_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cSetFunc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 func_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_type_)));
          set_has_func_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cSetFunc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 func_type = 1;
  if (has_func_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->func_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cSetFunc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 func_type = 1;
  if (has_func_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->func_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cSetFunc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 func_type = 1;
    if (has_func_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->func_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cSetFunc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cSetFunc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cSetFunc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cSetFunc::MergeFrom(const cSetFunc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func_type()) {
      set_func_type(from.func_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cSetFunc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cSetFunc::CopyFrom(const cSetFunc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cSetFunc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cSetFunc::Swap(cSetFunc* other) {
  if (other != this) {
    std::swap(func_type_, other->func_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cSetFunc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cSetFunc_descriptor_;
  metadata.reflection = cSetFunc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sSetFunc::kResultFieldNumber;
#endif  // !_MSC_VER

sSetFunc::sSetFunc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sSetFunc::InitAsDefaultInstance() {
}

sSetFunc::sSetFunc(const sSetFunc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sSetFunc::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSetFunc::~sSetFunc() {
  SharedDtor();
}

void sSetFunc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sSetFunc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sSetFunc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sSetFunc_descriptor_;
}

const sSetFunc& sSetFunc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sSetFunc* sSetFunc::default_instance_ = NULL;

sSetFunc* sSetFunc::New() const {
  return new sSetFunc;
}

void sSetFunc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sSetFunc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSetFunc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sSetFunc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sSetFunc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSetFunc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sSetFunc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sSetFunc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sSetFunc::MergeFrom(const sSetFunc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sSetFunc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sSetFunc::CopyFrom(const sSetFunc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSetFunc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sSetFunc::Swap(sSetFunc* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sSetFunc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sSetFunc_descriptor_;
  metadata.reflection = sSetFunc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetGradeList::kContentFieldNumber;
#endif  // !_MSC_VER

cGetGradeList::cGetGradeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetGradeList::InitAsDefaultInstance() {
}

cGetGradeList::cGetGradeList(const cGetGradeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetGradeList::SharedCtor() {
  _cached_size_ = 0;
  content_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetGradeList::~cGetGradeList() {
  SharedDtor();
}

void cGetGradeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetGradeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetGradeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetGradeList_descriptor_;
}

const cGetGradeList& cGetGradeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetGradeList* cGetGradeList::default_instance_ = NULL;

cGetGradeList* cGetGradeList::New() const {
  return new cGetGradeList;
}

void cGetGradeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    content_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetGradeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_)));
          set_has_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetGradeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetGradeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 content = 1;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetGradeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetGradeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetGradeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetGradeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetGradeList::MergeFrom(const cGetGradeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetGradeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetGradeList::CopyFrom(const cGetGradeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetGradeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetGradeList::Swap(cGetGradeList* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetGradeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetGradeList_descriptor_;
  metadata.reflection = cGetGradeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetGradeList::kGradeIdFieldNumber;
const int sGetGradeList::kGradeNameFieldNumber;
#endif  // !_MSC_VER

sGetGradeList::sGetGradeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetGradeList::InitAsDefaultInstance() {
}

sGetGradeList::sGetGradeList(const sGetGradeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetGradeList::SharedCtor() {
  _cached_size_ = 0;
  grade_id_ = 0;
  grade_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetGradeList::~sGetGradeList() {
  SharedDtor();
}

void sGetGradeList::SharedDtor() {
  if (grade_name_ != &::google::protobuf::internal::kEmptyString) {
    delete grade_name_;
  }
  if (this != default_instance_) {
  }
}

void sGetGradeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetGradeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetGradeList_descriptor_;
}

const sGetGradeList& sGetGradeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetGradeList* sGetGradeList::default_instance_ = NULL;

sGetGradeList* sGetGradeList::New() const {
  return new sGetGradeList;
}

void sGetGradeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_id_ = 0;
    if (has_grade_name()) {
      if (grade_name_ != &::google::protobuf::internal::kEmptyString) {
        grade_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetGradeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_grade_name;
        break;
      }

      // required string grade_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grade_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grade_name().data(), this->grade_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetGradeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 grade_id = 1;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade_id(), output);
  }

  // required string grade_name = 2;
  if (has_grade_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grade_name().data(), this->grade_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->grade_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetGradeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 grade_id = 1;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade_id(), target);
  }

  // required string grade_name = 2;
  if (has_grade_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grade_name().data(), this->grade_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grade_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetGradeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade_id = 1;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }

    // required string grade_name = 2;
    if (has_grade_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grade_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetGradeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetGradeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetGradeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetGradeList::MergeFrom(const sGetGradeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
    if (from.has_grade_name()) {
      set_grade_name(from.grade_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetGradeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetGradeList::CopyFrom(const sGetGradeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetGradeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sGetGradeList::Swap(sGetGradeList* other) {
  if (other != this) {
    std::swap(grade_id_, other->grade_id_);
    std::swap(grade_name_, other->grade_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetGradeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetGradeList_descriptor_;
  metadata.reflection = sGetGradeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetCourseList::kGradeIdFieldNumber;
#endif  // !_MSC_VER

cGetCourseList::cGetCourseList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetCourseList::InitAsDefaultInstance() {
}

cGetCourseList::cGetCourseList(const cGetCourseList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetCourseList::SharedCtor() {
  _cached_size_ = 0;
  grade_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetCourseList::~cGetCourseList() {
  SharedDtor();
}

void cGetCourseList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetCourseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetCourseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetCourseList_descriptor_;
}

const cGetCourseList& cGetCourseList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetCourseList* cGetCourseList::default_instance_ = NULL;

cGetCourseList* cGetCourseList::New() const {
  return new cGetCourseList;
}

void cGetCourseList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetCourseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetCourseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 grade_id = 1;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetCourseList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 grade_id = 1;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetCourseList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade_id = 1;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetCourseList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetCourseList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetCourseList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetCourseList::MergeFrom(const cGetCourseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetCourseList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetCourseList::CopyFrom(const cGetCourseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetCourseList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetCourseList::Swap(cGetCourseList* other) {
  if (other != this) {
    std::swap(grade_id_, other->grade_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetCourseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetCourseList_descriptor_;
  metadata.reflection = cGetCourseList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetCourseList::kCourseIdFieldNumber;
const int sGetCourseList::kCourseNameFieldNumber;
const int sGetCourseList::kLanguageFieldNumber;
const int sGetCourseList::kArtFieldNumber;
const int sGetCourseList::kCommunityFieldNumber;
const int sGetCourseList::kHealthFieldNumber;
const int sGetCourseList::kScienceFieldNumber;
const int sGetCourseList::kResPathFieldNumber;
#endif  // !_MSC_VER

sGetCourseList::sGetCourseList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetCourseList::InitAsDefaultInstance() {
}

sGetCourseList::sGetCourseList(const sGetCourseList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetCourseList::SharedCtor() {
  _cached_size_ = 0;
  course_id_ = 0;
  course_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = 0;
  art_ = 0;
  community_ = 0;
  health_ = 0;
  science_ = 0;
  res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetCourseList::~sGetCourseList() {
  SharedDtor();
}

void sGetCourseList::SharedDtor() {
  if (course_name_ != &::google::protobuf::internal::kEmptyString) {
    delete course_name_;
  }
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (this != default_instance_) {
  }
}

void sGetCourseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetCourseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetCourseList_descriptor_;
}

const sGetCourseList& sGetCourseList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetCourseList* sGetCourseList::default_instance_ = NULL;

sGetCourseList* sGetCourseList::New() const {
  return new sGetCourseList;
}

void sGetCourseList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    course_id_ = 0;
    if (has_course_name()) {
      if (course_name_ != &::google::protobuf::internal::kEmptyString) {
        course_name_->clear();
      }
    }
    language_ = 0;
    art_ = 0;
    community_ = 0;
    health_ = 0;
    science_ = 0;
    if (has_res_path()) {
      if (res_path_ != &::google::protobuf::internal::kEmptyString) {
        res_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetCourseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 course_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &course_id_)));
          set_has_course_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_course_name;
        break;
      }

      // required string course_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_course_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_course_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->course_name().data(), this->course_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_language;
        break;
      }

      // required int32 language = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_art;
        break;
      }

      // required int32 art = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_art:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &art_)));
          set_has_art();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_community;
        break;
      }

      // required int32 community = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_community:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &community_)));
          set_has_community();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_health;
        break;
      }

      // required int32 health = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_science;
        break;
      }

      // required int32 science = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_science:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &science_)));
          set_has_science();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_res_path;
        break;
      }

      // required string res_path = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res_path().data(), this->res_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetCourseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 course_id = 1;
  if (has_course_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->course_id(), output);
  }

  // required string course_name = 2;
  if (has_course_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->course_name().data(), this->course_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->course_name(), output);
  }

  // required int32 language = 3;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->language(), output);
  }

  // required int32 art = 4;
  if (has_art()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->art(), output);
  }

  // required int32 community = 5;
  if (has_community()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->community(), output);
  }

  // required int32 health = 6;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->health(), output);
  }

  // required int32 science = 7;
  if (has_science()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->science(), output);
  }

  // required string res_path = 8;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->res_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetCourseList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 course_id = 1;
  if (has_course_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->course_id(), target);
  }

  // required string course_name = 2;
  if (has_course_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->course_name().data(), this->course_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->course_name(), target);
  }

  // required int32 language = 3;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->language(), target);
  }

  // required int32 art = 4;
  if (has_art()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->art(), target);
  }

  // required int32 community = 5;
  if (has_community()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->community(), target);
  }

  // required int32 health = 6;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->health(), target);
  }

  // required int32 science = 7;
  if (has_science()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->science(), target);
  }

  // required string res_path = 8;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->res_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetCourseList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 course_id = 1;
    if (has_course_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->course_id());
    }

    // required string course_name = 2;
    if (has_course_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->course_name());
    }

    // required int32 language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // required int32 art = 4;
    if (has_art()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->art());
    }

    // required int32 community = 5;
    if (has_community()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->community());
    }

    // required int32 health = 6;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // required int32 science = 7;
    if (has_science()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->science());
    }

    // required string res_path = 8;
    if (has_res_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetCourseList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetCourseList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetCourseList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetCourseList::MergeFrom(const sGetCourseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_course_id()) {
      set_course_id(from.course_id());
    }
    if (from.has_course_name()) {
      set_course_name(from.course_name());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_art()) {
      set_art(from.art());
    }
    if (from.has_community()) {
      set_community(from.community());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_science()) {
      set_science(from.science());
    }
    if (from.has_res_path()) {
      set_res_path(from.res_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetCourseList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetCourseList::CopyFrom(const sGetCourseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetCourseList::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void sGetCourseList::Swap(sGetCourseList* other) {
  if (other != this) {
    std::swap(course_id_, other->course_id_);
    std::swap(course_name_, other->course_name_);
    std::swap(language_, other->language_);
    std::swap(art_, other->art_);
    std::swap(community_, other->community_);
    std::swap(health_, other->health_);
    std::swap(science_, other->science_);
    std::swap(res_path_, other->res_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetCourseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetCourseList_descriptor_;
  metadata.reflection = sGetCourseList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetContent::kCommonFieldNumber;
#endif  // !_MSC_VER

cGetContent::cGetContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetContent::InitAsDefaultInstance() {
}

cGetContent::cGetContent(const cGetContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetContent::SharedCtor() {
  _cached_size_ = 0;
  common_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetContent::~cGetContent() {
  SharedDtor();
}

void cGetContent::SharedDtor() {
  if (common_ != &::google::protobuf::internal::kEmptyString) {
    delete common_;
  }
  if (this != default_instance_) {
  }
}

void cGetContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetContent_descriptor_;
}

const cGetContent& cGetContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetContent* cGetContent::default_instance_ = NULL;

cGetContent* cGetContent::New() const {
  return new cGetContent;
}

void cGetContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != &::google::protobuf::internal::kEmptyString) {
        common_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_common()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->common().data(), this->common().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->common().data(), this->common().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->common().data(), this->common().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetContent::MergeFrom(const cGetContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      set_common(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetContent::CopyFrom(const cGetContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetContent::Swap(cGetContent* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetContent_descriptor_;
  metadata.reflection = cGetContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetContent::kResultFieldNumber;
const int sGetContent::kCourseListFieldNumber;
#endif  // !_MSC_VER

sGetContent::sGetContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetContent::InitAsDefaultInstance() {
}

sGetContent::sGetContent(const sGetContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetContent::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  course_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetContent::~sGetContent() {
  SharedDtor();
}

void sGetContent::SharedDtor() {
  if (course_list_ != &::google::protobuf::internal::kEmptyString) {
    delete course_list_;
  }
  if (this != default_instance_) {
  }
}

void sGetContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetContent_descriptor_;
}

const sGetContent& sGetContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetContent* sGetContent::default_instance_ = NULL;

sGetContent* sGetContent::New() const {
  return new sGetContent;
}

void sGetContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_course_list()) {
      if (course_list_ != &::google::protobuf::internal::kEmptyString) {
        course_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_course_list;
        break;
      }

      // required string course_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_course_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_course_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->course_list().data(), this->course_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required string course_list = 2;
  if (has_course_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->course_list().data(), this->course_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->course_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required string course_list = 2;
  if (has_course_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->course_list().data(), this->course_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->course_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required string course_list = 2;
    if (has_course_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->course_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetContent::MergeFrom(const sGetContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_course_list()) {
      set_course_list(from.course_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetContent::CopyFrom(const sGetContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sGetContent::Swap(sGetContent* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(course_list_, other->course_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetContent_descriptor_;
  metadata.reflection = sGetContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetClassList::kGradeIdFieldNumber;
#endif  // !_MSC_VER

cGetClassList::cGetClassList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetClassList::InitAsDefaultInstance() {
}

cGetClassList::cGetClassList(const cGetClassList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetClassList::SharedCtor() {
  _cached_size_ = 0;
  grade_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetClassList::~cGetClassList() {
  SharedDtor();
}

void cGetClassList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetClassList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetClassList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetClassList_descriptor_;
}

const cGetClassList& cGetClassList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetClassList* cGetClassList::default_instance_ = NULL;

cGetClassList* cGetClassList::New() const {
  return new cGetClassList;
}

void cGetClassList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetClassList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetClassList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 grade_id = 1;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetClassList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 grade_id = 1;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetClassList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade_id = 1;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetClassList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetClassList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetClassList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetClassList::MergeFrom(const cGetClassList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetClassList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetClassList::CopyFrom(const cGetClassList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetClassList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetClassList::Swap(cGetClassList* other) {
  if (other != this) {
    std::swap(grade_id_, other->grade_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetClassList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetClassList_descriptor_;
  metadata.reflection = cGetClassList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetClassList::kClassIdFieldNumber;
const int sGetClassList::kClassNameFieldNumber;
#endif  // !_MSC_VER

sGetClassList::sGetClassList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetClassList::InitAsDefaultInstance() {
}

sGetClassList::sGetClassList(const sGetClassList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetClassList::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0;
  class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetClassList::~sGetClassList() {
  SharedDtor();
}

void sGetClassList::SharedDtor() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (this != default_instance_) {
  }
}

void sGetClassList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetClassList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetClassList_descriptor_;
}

const sGetClassList& sGetClassList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetClassList* sGetClassList::default_instance_ = NULL;

sGetClassList* sGetClassList::New() const {
  return new sGetClassList;
}

void sGetClassList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0;
    if (has_class_name()) {
      if (class_name_ != &::google::protobuf::internal::kEmptyString) {
        class_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetClassList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_name;
        break;
      }

      // required string class_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetClassList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // required string class_name = 2;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetClassList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // required string class_name = 2;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetClassList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

    // required string class_name = 2;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetClassList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetClassList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetClassList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetClassList::MergeFrom(const sGetClassList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetClassList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetClassList::CopyFrom(const sGetClassList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetClassList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sGetClassList::Swap(sGetClassList* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(class_name_, other->class_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetClassList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetClassList_descriptor_;
  metadata.reflection = sGetClassList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetClassRoomList::kContentFieldNumber;
#endif  // !_MSC_VER

cGetClassRoomList::cGetClassRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetClassRoomList::InitAsDefaultInstance() {
}

cGetClassRoomList::cGetClassRoomList(const cGetClassRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetClassRoomList::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetClassRoomList::~cGetClassRoomList() {
  SharedDtor();
}

void cGetClassRoomList::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void cGetClassRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetClassRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetClassRoomList_descriptor_;
}

const cGetClassRoomList& cGetClassRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetClassRoomList* cGetClassRoomList::default_instance_ = NULL;

cGetClassRoomList* cGetClassRoomList::New() const {
  return new cGetClassRoomList;
}

void cGetClassRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetClassRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetClassRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetClassRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetClassRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetClassRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetClassRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetClassRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetClassRoomList::MergeFrom(const cGetClassRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetClassRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetClassRoomList::CopyFrom(const cGetClassRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetClassRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetClassRoomList::Swap(cGetClassRoomList* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetClassRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetClassRoomList_descriptor_;
  metadata.reflection = cGetClassRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetClassRoomList::kClassroomIdFieldNumber;
const int sGetClassRoomList::kClassroomNameFieldNumber;
#endif  // !_MSC_VER

sGetClassRoomList::sGetClassRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetClassRoomList::InitAsDefaultInstance() {
}

sGetClassRoomList::sGetClassRoomList(const sGetClassRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetClassRoomList::SharedCtor() {
  _cached_size_ = 0;
  classroom_id_ = 0;
  classroom_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetClassRoomList::~sGetClassRoomList() {
  SharedDtor();
}

void sGetClassRoomList::SharedDtor() {
  if (classroom_name_ != &::google::protobuf::internal::kEmptyString) {
    delete classroom_name_;
  }
  if (this != default_instance_) {
  }
}

void sGetClassRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetClassRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetClassRoomList_descriptor_;
}

const sGetClassRoomList& sGetClassRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetClassRoomList* sGetClassRoomList::default_instance_ = NULL;

sGetClassRoomList* sGetClassRoomList::New() const {
  return new sGetClassRoomList;
}

void sGetClassRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    classroom_id_ = 0;
    if (has_classroom_name()) {
      if (classroom_name_ != &::google::protobuf::internal::kEmptyString) {
        classroom_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetClassRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 classroom_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classroom_id_)));
          set_has_classroom_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classroom_name;
        break;
      }

      // required string classroom_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classroom_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classroom_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->classroom_name().data(), this->classroom_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetClassRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 classroom_id = 1;
  if (has_classroom_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->classroom_id(), output);
  }

  // required string classroom_name = 2;
  if (has_classroom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classroom_name().data(), this->classroom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classroom_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetClassRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 classroom_id = 1;
  if (has_classroom_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->classroom_id(), target);
  }

  // required string classroom_name = 2;
  if (has_classroom_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classroom_name().data(), this->classroom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->classroom_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetClassRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 classroom_id = 1;
    if (has_classroom_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classroom_id());
    }

    // required string classroom_name = 2;
    if (has_classroom_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classroom_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetClassRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetClassRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetClassRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetClassRoomList::MergeFrom(const sGetClassRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_classroom_id()) {
      set_classroom_id(from.classroom_id());
    }
    if (from.has_classroom_name()) {
      set_classroom_name(from.classroom_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetClassRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetClassRoomList::CopyFrom(const sGetClassRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetClassRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sGetClassRoomList::Swap(sGetClassRoomList* other) {
  if (other != this) {
    std::swap(classroom_id_, other->classroom_id_);
    std::swap(classroom_name_, other->classroom_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetClassRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetClassRoomList_descriptor_;
  metadata.reflection = sGetClassRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cSetContent::kClassIdFieldNumber;
const int cSetContent::kClassroomIdFieldNumber;
const int cSetContent::kCourseListFieldNumber;
#endif  // !_MSC_VER

cSetContent::cSetContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cSetContent::InitAsDefaultInstance() {
}

cSetContent::cSetContent(const cSetContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cSetContent::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0;
  classroom_id_ = 0;
  course_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cSetContent::~cSetContent() {
  SharedDtor();
}

void cSetContent::SharedDtor() {
  if (course_list_ != &::google::protobuf::internal::kEmptyString) {
    delete course_list_;
  }
  if (this != default_instance_) {
  }
}

void cSetContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cSetContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cSetContent_descriptor_;
}

const cSetContent& cSetContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cSetContent* cSetContent::default_instance_ = NULL;

cSetContent* cSetContent::New() const {
  return new cSetContent;
}

void cSetContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0;
    classroom_id_ = 0;
    if (has_course_list()) {
      if (course_list_ != &::google::protobuf::internal::kEmptyString) {
        course_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cSetContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_classroom_id;
        break;
      }

      // required int32 classroom_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classroom_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classroom_id_)));
          set_has_classroom_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_course_list;
        break;
      }

      // required string course_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_course_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_course_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->course_list().data(), this->course_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cSetContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // required int32 classroom_id = 2;
  if (has_classroom_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->classroom_id(), output);
  }

  // required string course_list = 3;
  if (has_course_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->course_list().data(), this->course_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->course_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cSetContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // required int32 classroom_id = 2;
  if (has_classroom_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->classroom_id(), target);
  }

  // required string course_list = 3;
  if (has_course_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->course_list().data(), this->course_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->course_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cSetContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

    // required int32 classroom_id = 2;
    if (has_classroom_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classroom_id());
    }

    // required string course_list = 3;
    if (has_course_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->course_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cSetContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cSetContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cSetContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cSetContent::MergeFrom(const cSetContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_classroom_id()) {
      set_classroom_id(from.classroom_id());
    }
    if (from.has_course_list()) {
      set_course_list(from.course_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cSetContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cSetContent::CopyFrom(const cSetContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cSetContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void cSetContent::Swap(cSetContent* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(classroom_id_, other->classroom_id_);
    std::swap(course_list_, other->course_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cSetContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cSetContent_descriptor_;
  metadata.reflection = cSetContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sSetContent::kResultFieldNumber;
const int sSetContent::kMsgFieldNumber;
#endif  // !_MSC_VER

sSetContent::sSetContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sSetContent::InitAsDefaultInstance() {
}

sSetContent::sSetContent(const sSetContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sSetContent::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSetContent::~sSetContent() {
  SharedDtor();
}

void sSetContent::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void sSetContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sSetContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sSetContent_descriptor_;
}

const sSetContent& sSetContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sSetContent* sSetContent::default_instance_ = NULL;

sSetContent* sSetContent::New() const {
  return new sSetContent;
}

void sSetContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sSetContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSetContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sSetContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sSetContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSetContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sSetContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sSetContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sSetContent::MergeFrom(const sSetContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sSetContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sSetContent::CopyFrom(const sSetContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSetContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sSetContent::Swap(sSetContent* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sSetContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sSetContent_descriptor_;
  metadata.reflection = sSetContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetStudentList::kClassIdFieldNumber;
#endif  // !_MSC_VER

cGetStudentList::cGetStudentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetStudentList::InitAsDefaultInstance() {
}

cGetStudentList::cGetStudentList(const cGetStudentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetStudentList::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetStudentList::~cGetStudentList() {
  SharedDtor();
}

void cGetStudentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetStudentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetStudentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetStudentList_descriptor_;
}

const cGetStudentList& cGetStudentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetStudentList* cGetStudentList::default_instance_ = NULL;

cGetStudentList* cGetStudentList::New() const {
  return new cGetStudentList;
}

void cGetStudentList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetStudentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetStudentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetStudentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetStudentList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetStudentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetStudentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetStudentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetStudentList::MergeFrom(const cGetStudentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetStudentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetStudentList::CopyFrom(const cGetStudentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetStudentList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetStudentList::Swap(cGetStudentList* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetStudentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetStudentList_descriptor_;
  metadata.reflection = cGetStudentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetStudentList::kIdFieldNumber;
const int sGetStudentList::kNameFieldNumber;
const int sGetStudentList::kResPathFieldNumber;
#endif  // !_MSC_VER

sGetStudentList::sGetStudentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetStudentList::InitAsDefaultInstance() {
}

sGetStudentList::sGetStudentList(const sGetStudentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetStudentList::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetStudentList::~sGetStudentList() {
  SharedDtor();
}

void sGetStudentList::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (this != default_instance_) {
  }
}

void sGetStudentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetStudentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetStudentList_descriptor_;
}

const sGetStudentList& sGetStudentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetStudentList* sGetStudentList::default_instance_ = NULL;

sGetStudentList* sGetStudentList::New() const {
  return new sGetStudentList;
}

void sGetStudentList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_res_path()) {
      if (res_path_ != &::google::protobuf::internal::kEmptyString) {
        res_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetStudentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_res_path;
        break;
      }

      // required string res_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res_path().data(), this->res_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetStudentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string res_path = 3;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->res_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetStudentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string res_path = 3;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->res_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetStudentList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string res_path = 3;
    if (has_res_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetStudentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetStudentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetStudentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetStudentList::MergeFrom(const sGetStudentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_res_path()) {
      set_res_path(from.res_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetStudentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetStudentList::CopyFrom(const sGetStudentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetStudentList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void sGetStudentList::Swap(sGetStudentList* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(res_path_, other->res_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetStudentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetStudentList_descriptor_;
  metadata.reflection = sGetStudentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetActiveStudentList::kClassIdFieldNumber;
#endif  // !_MSC_VER

cGetActiveStudentList::cGetActiveStudentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetActiveStudentList::InitAsDefaultInstance() {
}

cGetActiveStudentList::cGetActiveStudentList(const cGetActiveStudentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetActiveStudentList::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetActiveStudentList::~cGetActiveStudentList() {
  SharedDtor();
}

void cGetActiveStudentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetActiveStudentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetActiveStudentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetActiveStudentList_descriptor_;
}

const cGetActiveStudentList& cGetActiveStudentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetActiveStudentList* cGetActiveStudentList::default_instance_ = NULL;

cGetActiveStudentList* cGetActiveStudentList::New() const {
  return new cGetActiveStudentList;
}

void cGetActiveStudentList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetActiveStudentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetActiveStudentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetActiveStudentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetActiveStudentList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetActiveStudentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetActiveStudentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetActiveStudentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetActiveStudentList::MergeFrom(const cGetActiveStudentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetActiveStudentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetActiveStudentList::CopyFrom(const cGetActiveStudentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetActiveStudentList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetActiveStudentList::Swap(cGetActiveStudentList* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetActiveStudentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetActiveStudentList_descriptor_;
  metadata.reflection = cGetActiveStudentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetActiveStudentList::kIdFieldNumber;
#endif  // !_MSC_VER

sGetActiveStudentList::sGetActiveStudentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetActiveStudentList::InitAsDefaultInstance() {
}

sGetActiveStudentList::sGetActiveStudentList(const sGetActiveStudentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetActiveStudentList::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetActiveStudentList::~sGetActiveStudentList() {
  SharedDtor();
}

void sGetActiveStudentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sGetActiveStudentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetActiveStudentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetActiveStudentList_descriptor_;
}

const sGetActiveStudentList& sGetActiveStudentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetActiveStudentList* sGetActiveStudentList::default_instance_ = NULL;

sGetActiveStudentList* sGetActiveStudentList::New() const {
  return new sGetActiveStudentList;
}

void sGetActiveStudentList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetActiveStudentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetActiveStudentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetActiveStudentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetActiveStudentList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetActiveStudentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetActiveStudentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetActiveStudentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetActiveStudentList::MergeFrom(const sGetActiveStudentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetActiveStudentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetActiveStudentList::CopyFrom(const sGetActiveStudentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetActiveStudentList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sGetActiveStudentList::Swap(sGetActiveStudentList* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetActiveStudentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetActiveStudentList_descriptor_;
  metadata.reflection = sGetActiveStudentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sUpdateStudentStatus::kStudentIdFieldNumber;
#endif  // !_MSC_VER

sUpdateStudentStatus::sUpdateStudentStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sUpdateStudentStatus::InitAsDefaultInstance() {
}

sUpdateStudentStatus::sUpdateStudentStatus(const sUpdateStudentStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sUpdateStudentStatus::SharedCtor() {
  _cached_size_ = 0;
  student_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sUpdateStudentStatus::~sUpdateStudentStatus() {
  SharedDtor();
}

void sUpdateStudentStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sUpdateStudentStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sUpdateStudentStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sUpdateStudentStatus_descriptor_;
}

const sUpdateStudentStatus& sUpdateStudentStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sUpdateStudentStatus* sUpdateStudentStatus::default_instance_ = NULL;

sUpdateStudentStatus* sUpdateStudentStatus::New() const {
  return new sUpdateStudentStatus;
}

void sUpdateStudentStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    student_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sUpdateStudentStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 student_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sUpdateStudentStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->student_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sUpdateStudentStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 student_id = 1;
  if (has_student_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->student_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sUpdateStudentStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->student_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sUpdateStudentStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sUpdateStudentStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sUpdateStudentStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sUpdateStudentStatus::MergeFrom(const sUpdateStudentStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sUpdateStudentStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sUpdateStudentStatus::CopyFrom(const sUpdateStudentStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sUpdateStudentStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sUpdateStudentStatus::Swap(sUpdateStudentStatus* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sUpdateStudentStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sUpdateStudentStatus_descriptor_;
  metadata.reflection = sUpdateStudentStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetStudentInfo::kIdFieldNumber;
#endif  // !_MSC_VER

cGetStudentInfo::cGetStudentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetStudentInfo::InitAsDefaultInstance() {
}

cGetStudentInfo::cGetStudentInfo(const cGetStudentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetStudentInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetStudentInfo::~cGetStudentInfo() {
  SharedDtor();
}

void cGetStudentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetStudentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetStudentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetStudentInfo_descriptor_;
}

const cGetStudentInfo& cGetStudentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetStudentInfo* cGetStudentInfo::default_instance_ = NULL;

cGetStudentInfo* cGetStudentInfo::New() const {
  return new cGetStudentInfo;
}

void cGetStudentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetStudentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetStudentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetStudentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetStudentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetStudentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetStudentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetStudentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetStudentInfo::MergeFrom(const cGetStudentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetStudentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetStudentInfo::CopyFrom(const cGetStudentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetStudentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetStudentInfo::Swap(cGetStudentInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetStudentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetStudentInfo_descriptor_;
  metadata.reflection = cGetStudentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetStudentInfo::kIdFieldNumber;
const int sGetStudentInfo::kNumberFieldNumber;
const int sGetStudentInfo::kNameFieldNumber;
const int sGetStudentInfo::kSexFieldNumber;
const int sGetStudentInfo::kRaceFieldNumber;
const int sGetStudentInfo::kBirthdayFieldNumber;
const int sGetStudentInfo::kNativeFieldNumber;
const int sGetStudentInfo::kClassNameFieldNumber;
#endif  // !_MSC_VER

sGetStudentInfo::sGetStudentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetStudentInfo::InitAsDefaultInstance() {
}

sGetStudentInfo::sGetStudentInfo(const sGetStudentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetStudentInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetStudentInfo::~sGetStudentInfo() {
  SharedDtor();
}

void sGetStudentInfo::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    delete native_;
  }
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (this != default_instance_) {
  }
}

void sGetStudentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetStudentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetStudentInfo_descriptor_;
}

const sGetStudentInfo& sGetStudentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetStudentInfo* sGetStudentInfo::default_instance_ = NULL;

sGetStudentInfo* sGetStudentInfo::New() const {
  return new sGetStudentInfo;
}

void sGetStudentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::kEmptyString) {
        sex_->clear();
      }
    }
    if (has_race()) {
      if (race_ != &::google::protobuf::internal::kEmptyString) {
        race_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::kEmptyString) {
        birthday_->clear();
      }
    }
    if (has_native()) {
      if (native_ != &::google::protobuf::internal::kEmptyString) {
        native_->clear();
      }
    }
    if (has_class_name()) {
      if (class_name_ != &::google::protobuf::internal::kEmptyString) {
        class_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetStudentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_number;
        break;
      }

      // required string number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sex;
        break;
      }

      // required string sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_race;
        break;
      }

      // required string race = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_race()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->race().data(), this->race().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_birthday;
        break;
      }

      // required string birthday = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_native;
        break;
      }

      // required string native = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_native()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->native().data(), this->native().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_class_name;
        break;
      }

      // required string class_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetStudentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->number(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sex(), output);
  }

  // required string race = 5;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->race(), output);
  }

  // required string birthday = 6;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->birthday(), output);
  }

  // required string native = 7;
  if (has_native()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->native().data(), this->native().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->native(), output);
  }

  // required string class_name = 8;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->class_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetStudentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->number(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sex(), target);
  }

  // required string race = 5;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->race(), target);
  }

  // required string birthday = 6;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->birthday(), target);
  }

  // required string native = 7;
  if (has_native()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->native().data(), this->native().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->native(), target);
  }

  // required string class_name = 8;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->class_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetStudentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // required string race = 5;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->race());
    }

    // required string birthday = 6;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // required string native = 7;
    if (has_native()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->native());
    }

    // required string class_name = 8;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetStudentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetStudentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetStudentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetStudentInfo::MergeFrom(const sGetStudentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_native()) {
      set_native(from.native());
    }
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetStudentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetStudentInfo::CopyFrom(const sGetStudentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetStudentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void sGetStudentInfo::Swap(sGetStudentInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(number_, other->number_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(race_, other->race_);
    std::swap(birthday_, other->birthday_);
    std::swap(native_, other->native_);
    std::swap(class_name_, other->class_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetStudentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetStudentInfo_descriptor_;
  metadata.reflection = sGetStudentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cGetTeacherInfo::kIdFieldNumber;
#endif  // !_MSC_VER

cGetTeacherInfo::cGetTeacherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetTeacherInfo::InitAsDefaultInstance() {
}

cGetTeacherInfo::cGetTeacherInfo(const cGetTeacherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetTeacherInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetTeacherInfo::~cGetTeacherInfo() {
  SharedDtor();
}

void cGetTeacherInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetTeacherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetTeacherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetTeacherInfo_descriptor_;
}

const cGetTeacherInfo& cGetTeacherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetTeacherInfo* cGetTeacherInfo::default_instance_ = NULL;

cGetTeacherInfo* cGetTeacherInfo::New() const {
  return new cGetTeacherInfo;
}

void cGetTeacherInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetTeacherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cGetTeacherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetTeacherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetTeacherInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetTeacherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetTeacherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetTeacherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetTeacherInfo::MergeFrom(const cGetTeacherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetTeacherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetTeacherInfo::CopyFrom(const cGetTeacherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetTeacherInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cGetTeacherInfo::Swap(cGetTeacherInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetTeacherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetTeacherInfo_descriptor_;
  metadata.reflection = cGetTeacherInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetTeacherInfo::kIdFieldNumber;
const int sGetTeacherInfo::kNumberFieldNumber;
const int sGetTeacherInfo::kNameFieldNumber;
const int sGetTeacherInfo::kSexFieldNumber;
const int sGetTeacherInfo::kRaceFieldNumber;
const int sGetTeacherInfo::kBirthdayFieldNumber;
const int sGetTeacherInfo::kNativeFieldNumber;
const int sGetTeacherInfo::kSchoolNameFieldNumber;
#endif  // !_MSC_VER

sGetTeacherInfo::sGetTeacherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetTeacherInfo::InitAsDefaultInstance() {
}

sGetTeacherInfo::sGetTeacherInfo(const sGetTeacherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetTeacherInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  native_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  school_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetTeacherInfo::~sGetTeacherInfo() {
  SharedDtor();
}

void sGetTeacherInfo::SharedDtor() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (native_ != &::google::protobuf::internal::kEmptyString) {
    delete native_;
  }
  if (school_name_ != &::google::protobuf::internal::kEmptyString) {
    delete school_name_;
  }
  if (this != default_instance_) {
  }
}

void sGetTeacherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetTeacherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetTeacherInfo_descriptor_;
}

const sGetTeacherInfo& sGetTeacherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetTeacherInfo* sGetTeacherInfo::default_instance_ = NULL;

sGetTeacherInfo* sGetTeacherInfo::New() const {
  return new sGetTeacherInfo;
}

void sGetTeacherInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::kEmptyString) {
        number_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::kEmptyString) {
        sex_->clear();
      }
    }
    if (has_race()) {
      if (race_ != &::google::protobuf::internal::kEmptyString) {
        race_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::kEmptyString) {
        birthday_->clear();
      }
    }
    if (has_native()) {
      if (native_ != &::google::protobuf::internal::kEmptyString) {
        native_->clear();
      }
    }
    if (has_school_name()) {
      if (school_name_ != &::google::protobuf::internal::kEmptyString) {
        school_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetTeacherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_number;
        break;
      }

      // required string number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sex;
        break;
      }

      // required string sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_race;
        break;
      }

      // required string race = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_race()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->race().data(), this->race().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_birthday;
        break;
      }

      // required string birthday = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_native;
        break;
      }

      // required string native = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_native()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->native().data(), this->native().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_school_name;
        break;
      }

      // required string school_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_school_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_school_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->school_name().data(), this->school_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetTeacherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->number(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sex(), output);
  }

  // required string race = 5;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->race(), output);
  }

  // required string birthday = 6;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->birthday(), output);
  }

  // required string native = 7;
  if (has_native()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->native().data(), this->native().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->native(), output);
  }

  // required string school_name = 8;
  if (has_school_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->school_name().data(), this->school_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->school_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetTeacherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->number(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sex(), target);
  }

  // required string race = 5;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->race(), target);
  }

  // required string birthday = 6;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->birthday(), target);
  }

  // required string native = 7;
  if (has_native()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->native().data(), this->native().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->native(), target);
  }

  // required string school_name = 8;
  if (has_school_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->school_name().data(), this->school_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->school_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetTeacherInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // required string race = 5;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->race());
    }

    // required string birthday = 6;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // required string native = 7;
    if (has_native()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->native());
    }

    // required string school_name = 8;
    if (has_school_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->school_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetTeacherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetTeacherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetTeacherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetTeacherInfo::MergeFrom(const sGetTeacherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_native()) {
      set_native(from.native());
    }
    if (from.has_school_name()) {
      set_school_name(from.school_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetTeacherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetTeacherInfo::CopyFrom(const sGetTeacherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetTeacherInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void sGetTeacherInfo::Swap(sGetTeacherInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(number_, other->number_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(race_, other->race_);
    std::swap(birthday_, other->birthday_);
    std::swap(native_, other->native_);
    std::swap(school_name_, other->school_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetTeacherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetTeacherInfo_descriptor_;
  metadata.reflection = sGetTeacherInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cSetGroup::kGroupIdFieldNumber;
const int cSetGroup::kGroupNameFieldNumber;
const int cSetGroup::kStudentCntFieldNumber;
const int cSetGroup::kStudentListFieldNumber;
#endif  // !_MSC_VER

cSetGroup::cSetGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cSetGroup::InitAsDefaultInstance() {
}

cSetGroup::cSetGroup(const cSetGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cSetGroup::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  student_cnt_ = 0;
  student_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cSetGroup::~cSetGroup() {
  SharedDtor();
}

void cSetGroup::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (student_list_ != &::google::protobuf::internal::kEmptyString) {
    delete student_list_;
  }
  if (this != default_instance_) {
  }
}

void cSetGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cSetGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cSetGroup_descriptor_;
}

const cSetGroup& cSetGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cSetGroup* cSetGroup::default_instance_ = NULL;

cSetGroup* cSetGroup::New() const {
  return new cSetGroup;
}

void cSetGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    student_cnt_ = 0;
    if (has_student_list()) {
      if (student_list_ != &::google::protobuf::internal::kEmptyString) {
        student_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cSetGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // required string group_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_student_list;
        break;
      }

      // required string student_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_student_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_student_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->student_list().data(), this->student_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_student_cnt;
        break;
      }

      // required int32 student_cnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_student_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &student_cnt_)));
          set_has_student_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cSetGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->group_name(), output);
  }

  // required string student_list = 3;
  if (has_student_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->student_list().data(), this->student_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->student_list(), output);
  }

  // required int32 student_cnt = 4;
  if (has_student_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->student_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cSetGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // required string student_list = 3;
  if (has_student_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->student_list().data(), this->student_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->student_list(), target);
  }

  // required int32 student_cnt = 4;
  if (has_student_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->student_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cSetGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required int32 student_cnt = 4;
    if (has_student_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->student_cnt());
    }

    // required string student_list = 3;
    if (has_student_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->student_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cSetGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cSetGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cSetGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cSetGroup::MergeFrom(const cSetGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_student_cnt()) {
      set_student_cnt(from.student_cnt());
    }
    if (from.has_student_list()) {
      set_student_list(from.student_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cSetGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cSetGroup::CopyFrom(const cSetGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cSetGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void cSetGroup::Swap(cSetGroup* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(student_cnt_, other->student_cnt_);
    std::swap(student_list_, other->student_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cSetGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cSetGroup_descriptor_;
  metadata.reflection = cSetGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sSetGroup::kResultFieldNumber;
const int sSetGroup::kMsgFieldNumber;
#endif  // !_MSC_VER

sSetGroup::sSetGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sSetGroup::InitAsDefaultInstance() {
}

sSetGroup::sSetGroup(const sSetGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sSetGroup::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sSetGroup::~sSetGroup() {
  SharedDtor();
}

void sSetGroup::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void sSetGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sSetGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sSetGroup_descriptor_;
}

const sSetGroup& sSetGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sSetGroup* sSetGroup::default_instance_ = NULL;

sSetGroup* sSetGroup::New() const {
  return new sSetGroup;
}

void sSetGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sSetGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sSetGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sSetGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sSetGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sSetGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sSetGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sSetGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sSetGroup::MergeFrom(const sSetGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sSetGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sSetGroup::CopyFrom(const sSetGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sSetGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sSetGroup::Swap(sSetGroup* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sSetGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sSetGroup_descriptor_;
  metadata.reflection = sSetGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cGetPersonalBooksList::cGetPersonalBooksList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetPersonalBooksList::InitAsDefaultInstance() {
}

cGetPersonalBooksList::cGetPersonalBooksList(const cGetPersonalBooksList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetPersonalBooksList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetPersonalBooksList::~cGetPersonalBooksList() {
  SharedDtor();
}

void cGetPersonalBooksList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetPersonalBooksList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetPersonalBooksList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetPersonalBooksList_descriptor_;
}

const cGetPersonalBooksList& cGetPersonalBooksList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetPersonalBooksList* cGetPersonalBooksList::default_instance_ = NULL;

cGetPersonalBooksList* cGetPersonalBooksList::New() const {
  return new cGetPersonalBooksList;
}

void cGetPersonalBooksList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetPersonalBooksList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cGetPersonalBooksList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetPersonalBooksList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetPersonalBooksList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetPersonalBooksList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetPersonalBooksList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetPersonalBooksList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetPersonalBooksList::MergeFrom(const cGetPersonalBooksList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetPersonalBooksList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetPersonalBooksList::CopyFrom(const cGetPersonalBooksList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetPersonalBooksList::IsInitialized() const {

  return true;
}

void cGetPersonalBooksList::Swap(cGetPersonalBooksList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetPersonalBooksList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetPersonalBooksList_descriptor_;
  metadata.reflection = cGetPersonalBooksList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cGetServerAddr::cGetServerAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetServerAddr::InitAsDefaultInstance() {
}

cGetServerAddr::cGetServerAddr(const cGetServerAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetServerAddr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetServerAddr::~cGetServerAddr() {
  SharedDtor();
}

void cGetServerAddr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetServerAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetServerAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetServerAddr_descriptor_;
}

const cGetServerAddr& cGetServerAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetServerAddr* cGetServerAddr::default_instance_ = NULL;

cGetServerAddr* cGetServerAddr::New() const {
  return new cGetServerAddr;
}

void cGetServerAddr::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetServerAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cGetServerAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetServerAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetServerAddr::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetServerAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetServerAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetServerAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetServerAddr::MergeFrom(const cGetServerAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetServerAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetServerAddr::CopyFrom(const cGetServerAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetServerAddr::IsInitialized() const {

  return true;
}

void cGetServerAddr::Swap(cGetServerAddr* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetServerAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetServerAddr_descriptor_;
  metadata.reflection = cGetServerAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetServerAddr::kServAddrFieldNumber;
#endif  // !_MSC_VER

sGetServerAddr::sGetServerAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetServerAddr::InitAsDefaultInstance() {
}

sGetServerAddr::sGetServerAddr(const sGetServerAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetServerAddr::SharedCtor() {
  _cached_size_ = 0;
  serv_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetServerAddr::~sGetServerAddr() {
  SharedDtor();
}

void sGetServerAddr::SharedDtor() {
  if (serv_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete serv_addr_;
  }
  if (this != default_instance_) {
  }
}

void sGetServerAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetServerAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetServerAddr_descriptor_;
}

const sGetServerAddr& sGetServerAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetServerAddr* sGetServerAddr::default_instance_ = NULL;

sGetServerAddr* sGetServerAddr::New() const {
  return new sGetServerAddr;
}

void sGetServerAddr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serv_addr()) {
      if (serv_addr_ != &::google::protobuf::internal::kEmptyString) {
        serv_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetServerAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serv_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serv_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serv_addr().data(), this->serv_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetServerAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string serv_addr = 1;
  if (has_serv_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serv_addr().data(), this->serv_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serv_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetServerAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string serv_addr = 1;
  if (has_serv_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serv_addr().data(), this->serv_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serv_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetServerAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string serv_addr = 1;
    if (has_serv_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serv_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetServerAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetServerAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetServerAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetServerAddr::MergeFrom(const sGetServerAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serv_addr()) {
      set_serv_addr(from.serv_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetServerAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetServerAddr::CopyFrom(const sGetServerAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetServerAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sGetServerAddr::Swap(sGetServerAddr* other) {
  if (other != this) {
    std::swap(serv_addr_, other->serv_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetServerAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetServerAddr_descriptor_;
  metadata.reflection = sGetServerAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetPersonalBooksList::kBookIdFieldNumber;
const int sGetPersonalBooksList::kBookNameFieldNumber;
const int sGetPersonalBooksList::kBookTypeFieldNumber;
const int sGetPersonalBooksList::kResPathFieldNumber;
#endif  // !_MSC_VER

sGetPersonalBooksList::sGetPersonalBooksList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetPersonalBooksList::InitAsDefaultInstance() {
}

sGetPersonalBooksList::sGetPersonalBooksList(const sGetPersonalBooksList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetPersonalBooksList::SharedCtor() {
  _cached_size_ = 0;
  book_id_ = 0;
  book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  book_type_ = 0;
  res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetPersonalBooksList::~sGetPersonalBooksList() {
  SharedDtor();
}

void sGetPersonalBooksList::SharedDtor() {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    delete book_name_;
  }
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (this != default_instance_) {
  }
}

void sGetPersonalBooksList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetPersonalBooksList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetPersonalBooksList_descriptor_;
}

const sGetPersonalBooksList& sGetPersonalBooksList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetPersonalBooksList* sGetPersonalBooksList::default_instance_ = NULL;

sGetPersonalBooksList* sGetPersonalBooksList::New() const {
  return new sGetPersonalBooksList;
}

void sGetPersonalBooksList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    book_id_ = 0;
    if (has_book_name()) {
      if (book_name_ != &::google::protobuf::internal::kEmptyString) {
        book_name_->clear();
      }
    }
    book_type_ = 0;
    if (has_res_path()) {
      if (res_path_ != &::google::protobuf::internal::kEmptyString) {
        res_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetPersonalBooksList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_id_)));
          set_has_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_book_name;
        break;
      }

      // required string book_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_book_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_book_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->book_name().data(), this->book_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_res_path;
        break;
      }

      // required string res_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res_path().data(), this->res_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_book_type;
        break;
      }

      // required int32 book_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_book_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_type_)));
          set_has_book_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetPersonalBooksList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->book_id(), output);
  }

  // required string book_name = 2;
  if (has_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->book_name().data(), this->book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->book_name(), output);
  }

  // required string res_path = 3;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->res_path(), output);
  }

  // required int32 book_type = 4;
  if (has_book_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->book_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetPersonalBooksList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->book_id(), target);
  }

  // required string book_name = 2;
  if (has_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->book_name().data(), this->book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->book_name(), target);
  }

  // required string res_path = 3;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->res_path(), target);
  }

  // required int32 book_type = 4;
  if (has_book_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->book_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetPersonalBooksList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 book_id = 1;
    if (has_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_id());
    }

    // required string book_name = 2;
    if (has_book_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->book_name());
    }

    // required int32 book_type = 4;
    if (has_book_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_type());
    }

    // required string res_path = 3;
    if (has_res_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetPersonalBooksList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetPersonalBooksList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetPersonalBooksList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetPersonalBooksList::MergeFrom(const sGetPersonalBooksList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_book_id()) {
      set_book_id(from.book_id());
    }
    if (from.has_book_name()) {
      set_book_name(from.book_name());
    }
    if (from.has_book_type()) {
      set_book_type(from.book_type());
    }
    if (from.has_res_path()) {
      set_res_path(from.res_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetPersonalBooksList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetPersonalBooksList::CopyFrom(const sGetPersonalBooksList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetPersonalBooksList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void sGetPersonalBooksList::Swap(sGetPersonalBooksList* other) {
  if (other != this) {
    std::swap(book_id_, other->book_id_);
    std::swap(book_name_, other->book_name_);
    std::swap(book_type_, other->book_type_);
    std::swap(res_path_, other->res_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetPersonalBooksList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetPersonalBooksList_descriptor_;
  metadata.reflection = sGetPersonalBooksList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cGetPublicBooksList::cGetPublicBooksList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetPublicBooksList::InitAsDefaultInstance() {
}

cGetPublicBooksList::cGetPublicBooksList(const cGetPublicBooksList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetPublicBooksList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetPublicBooksList::~cGetPublicBooksList() {
  SharedDtor();
}

void cGetPublicBooksList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetPublicBooksList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetPublicBooksList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetPublicBooksList_descriptor_;
}

const cGetPublicBooksList& cGetPublicBooksList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetPublicBooksList* cGetPublicBooksList::default_instance_ = NULL;

cGetPublicBooksList* cGetPublicBooksList::New() const {
  return new cGetPublicBooksList;
}

void cGetPublicBooksList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetPublicBooksList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cGetPublicBooksList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetPublicBooksList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetPublicBooksList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetPublicBooksList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetPublicBooksList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetPublicBooksList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetPublicBooksList::MergeFrom(const cGetPublicBooksList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetPublicBooksList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetPublicBooksList::CopyFrom(const cGetPublicBooksList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetPublicBooksList::IsInitialized() const {

  return true;
}

void cGetPublicBooksList::Swap(cGetPublicBooksList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetPublicBooksList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetPublicBooksList_descriptor_;
  metadata.reflection = cGetPublicBooksList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetPublicBooksList::kBookIdFieldNumber;
const int sGetPublicBooksList::kBookNameFieldNumber;
const int sGetPublicBooksList::kBookTypeFieldNumber;
const int sGetPublicBooksList::kResPathFieldNumber;
#endif  // !_MSC_VER

sGetPublicBooksList::sGetPublicBooksList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetPublicBooksList::InitAsDefaultInstance() {
}

sGetPublicBooksList::sGetPublicBooksList(const sGetPublicBooksList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetPublicBooksList::SharedCtor() {
  _cached_size_ = 0;
  book_id_ = 0;
  book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  book_type_ = 0;
  res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetPublicBooksList::~sGetPublicBooksList() {
  SharedDtor();
}

void sGetPublicBooksList::SharedDtor() {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    delete book_name_;
  }
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (this != default_instance_) {
  }
}

void sGetPublicBooksList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetPublicBooksList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetPublicBooksList_descriptor_;
}

const sGetPublicBooksList& sGetPublicBooksList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetPublicBooksList* sGetPublicBooksList::default_instance_ = NULL;

sGetPublicBooksList* sGetPublicBooksList::New() const {
  return new sGetPublicBooksList;
}

void sGetPublicBooksList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    book_id_ = 0;
    if (has_book_name()) {
      if (book_name_ != &::google::protobuf::internal::kEmptyString) {
        book_name_->clear();
      }
    }
    book_type_ = 0;
    if (has_res_path()) {
      if (res_path_ != &::google::protobuf::internal::kEmptyString) {
        res_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetPublicBooksList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_id_)));
          set_has_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_book_name;
        break;
      }

      // required string book_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_book_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_book_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->book_name().data(), this->book_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_res_path;
        break;
      }

      // required string res_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res_path().data(), this->res_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_book_type;
        break;
      }

      // required int32 book_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_book_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_type_)));
          set_has_book_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetPublicBooksList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->book_id(), output);
  }

  // required string book_name = 2;
  if (has_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->book_name().data(), this->book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->book_name(), output);
  }

  // required string res_path = 3;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->res_path(), output);
  }

  // required int32 book_type = 4;
  if (has_book_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->book_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetPublicBooksList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->book_id(), target);
  }

  // required string book_name = 2;
  if (has_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->book_name().data(), this->book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->book_name(), target);
  }

  // required string res_path = 3;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->res_path(), target);
  }

  // required int32 book_type = 4;
  if (has_book_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->book_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetPublicBooksList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 book_id = 1;
    if (has_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_id());
    }

    // required string book_name = 2;
    if (has_book_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->book_name());
    }

    // required int32 book_type = 4;
    if (has_book_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_type());
    }

    // required string res_path = 3;
    if (has_res_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetPublicBooksList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetPublicBooksList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetPublicBooksList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetPublicBooksList::MergeFrom(const sGetPublicBooksList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_book_id()) {
      set_book_id(from.book_id());
    }
    if (from.has_book_name()) {
      set_book_name(from.book_name());
    }
    if (from.has_book_type()) {
      set_book_type(from.book_type());
    }
    if (from.has_res_path()) {
      set_res_path(from.res_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetPublicBooksList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetPublicBooksList::CopyFrom(const sGetPublicBooksList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetPublicBooksList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void sGetPublicBooksList::Swap(sGetPublicBooksList* other) {
  if (other != this) {
    std::swap(book_id_, other->book_id_);
    std::swap(book_name_, other->book_name_);
    std::swap(book_type_, other->book_type_);
    std::swap(res_path_, other->res_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetPublicBooksList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetPublicBooksList_descriptor_;
  metadata.reflection = sGetPublicBooksList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cUploadBook::kBookNameFieldNumber;
const int cUploadBook::kBookTypeFieldNumber;
const int cUploadBook::kTimeFieldNumber;
const int cUploadBook::kBelongsFieldNumber;
const int cUploadBook::kArtFieldNumber;
const int cUploadBook::kLanguageFieldNumber;
const int cUploadBook::kCommunityFieldNumber;
const int cUploadBook::kHealthFieldNumber;
const int cUploadBook::kScienceFieldNumber;
const int cUploadBook::kResPathFieldNumber;
#endif  // !_MSC_VER

cUploadBook::cUploadBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cUploadBook::InitAsDefaultInstance() {
}

cUploadBook::cUploadBook(const cUploadBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cUploadBook::SharedCtor() {
  _cached_size_ = 0;
  book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  book_type_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  belongs_ = 0;
  art_ = 0;
  language_ = 0;
  community_ = 0;
  health_ = 0;
  science_ = 0;
  res_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cUploadBook::~cUploadBook() {
  SharedDtor();
}

void cUploadBook::SharedDtor() {
  if (book_name_ != &::google::protobuf::internal::kEmptyString) {
    delete book_name_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (res_path_ != &::google::protobuf::internal::kEmptyString) {
    delete res_path_;
  }
  if (this != default_instance_) {
  }
}

void cUploadBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cUploadBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cUploadBook_descriptor_;
}

const cUploadBook& cUploadBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cUploadBook* cUploadBook::default_instance_ = NULL;

cUploadBook* cUploadBook::New() const {
  return new cUploadBook;
}

void cUploadBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_book_name()) {
      if (book_name_ != &::google::protobuf::internal::kEmptyString) {
        book_name_->clear();
      }
    }
    book_type_ = 0;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    belongs_ = 0;
    art_ = 0;
    language_ = 0;
    community_ = 0;
    health_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    science_ = 0;
    if (has_res_path()) {
      if (res_path_ != &::google::protobuf::internal::kEmptyString) {
        res_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cUploadBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string book_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_book_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->book_name().data(), this->book_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_book_type;
        break;
      }

      // required int32 book_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_book_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_type_)));
          set_has_book_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // required string time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_belongs;
        break;
      }

      // required int32 belongs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belongs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belongs_)));
          set_has_belongs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_art;
        break;
      }

      // required int32 art = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_art:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &art_)));
          set_has_art();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_language;
        break;
      }

      // required int32 language = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_community;
        break;
      }

      // required int32 community = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_community:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &community_)));
          set_has_community();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_health;
        break;
      }

      // required int32 health = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_science;
        break;
      }

      // required int32 science = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_science:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &science_)));
          set_has_science();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_res_path;
        break;
      }

      // required string res_path = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res_path().data(), this->res_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cUploadBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string book_name = 1;
  if (has_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->book_name().data(), this->book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->book_name(), output);
  }

  // required int32 book_type = 2;
  if (has_book_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->book_type(), output);
  }

  // required string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->time(), output);
  }

  // required int32 belongs = 4;
  if (has_belongs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->belongs(), output);
  }

  // required int32 art = 5;
  if (has_art()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->art(), output);
  }

  // required int32 language = 6;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->language(), output);
  }

  // required int32 community = 7;
  if (has_community()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->community(), output);
  }

  // required int32 health = 8;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->health(), output);
  }

  // required int32 science = 9;
  if (has_science()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->science(), output);
  }

  // required string res_path = 10;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->res_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cUploadBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string book_name = 1;
  if (has_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->book_name().data(), this->book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->book_name(), target);
  }

  // required int32 book_type = 2;
  if (has_book_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->book_type(), target);
  }

  // required string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }

  // required int32 belongs = 4;
  if (has_belongs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->belongs(), target);
  }

  // required int32 art = 5;
  if (has_art()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->art(), target);
  }

  // required int32 language = 6;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->language(), target);
  }

  // required int32 community = 7;
  if (has_community()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->community(), target);
  }

  // required int32 health = 8;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->health(), target);
  }

  // required int32 science = 9;
  if (has_science()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->science(), target);
  }

  // required string res_path = 10;
  if (has_res_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_path().data(), this->res_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->res_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cUploadBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string book_name = 1;
    if (has_book_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->book_name());
    }

    // required int32 book_type = 2;
    if (has_book_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_type());
    }

    // required string time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required int32 belongs = 4;
    if (has_belongs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->belongs());
    }

    // required int32 art = 5;
    if (has_art()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->art());
    }

    // required int32 language = 6;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // required int32 community = 7;
    if (has_community()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->community());
    }

    // required int32 health = 8;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 science = 9;
    if (has_science()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->science());
    }

    // required string res_path = 10;
    if (has_res_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cUploadBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cUploadBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cUploadBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cUploadBook::MergeFrom(const cUploadBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_book_name()) {
      set_book_name(from.book_name());
    }
    if (from.has_book_type()) {
      set_book_type(from.book_type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_belongs()) {
      set_belongs(from.belongs());
    }
    if (from.has_art()) {
      set_art(from.art());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_community()) {
      set_community(from.community());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_science()) {
      set_science(from.science());
    }
    if (from.has_res_path()) {
      set_res_path(from.res_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cUploadBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cUploadBook::CopyFrom(const cUploadBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cUploadBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void cUploadBook::Swap(cUploadBook* other) {
  if (other != this) {
    std::swap(book_name_, other->book_name_);
    std::swap(book_type_, other->book_type_);
    std::swap(time_, other->time_);
    std::swap(belongs_, other->belongs_);
    std::swap(art_, other->art_);
    std::swap(language_, other->language_);
    std::swap(community_, other->community_);
    std::swap(health_, other->health_);
    std::swap(science_, other->science_);
    std::swap(res_path_, other->res_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cUploadBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cUploadBook_descriptor_;
  metadata.reflection = cUploadBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sUploadBook::kResultFieldNumber;
const int sUploadBook::kMsgFieldNumber;
#endif  // !_MSC_VER

sUploadBook::sUploadBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sUploadBook::InitAsDefaultInstance() {
}

sUploadBook::sUploadBook(const sUploadBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sUploadBook::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sUploadBook::~sUploadBook() {
  SharedDtor();
}

void sUploadBook::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void sUploadBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sUploadBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sUploadBook_descriptor_;
}

const sUploadBook& sUploadBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sUploadBook* sUploadBook::default_instance_ = NULL;

sUploadBook* sUploadBook::New() const {
  return new sUploadBook;
}

void sUploadBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sUploadBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sUploadBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sUploadBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sUploadBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sUploadBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sUploadBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sUploadBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sUploadBook::MergeFrom(const sUploadBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sUploadBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sUploadBook::CopyFrom(const sUploadBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sUploadBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sUploadBook::Swap(sUploadBook* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sUploadBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sUploadBook_descriptor_;
  metadata.reflection = sUploadBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cDownloadFromPersonal::kBookIdFieldNumber;
#endif  // !_MSC_VER

cDownloadFromPersonal::cDownloadFromPersonal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cDownloadFromPersonal::InitAsDefaultInstance() {
}

cDownloadFromPersonal::cDownloadFromPersonal(const cDownloadFromPersonal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cDownloadFromPersonal::SharedCtor() {
  _cached_size_ = 0;
  book_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cDownloadFromPersonal::~cDownloadFromPersonal() {
  SharedDtor();
}

void cDownloadFromPersonal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cDownloadFromPersonal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cDownloadFromPersonal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cDownloadFromPersonal_descriptor_;
}

const cDownloadFromPersonal& cDownloadFromPersonal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cDownloadFromPersonal* cDownloadFromPersonal::default_instance_ = NULL;

cDownloadFromPersonal* cDownloadFromPersonal::New() const {
  return new cDownloadFromPersonal;
}

void cDownloadFromPersonal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    book_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cDownloadFromPersonal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_id_)));
          set_has_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cDownloadFromPersonal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->book_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cDownloadFromPersonal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->book_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cDownloadFromPersonal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 book_id = 1;
    if (has_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cDownloadFromPersonal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cDownloadFromPersonal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cDownloadFromPersonal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cDownloadFromPersonal::MergeFrom(const cDownloadFromPersonal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_book_id()) {
      set_book_id(from.book_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cDownloadFromPersonal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cDownloadFromPersonal::CopyFrom(const cDownloadFromPersonal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cDownloadFromPersonal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cDownloadFromPersonal::Swap(cDownloadFromPersonal* other) {
  if (other != this) {
    std::swap(book_id_, other->book_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cDownloadFromPersonal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cDownloadFromPersonal_descriptor_;
  metadata.reflection = cDownloadFromPersonal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sDownloadFromPersonal::kDownAddrFieldNumber;
#endif  // !_MSC_VER

sDownloadFromPersonal::sDownloadFromPersonal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sDownloadFromPersonal::InitAsDefaultInstance() {
}

sDownloadFromPersonal::sDownloadFromPersonal(const sDownloadFromPersonal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sDownloadFromPersonal::SharedCtor() {
  _cached_size_ = 0;
  down_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sDownloadFromPersonal::~sDownloadFromPersonal() {
  SharedDtor();
}

void sDownloadFromPersonal::SharedDtor() {
  if (down_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete down_addr_;
  }
  if (this != default_instance_) {
  }
}

void sDownloadFromPersonal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sDownloadFromPersonal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sDownloadFromPersonal_descriptor_;
}

const sDownloadFromPersonal& sDownloadFromPersonal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sDownloadFromPersonal* sDownloadFromPersonal::default_instance_ = NULL;

sDownloadFromPersonal* sDownloadFromPersonal::New() const {
  return new sDownloadFromPersonal;
}

void sDownloadFromPersonal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_down_addr()) {
      if (down_addr_ != &::google::protobuf::internal::kEmptyString) {
        down_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sDownloadFromPersonal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string down_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_down_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->down_addr().data(), this->down_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sDownloadFromPersonal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string down_addr = 1;
  if (has_down_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->down_addr().data(), this->down_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->down_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sDownloadFromPersonal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string down_addr = 1;
  if (has_down_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->down_addr().data(), this->down_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->down_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sDownloadFromPersonal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string down_addr = 1;
    if (has_down_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->down_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sDownloadFromPersonal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sDownloadFromPersonal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sDownloadFromPersonal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sDownloadFromPersonal::MergeFrom(const sDownloadFromPersonal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_down_addr()) {
      set_down_addr(from.down_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sDownloadFromPersonal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sDownloadFromPersonal::CopyFrom(const sDownloadFromPersonal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sDownloadFromPersonal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sDownloadFromPersonal::Swap(sDownloadFromPersonal* other) {
  if (other != this) {
    std::swap(down_addr_, other->down_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sDownloadFromPersonal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sDownloadFromPersonal_descriptor_;
  metadata.reflection = sDownloadFromPersonal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cDownloadFromPublic::kBookIdFieldNumber;
#endif  // !_MSC_VER

cDownloadFromPublic::cDownloadFromPublic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cDownloadFromPublic::InitAsDefaultInstance() {
}

cDownloadFromPublic::cDownloadFromPublic(const cDownloadFromPublic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cDownloadFromPublic::SharedCtor() {
  _cached_size_ = 0;
  book_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cDownloadFromPublic::~cDownloadFromPublic() {
  SharedDtor();
}

void cDownloadFromPublic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cDownloadFromPublic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cDownloadFromPublic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cDownloadFromPublic_descriptor_;
}

const cDownloadFromPublic& cDownloadFromPublic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cDownloadFromPublic* cDownloadFromPublic::default_instance_ = NULL;

cDownloadFromPublic* cDownloadFromPublic::New() const {
  return new cDownloadFromPublic;
}

void cDownloadFromPublic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    book_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cDownloadFromPublic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_id_)));
          set_has_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cDownloadFromPublic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->book_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cDownloadFromPublic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->book_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cDownloadFromPublic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 book_id = 1;
    if (has_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cDownloadFromPublic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cDownloadFromPublic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cDownloadFromPublic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cDownloadFromPublic::MergeFrom(const cDownloadFromPublic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_book_id()) {
      set_book_id(from.book_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cDownloadFromPublic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cDownloadFromPublic::CopyFrom(const cDownloadFromPublic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cDownloadFromPublic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cDownloadFromPublic::Swap(cDownloadFromPublic* other) {
  if (other != this) {
    std::swap(book_id_, other->book_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cDownloadFromPublic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cDownloadFromPublic_descriptor_;
  metadata.reflection = cDownloadFromPublic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sDownloadFromPublic::kDownAddrFieldNumber;
#endif  // !_MSC_VER

sDownloadFromPublic::sDownloadFromPublic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sDownloadFromPublic::InitAsDefaultInstance() {
}

sDownloadFromPublic::sDownloadFromPublic(const sDownloadFromPublic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sDownloadFromPublic::SharedCtor() {
  _cached_size_ = 0;
  down_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sDownloadFromPublic::~sDownloadFromPublic() {
  SharedDtor();
}

void sDownloadFromPublic::SharedDtor() {
  if (down_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete down_addr_;
  }
  if (this != default_instance_) {
  }
}

void sDownloadFromPublic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sDownloadFromPublic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sDownloadFromPublic_descriptor_;
}

const sDownloadFromPublic& sDownloadFromPublic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sDownloadFromPublic* sDownloadFromPublic::default_instance_ = NULL;

sDownloadFromPublic* sDownloadFromPublic::New() const {
  return new sDownloadFromPublic;
}

void sDownloadFromPublic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_down_addr()) {
      if (down_addr_ != &::google::protobuf::internal::kEmptyString) {
        down_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sDownloadFromPublic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string down_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_down_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->down_addr().data(), this->down_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sDownloadFromPublic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string down_addr = 1;
  if (has_down_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->down_addr().data(), this->down_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->down_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sDownloadFromPublic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string down_addr = 1;
  if (has_down_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->down_addr().data(), this->down_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->down_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sDownloadFromPublic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string down_addr = 1;
    if (has_down_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->down_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sDownloadFromPublic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sDownloadFromPublic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sDownloadFromPublic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sDownloadFromPublic::MergeFrom(const sDownloadFromPublic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_down_addr()) {
      set_down_addr(from.down_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sDownloadFromPublic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sDownloadFromPublic::CopyFrom(const sDownloadFromPublic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sDownloadFromPublic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sDownloadFromPublic::Swap(sDownloadFromPublic* other) {
  if (other != this) {
    std::swap(down_addr_, other->down_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sDownloadFromPublic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sDownloadFromPublic_descriptor_;
  metadata.reflection = sDownloadFromPublic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cTransferBook::kBookIdFieldNumber;
const int cTransferBook::kAccountFieldNumber;
#endif  // !_MSC_VER

cTransferBook::cTransferBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cTransferBook::InitAsDefaultInstance() {
}

cTransferBook::cTransferBook(const cTransferBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cTransferBook::SharedCtor() {
  _cached_size_ = 0;
  book_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cTransferBook::~cTransferBook() {
  SharedDtor();
}

void cTransferBook::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void cTransferBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cTransferBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cTransferBook_descriptor_;
}

const cTransferBook& cTransferBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cTransferBook* cTransferBook::default_instance_ = NULL;

cTransferBook* cTransferBook::New() const {
  return new cTransferBook;
}

void cTransferBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    book_id_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cTransferBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_id_)));
          set_has_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cTransferBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->book_id(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cTransferBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->book_id(), target);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cTransferBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 book_id = 1;
    if (has_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_id());
    }

    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cTransferBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cTransferBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cTransferBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cTransferBook::MergeFrom(const cTransferBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_book_id()) {
      set_book_id(from.book_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cTransferBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cTransferBook::CopyFrom(const cTransferBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cTransferBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void cTransferBook::Swap(cTransferBook* other) {
  if (other != this) {
    std::swap(book_id_, other->book_id_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cTransferBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cTransferBook_descriptor_;
  metadata.reflection = cTransferBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sTransferBook::kResultFieldNumber;
const int sTransferBook::kMsgFieldNumber;
#endif  // !_MSC_VER

sTransferBook::sTransferBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sTransferBook::InitAsDefaultInstance() {
}

sTransferBook::sTransferBook(const sTransferBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sTransferBook::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sTransferBook::~sTransferBook() {
  SharedDtor();
}

void sTransferBook::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void sTransferBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sTransferBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sTransferBook_descriptor_;
}

const sTransferBook& sTransferBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sTransferBook* sTransferBook::default_instance_ = NULL;

sTransferBook* sTransferBook::New() const {
  return new sTransferBook;
}

void sTransferBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sTransferBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sTransferBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sTransferBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sTransferBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sTransferBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sTransferBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sTransferBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sTransferBook::MergeFrom(const sTransferBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sTransferBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sTransferBook::CopyFrom(const sTransferBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sTransferBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sTransferBook::Swap(sTransferBook* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sTransferBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sTransferBook_descriptor_;
  metadata.reflection = sTransferBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cPublish::kBookIdFieldNumber;
#endif  // !_MSC_VER

cPublish::cPublish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cPublish::InitAsDefaultInstance() {
}

cPublish::cPublish(const cPublish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cPublish::SharedCtor() {
  _cached_size_ = 0;
  book_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cPublish::~cPublish() {
  SharedDtor();
}

void cPublish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cPublish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cPublish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cPublish_descriptor_;
}

const cPublish& cPublish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cPublish* cPublish::default_instance_ = NULL;

cPublish* cPublish::New() const {
  return new cPublish;
}

void cPublish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    book_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cPublish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &book_id_)));
          set_has_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cPublish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->book_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cPublish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 book_id = 1;
  if (has_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->book_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cPublish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 book_id = 1;
    if (has_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->book_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cPublish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cPublish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cPublish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cPublish::MergeFrom(const cPublish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_book_id()) {
      set_book_id(from.book_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cPublish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cPublish::CopyFrom(const cPublish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cPublish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cPublish::Swap(cPublish* other) {
  if (other != this) {
    std::swap(book_id_, other->book_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cPublish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cPublish_descriptor_;
  metadata.reflection = cPublish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sPublish::kResultFieldNumber;
const int sPublish::kMsgFieldNumber;
#endif  // !_MSC_VER

sPublish::sPublish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sPublish::InitAsDefaultInstance() {
}

sPublish::sPublish(const sPublish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sPublish::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sPublish::~sPublish() {
  SharedDtor();
}

void sPublish::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void sPublish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sPublish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sPublish_descriptor_;
}

const sPublish& sPublish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sPublish* sPublish::default_instance_ = NULL;

sPublish* sPublish::New() const {
  return new sPublish;
}

void sPublish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sPublish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sPublish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sPublish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sPublish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sPublish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sPublish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sPublish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sPublish::MergeFrom(const sPublish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sPublish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sPublish::CopyFrom(const sPublish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sPublish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sPublish::Swap(sPublish* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sPublish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sPublish_descriptor_;
  metadata.reflection = sPublish_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
